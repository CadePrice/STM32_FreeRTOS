
ButtonRoulette.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08002108  08002108  00003108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022bc  080022bc  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  080022bc  080022bc  000032bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022c4  080022c4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022c4  080022c4  000032c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022c8  080022c8  000032c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080022cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08002328  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08002328  000041c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000138d  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000056b  00000000  00000000  00005419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00005988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000bb  00000000  00000000  00005a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000146fd  00000000  00000000  00005b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ec4  00000000  00000000  0001a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081990  00000000  00000000  0001c0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009da8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fa0  00000000  00000000  0009dad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0009ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080020f0 	.word	0x080020f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080020f0 	.word	0x080020f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

#include "main.h"

// Main Function
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b094      	sub	sp, #80	@ 0x50
 8000284:	af02      	add	r7, sp, #8
	// PHASE 0: GPIO Configurations, LCD Configurations, Variable Initialization
	GPIO_Config();
 8000286:	f000 f94f 	bl	8000528 <GPIO_Config>
	LCD_Init();
 800028a:	f000 f9b3 	bl	80005f4 <LCD_Init>
	int round, turn, life1, life2;
	srand(time(NULL));
 800028e:	2000      	movs	r0, #0
 8000290:	f000 ff1c 	bl	80010cc <time>
 8000294:	4602      	mov	r2, r0
 8000296:	460b      	mov	r3, r1
 8000298:	4613      	mov	r3, r2
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fd7c 	bl	8000d98 <srand>

	// GAMEPLAY LOOP
	while(1)
	{
		// PHASE 1A: Main Menu
		sprintf(LCDOutput, "-BUTTONROULETTE-PRESS BU TO STRT");
 80002a0:	f107 0310 	add.w	r3, r7, #16
 80002a4:	4996      	ldr	r1, [pc, #600]	@ (8000500 <main+0x280>)
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fea4 	bl	8000ff4 <siprintf>
		LCD_Print(LCDOutput);
 80002ac:	f107 0310 	add.w	r3, r7, #16
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fa0b 	bl	80006cc <LCD_Print>
		while((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) && (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 1))
 80002b6:	bf00      	nop
 80002b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002bc:	4891      	ldr	r0, [pc, #580]	@ (8000504 <main+0x284>)
 80002be:	f000 fc61 	bl	8000b84 <HAL_GPIO_ReadPin>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d107      	bne.n	80002d8 <main+0x58>
 80002c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002cc:	488d      	ldr	r0, [pc, #564]	@ (8000504 <main+0x284>)
 80002ce:	f000 fc59 	bl	8000b84 <HAL_GPIO_ReadPin>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d0ef      	beq.n	80002b8 <main+0x38>
		{
		}

		// PHASE 2A: Initialize Game Variables
		round = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	647b      	str	r3, [r7, #68]	@ 0x44
		turn  = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	643b      	str	r3, [r7, #64]	@ 0x40
		life1 = 1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		life2 = 1;
 80002e4:	2301      	movs	r3, #1
 80002e6:	63bb      	str	r3, [r7, #56]	@ 0x38
		while(1)
		{
			// PHASE 2B: Round Screen
			round++;
 80002e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80002ea:	3301      	adds	r3, #1
 80002ec:	647b      	str	r3, [r7, #68]	@ 0x44
			RandomSeed roundSeed = getSeed();
 80002ee:	463b      	mov	r3, r7
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fa11 	bl	8000718 <getSeed>
			sprintf(LCDOutput, "    ROUND  %d    SAFE:%d |DANGER:%d", round, roundSeed.safeCount, roundSeed.dangerCount);
 80002f6:	68ba      	ldr	r2, [r7, #8]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	f107 0010 	add.w	r0, r7, #16
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	4613      	mov	r3, r2
 8000302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000304:	4980      	ldr	r1, [pc, #512]	@ (8000508 <main+0x288>)
 8000306:	f000 fe75 	bl	8000ff4 <siprintf>
			LCD_Print(LCDOutput);
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f9dc 	bl	80006cc <LCD_Print>
			delay(5000000);
 8000314:	487d      	ldr	r0, [pc, #500]	@ (800050c <main+0x28c>)
 8000316:	f000 fa5f 	bl	80007d8 <delay>

			// PHASE 2C: Game Screen
			for(int i=0; i < roundSeed.length; i++)
 800031a:	2300      	movs	r3, #0
 800031c:	637b      	str	r3, [r7, #52]	@ 0x34
 800031e:	e0c3      	b.n	80004a8 <main+0x228>
			{
				// Update Game Screen
				if(turn % 2 == 0)
 8000320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d10c      	bne.n	8000344 <main+0xc4>
				{
					sprintf(LCDOutput, "PLR1<-      PLR2<3:%d        <3:%d", life1, life2);
 800032a:	f107 0010 	add.w	r0, r7, #16
 800032e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000330:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000332:	4977      	ldr	r1, [pc, #476]	@ (8000510 <main+0x290>)
 8000334:	f000 fe5e 	bl	8000ff4 <siprintf>
					LCD_Print(LCDOutput);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f9c5 	bl	80006cc <LCD_Print>
 8000342:	e00b      	b.n	800035c <main+0xdc>
				}
				else
				{
					sprintf(LCDOutput, "PLR1      ->PLR2<3:%d        <3:%d", life1, life2);
 8000344:	f107 0010 	add.w	r0, r7, #16
 8000348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800034a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800034c:	4971      	ldr	r1, [pc, #452]	@ (8000514 <main+0x294>)
 800034e:	f000 fe51 	bl	8000ff4 <siprintf>
					LCD_Print(LCDOutput);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f9b8 	bl	80006cc <LCD_Print>
				}
				while(1)
				{
					// Offense (White Button)
					if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0)
 800035c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000360:	4868      	ldr	r0, [pc, #416]	@ (8000504 <main+0x284>)
 8000362:	f000 fc0f 	bl	8000b84 <HAL_GPIO_ReadPin>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d137      	bne.n	80003dc <main+0x15c>
					{
						delay(2000000);
 800036c:	486a      	ldr	r0, [pc, #424]	@ (8000518 <main+0x298>)
 800036e:	f000 fa33 	bl	80007d8 <delay>
						if(roundSeed.array[i] == 0)
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d110      	bne.n	80003a2 <main+0x122>
						{
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000380:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000384:	485f      	ldr	r0, [pc, #380]	@ (8000504 <main+0x284>)
 8000386:	f000 fc2e 	bl	8000be6 <HAL_GPIO_TogglePin>
							delay(2000000);
 800038a:	4863      	ldr	r0, [pc, #396]	@ (8000518 <main+0x298>)
 800038c:	f000 fa24 	bl	80007d8 <delay>
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000390:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000394:	485b      	ldr	r0, [pc, #364]	@ (8000504 <main+0x284>)
 8000396:	f000 fc26 	bl	8000be6 <HAL_GPIO_TogglePin>
							delay(2000000);
 800039a:	485f      	ldr	r0, [pc, #380]	@ (8000518 <main+0x298>)
 800039c:	f000 fa1c 	bl	80007d8 <delay>
							break;
 80003a0:	e05e      	b.n	8000460 <main+0x1e0>
						}
						else
						{
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80003a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003a6:	4857      	ldr	r0, [pc, #348]	@ (8000504 <main+0x284>)
 80003a8:	f000 fc1d 	bl	8000be6 <HAL_GPIO_TogglePin>
							delay(2000000);
 80003ac:	485a      	ldr	r0, [pc, #360]	@ (8000518 <main+0x298>)
 80003ae:	f000 fa13 	bl	80007d8 <delay>
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80003b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003b6:	4853      	ldr	r0, [pc, #332]	@ (8000504 <main+0x284>)
 80003b8:	f000 fc15 	bl	8000be6 <HAL_GPIO_TogglePin>
							delay(2000000);
 80003bc:	4856      	ldr	r0, [pc, #344]	@ (8000518 <main+0x298>)
 80003be:	f000 fa0b 	bl	80007d8 <delay>
							if(turn % 2 == 0)
 80003c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80003c4:	f003 0301 	and.w	r3, r3, #1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d103      	bne.n	80003d4 <main+0x154>
							{
								life2--;
 80003cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003ce:	3b01      	subs	r3, #1
 80003d0:	63bb      	str	r3, [r7, #56]	@ 0x38
							}
							else
							{
								life1--;
							}
							break;
 80003d2:	e045      	b.n	8000460 <main+0x1e0>
								life1--;
 80003d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003d6:	3b01      	subs	r3, #1
 80003d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
							break;
 80003da:	e041      	b.n	8000460 <main+0x1e0>
						}
					}

					// Defense (Red Button)
					if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0)
 80003dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003e0:	4848      	ldr	r0, [pc, #288]	@ (8000504 <main+0x284>)
 80003e2:	f000 fbcf 	bl	8000b84 <HAL_GPIO_ReadPin>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d1b7      	bne.n	800035c <main+0xdc>
					{
						delay(2000000);
 80003ec:	484a      	ldr	r0, [pc, #296]	@ (8000518 <main+0x298>)
 80003ee:	f000 f9f3 	bl	80007d8 <delay>
						if(roundSeed.array[i] == 0)
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d113      	bne.n	8000428 <main+0x1a8>
						{
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000400:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000404:	483f      	ldr	r0, [pc, #252]	@ (8000504 <main+0x284>)
 8000406:	f000 fbee 	bl	8000be6 <HAL_GPIO_TogglePin>
							delay(2000000);
 800040a:	4843      	ldr	r0, [pc, #268]	@ (8000518 <main+0x298>)
 800040c:	f000 f9e4 	bl	80007d8 <delay>
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000410:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000414:	483b      	ldr	r0, [pc, #236]	@ (8000504 <main+0x284>)
 8000416:	f000 fbe6 	bl	8000be6 <HAL_GPIO_TogglePin>
							delay(2000000);
 800041a:	483f      	ldr	r0, [pc, #252]	@ (8000518 <main+0x298>)
 800041c:	f000 f9dc 	bl	80007d8 <delay>
							turn--;
 8000420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000422:	3b01      	subs	r3, #1
 8000424:	643b      	str	r3, [r7, #64]	@ 0x40
							break;
 8000426:	e01b      	b.n	8000460 <main+0x1e0>
						}
						else
						{
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000428:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800042c:	4835      	ldr	r0, [pc, #212]	@ (8000504 <main+0x284>)
 800042e:	f000 fbda 	bl	8000be6 <HAL_GPIO_TogglePin>
							delay(2000000);
 8000432:	4839      	ldr	r0, [pc, #228]	@ (8000518 <main+0x298>)
 8000434:	f000 f9d0 	bl	80007d8 <delay>
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000438:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800043c:	4831      	ldr	r0, [pc, #196]	@ (8000504 <main+0x284>)
 800043e:	f000 fbd2 	bl	8000be6 <HAL_GPIO_TogglePin>
							delay(2000000);
 8000442:	4835      	ldr	r0, [pc, #212]	@ (8000518 <main+0x298>)
 8000444:	f000 f9c8 	bl	80007d8 <delay>
							if(turn % 2 == 0)
 8000448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d103      	bne.n	800045a <main+0x1da>
							{
								life1--;
 8000452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000454:	3b01      	subs	r3, #1
 8000456:	63fb      	str	r3, [r7, #60]	@ 0x3c
							}
							else
							{
								life2--;
							}
							break;
 8000458:	e002      	b.n	8000460 <main+0x1e0>
								life2--;
 800045a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800045c:	3b01      	subs	r3, #1
 800045e:	63bb      	str	r3, [r7, #56]	@ 0x38
						}
					}
				}

				// Check for game end
				if(life1 == 0)
 8000460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000462:	2b00      	cmp	r3, #0
 8000464:	d10b      	bne.n	800047e <main+0x1fe>
				{
					sprintf(LCDOutput, "-PLAYER 2 WINS!-PRESS BU TO STRT");
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	492c      	ldr	r1, [pc, #176]	@ (800051c <main+0x29c>)
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fdc1 	bl	8000ff4 <siprintf>
					LCD_Print(LCDOutput);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f928 	bl	80006cc <LCD_Print>
					break;
 800047c:	e019      	b.n	80004b2 <main+0x232>
				}
				else if(life2 == 0)
 800047e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000480:	2b00      	cmp	r3, #0
 8000482:	d10b      	bne.n	800049c <main+0x21c>
				{
					sprintf(LCDOutput, "-PLAYER 1 WINS!-PRESS BU TO STRT");
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4925      	ldr	r1, [pc, #148]	@ (8000520 <main+0x2a0>)
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fdb2 	bl	8000ff4 <siprintf>
					LCD_Print(LCDOutput);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f919 	bl	80006cc <LCD_Print>
					break;
 800049a:	e00a      	b.n	80004b2 <main+0x232>
				}
				turn++;
 800049c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800049e:	3301      	adds	r3, #1
 80004a0:	643b      	str	r3, [r7, #64]	@ 0x40
			for(int i=0; i < roundSeed.length; i++)
 80004a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004a4:	3301      	adds	r3, #1
 80004a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80004ac:	429a      	cmp	r2, r3
 80004ae:	f6ff af37 	blt.w	8000320 <main+0xa0>

			}
			free(roundSeed.array);
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 fbb9 	bl	8000c2c <free>

			// Check if games still happening
			if((life1 == 0) || (life2 == 0))
 80004ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d003      	beq.n	80004c8 <main+0x248>
 80004c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	f47f af10 	bne.w	80002e8 <main+0x68>
			{
				LCD_Print(LCDOutput);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 f8fd 	bl	80006cc <LCD_Print>
				break;
			}
		}

		// Phase 2D: Conclusion
		delay(250000);
 80004d2:	4814      	ldr	r0, [pc, #80]	@ (8000524 <main+0x2a4>)
 80004d4:	f000 f980 	bl	80007d8 <delay>
		while((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) && (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 1))
 80004d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004dc:	4809      	ldr	r0, [pc, #36]	@ (8000504 <main+0x284>)
 80004de:	f000 fb51 	bl	8000b84 <HAL_GPIO_ReadPin>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d107      	bne.n	80004f8 <main+0x278>
 80004e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004ec:	4805      	ldr	r0, [pc, #20]	@ (8000504 <main+0x284>)
 80004ee:	f000 fb49 	bl	8000b84 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d0ef      	beq.n	80004d8 <main+0x258>
		{
		}
		delay(250000);
 80004f8:	480a      	ldr	r0, [pc, #40]	@ (8000524 <main+0x2a4>)
 80004fa:	f000 f96d 	bl	80007d8 <delay>
		sprintf(LCDOutput, "-BUTTONROULETTE-PRESS BU TO STRT");
 80004fe:	e6cf      	b.n	80002a0 <main+0x20>
 8000500:	08002108 	.word	0x08002108
 8000504:	40020800 	.word	0x40020800
 8000508:	0800212c 	.word	0x0800212c
 800050c:	004c4b40 	.word	0x004c4b40
 8000510:	08002150 	.word	0x08002150
 8000514:	08002174 	.word	0x08002174
 8000518:	001e8480 	.word	0x001e8480
 800051c:	08002198 	.word	0x08002198
 8000520:	080021bc 	.word	0x080021bc
 8000524:	0003d090 	.word	0x0003d090

08000528 <GPIO_Config>:
	}
}

// Configure all GPIO Ports
void GPIO_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	@ 0x30
 800052c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b2d      	ldr	r3, [pc, #180]	@ (80005e8 <GPIO_Config+0xc0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a2c      	ldr	r2, [pc, #176]	@ (80005e8 <GPIO_Config+0xc0>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b2a      	ldr	r3, [pc, #168]	@ (80005e8 <GPIO_Config+0xc0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b26      	ldr	r3, [pc, #152]	@ (80005e8 <GPIO_Config+0xc0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a25      	ldr	r2, [pc, #148]	@ (80005e8 <GPIO_Config+0xc0>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <GPIO_Config+0xc0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOA_Init = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIOC_Init = {0};
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

	// LCD PA
	GPIOA_Init.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000586:	23e0      	movs	r3, #224	@ 0xe0
 8000588:	61fb      	str	r3, [r7, #28]
	GPIOA_Init.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	623b      	str	r3, [r7, #32]
	GPIOA_Init.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIOA_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA,&GPIOA_Init);
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	4619      	mov	r1, r3
 800059c:	4813      	ldr	r0, [pc, #76]	@ (80005ec <GPIO_Config+0xc4>)
 800059e:	f000 f96d 	bl	800087c <HAL_GPIO_Init>

	// Output PC (LCD, LED)
	GPIOC_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11;
 80005a2:	f640 43ff 	movw	r3, #3327	@ 0xcff
 80005a6:	60bb      	str	r3, [r7, #8]
	GPIOC_Init.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
	GPIOC_Init.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
	GPIOC_Init.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&GPIOC_Init);
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	4619      	mov	r1, r3
 80005ba:	480d      	ldr	r0, [pc, #52]	@ (80005f0 <GPIO_Config+0xc8>)
 80005bc:	f000 f95e 	bl	800087c <HAL_GPIO_Init>

	// Input PC (Button)
	GPIOC_Init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80005c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005c4:	60bb      	str	r3, [r7, #8]
	GPIOC_Init.Mode = GPIO_MODE_INPUT;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
	GPIOC_Init.Pull = GPIO_PULLUP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	613b      	str	r3, [r7, #16]
	GPIOC_Init.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&GPIOC_Init);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <GPIO_Config+0xc8>)
 80005da:	f000 f94f 	bl	800087c <HAL_GPIO_Init>
}
 80005de:	bf00      	nop
 80005e0:	3730      	adds	r7, #48	@ 0x30
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	40020800 	.word	0x40020800

080005f4 <LCD_Init>:

// Initialize the LCD to Display Information
void LCD_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	delay(150000);
 80005f8:	4817      	ldr	r0, [pc, #92]	@ (8000658 <LCD_Init+0x64>)
 80005fa:	f000 f8ed 	bl	80007d8 <delay>
	LCD_Send(0x30, 0);     							// Function set
 80005fe:	2100      	movs	r1, #0
 8000600:	2030      	movs	r0, #48	@ 0x30
 8000602:	f000 f82d 	bl	8000660 <LCD_Send>
	delay(50000);
 8000606:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800060a:	f000 f8e5 	bl	80007d8 <delay>
	LCD_Send(0x30, 0);     							// Function set again
 800060e:	2100      	movs	r1, #0
 8000610:	2030      	movs	r0, #48	@ 0x30
 8000612:	f000 f825 	bl	8000660 <LCD_Send>
	delay(50000);
 8000616:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800061a:	f000 f8dd 	bl	80007d8 <delay>
	LCD_Send(0x30, 0);     							// Function set again
 800061e:	2100      	movs	r1, #0
 8000620:	2030      	movs	r0, #48	@ 0x30
 8000622:	f000 f81d 	bl	8000660 <LCD_Send>
	delay(50000);
 8000626:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800062a:	f000 f8d5 	bl	80007d8 <delay>
	LCD_Send(0x38, 0);     							// Set 8-bit mode, 2-line display, 5x8 font
 800062e:	2100      	movs	r1, #0
 8000630:	2038      	movs	r0, #56	@ 0x38
 8000632:	f000 f815 	bl	8000660 <LCD_Send>
	LCD_Send(0x0C, 0);     							// Display ON, cursor OFF
 8000636:	2100      	movs	r1, #0
 8000638:	200c      	movs	r0, #12
 800063a:	f000 f811 	bl	8000660 <LCD_Send>
	LCD_Send(0x01, 0);     							// Clear display
 800063e:	2100      	movs	r1, #0
 8000640:	2001      	movs	r0, #1
 8000642:	f000 f80d 	bl	8000660 <LCD_Send>
	delay(100000);
 8000646:	4805      	ldr	r0, [pc, #20]	@ (800065c <LCD_Init+0x68>)
 8000648:	f000 f8c6 	bl	80007d8 <delay>
	LCD_Send(0x06, 0);     							// Increment cursor after each character
 800064c:	2100      	movs	r1, #0
 800064e:	2006      	movs	r0, #6
 8000650:	f000 f806 	bl	8000660 <LCD_Send>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	000249f0 	.word	0x000249f0
 800065c:	000186a0 	.word	0x000186a0

08000660 <LCD_Send>:

// LCD Send Information
// cd = 0 -> command | cd = 1 -> data
void LCD_Send(uint8_t data, uint8_t cd)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, cd ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	2b00      	cmp	r3, #0
 8000674:	bf14      	ite	ne
 8000676:	2301      	movne	r3, #1
 8000678:	2300      	moveq	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	2120      	movs	r1, #32
 8000680:	4810      	ldr	r0, [pc, #64]	@ (80006c4 <LCD_Send+0x64>)
 8000682:	f000 fa97 	bl	8000bb4 <HAL_GPIO_WritePin>

	GPIOC->ODR = (GPIOC->ODR & 0xFFFFFF00) | data;
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <LCD_Send+0x68>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	490d      	ldr	r1, [pc, #52]	@ (80006c8 <LCD_Send+0x68>)
 8000692:	4313      	orrs	r3, r2
 8000694:	614b      	str	r3, [r1, #20]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	480a      	ldr	r0, [pc, #40]	@ (80006c4 <LCD_Send+0x64>)
 800069c:	f000 fa8a 	bl	8000bb4 <HAL_GPIO_WritePin>
	delay(10000);
 80006a0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80006a4:	f000 f898 	bl	80007d8 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	@ 0x80
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <LCD_Send+0x64>)
 80006ae:	f000 fa81 	bl	8000bb4 <HAL_GPIO_WritePin>
	delay(10000);
 80006b2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80006b6:	f000 f88f 	bl	80007d8 <delay>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40020800 	.word	0x40020800

080006cc <LCD_Print>:

// Print Screen to LCD
void LCD_Print(const char *str)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
	LCD_Send(0x80, 0);
 80006d8:	2100      	movs	r1, #0
 80006da:	2080      	movs	r0, #128	@ 0x80
 80006dc:	f7ff ffc0 	bl	8000660 <LCD_Send>
	while(*str)
 80006e0:	e011      	b.n	8000706 <LCD_Print+0x3a>
	{
		if(i==16)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b10      	cmp	r3, #16
 80006e6:	d103      	bne.n	80006f0 <LCD_Print+0x24>
		{
			LCD_Send(0xC0, 0);
 80006e8:	2100      	movs	r1, #0
 80006ea:	20c0      	movs	r0, #192	@ 0xc0
 80006ec:	f7ff ffb8 	bl	8000660 <LCD_Send>
		}
		LCD_Send(*str++, 1);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2101      	movs	r1, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffb0 	bl	8000660 <LCD_Send>
		i++;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3301      	adds	r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
	while(*str)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1e9      	bne.n	80006e2 <LCD_Print+0x16>
	}
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <getSeed>:

// Create a Random Round Seed
RandomSeed getSeed(void)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08d      	sub	sp, #52	@ 0x34
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		int safe = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int danger = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28

		// Create array length
		int length = (rand()%9) + 2;				// Create array length
 8000728:	f000 fb64 	bl	8000df4 <rand>
 800072c:	4601      	mov	r1, r0
 800072e:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <getSeed+0xbc>)
 8000730:	fb83 2301 	smull	r2, r3, r3, r1
 8000734:	105a      	asrs	r2, r3, #1
 8000736:	17cb      	asrs	r3, r1, #31
 8000738:	1ad2      	subs	r2, r2, r3
 800073a:	4613      	mov	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	4413      	add	r3, r2
 8000740:	1aca      	subs	r2, r1, r3
 8000742:	1c93      	adds	r3, r2, #2
 8000744:	623b      	str	r3, [r7, #32]

		int *array = malloc(length * sizeof(int));	// Allocate memory and point to first array element
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fa66 	bl	8000c1c <malloc>
 8000750:	4603      	mov	r3, r0
 8000752:	61fb      	str	r3, [r7, #28]

		for (int i = 0; i < length; i++)			// Fill the array with 1s and 0s
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
 8000758:	e01d      	b.n	8000796 <getSeed+0x7e>
		{
			array[i] = rand() % 2;
 800075a:	f000 fb4b 	bl	8000df4 <rand>
 800075e:	4603      	mov	r3, r0
 8000760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	69f9      	ldr	r1, [r7, #28]
 8000766:	440a      	add	r2, r1
 8000768:	2b00      	cmp	r3, #0
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	bfb8      	it	lt
 8000770:	425b      	neglt	r3, r3
 8000772:	6013      	str	r3, [r2, #0]
			if(array[i] == 0) {safe++;}
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	69fa      	ldr	r2, [r7, #28]
 800077a:	4413      	add	r3, r2
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d103      	bne.n	800078a <getSeed+0x72>
 8000782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000784:	3301      	adds	r3, #1
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000788:	e002      	b.n	8000790 <getSeed+0x78>
			else {danger++;}
 800078a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800078c:	3301      	adds	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (int i = 0; i < length; i++)			// Fill the array with 1s and 0s
 8000790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000792:	3301      	adds	r3, #1
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
 8000796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	429a      	cmp	r2, r3
 800079c:	dbdd      	blt.n	800075a <getSeed+0x42>
		}
		if((safe == 0) || (danger == 0)) {continue;}
 800079e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0bd      	beq.n	8000720 <getSeed+0x8>
 80007a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <getSeed+0x94>
	{
 80007aa:	e7b9      	b.n	8000720 <getSeed+0x8>

		RandomSeed result = {array, length, safe, danger};
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ba:	61bb      	str	r3, [r7, #24]
		return result;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	461c      	mov	r4, r3
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	3734      	adds	r7, #52	@ 0x34
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	bf00      	nop
 80007d4:	38e38e39 	.word	0x38e38e39

080007d8 <delay>:

// For Loop Creates Soft Delay in Program
void delay(uint32_t delayVal)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i=0;i < delayVal; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e002      	b.n	80007ec <delay+0x14>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3301      	adds	r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3f8      	bcc.n	80007e6 <delay+0xe>
	{
	}
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <SystemInit+0x20>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800080e:	4a05      	ldr	r2, [pc, #20]	@ (8000824 <SystemInit+0x20>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000860 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800082c:	f7ff ffea 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	@ (8000864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	@ (8000868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	@ (8000870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	@ (8000874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000856:	f000 fcbd 	bl	80011d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800085a:	f7ff fd11 	bl	8000280 <main>
  bx  lr    
 800085e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000860:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800086c:	080022cc 	.word	0x080022cc
  ldr r2, =_sbss
 8000870:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000874:	200001c8 	.word	0x200001c8

08000878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC_IRQHandler>
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	@ 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
 8000896:	e159      	b.n	8000b4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000898:	2201      	movs	r2, #1
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	f040 8148 	bne.w	8000b46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d005      	beq.n	80008ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d130      	bne.n	8000930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2203      	movs	r2, #3
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43db      	mvns	r3, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4013      	ands	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	68da      	ldr	r2, [r3, #12]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000904:	2201      	movs	r2, #1
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4013      	ands	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	091b      	lsrs	r3, r3, #4
 800091a:	f003 0201 	and.w	r2, r3, #1
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4313      	orrs	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	2b03      	cmp	r3, #3
 800093a:	d017      	beq.n	800096c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	2203      	movs	r2, #3
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d123      	bne.n	80009c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	08da      	lsrs	r2, r3, #3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3208      	adds	r2, #8
 8000980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	f003 0307 	and.w	r3, r3, #7
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	220f      	movs	r2, #15
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	691a      	ldr	r2, [r3, #16]
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	08da      	lsrs	r2, r3, #3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3208      	adds	r2, #8
 80009ba:	69b9      	ldr	r1, [r7, #24]
 80009bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4013      	ands	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0203 	and.w	r2, r3, #3
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 80a2 	beq.w	8000b46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b57      	ldr	r3, [pc, #348]	@ (8000b64 <HAL_GPIO_Init+0x2e8>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a56      	ldr	r2, [pc, #344]	@ (8000b64 <HAL_GPIO_Init+0x2e8>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b54      	ldr	r3, [pc, #336]	@ (8000b64 <HAL_GPIO_Init+0x2e8>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a1e:	4a52      	ldr	r2, [pc, #328]	@ (8000b68 <HAL_GPIO_Init+0x2ec>)
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3302      	adds	r3, #2
 8000a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	220f      	movs	r2, #15
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a49      	ldr	r2, [pc, #292]	@ (8000b6c <HAL_GPIO_Init+0x2f0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d019      	beq.n	8000a7e <HAL_GPIO_Init+0x202>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a48      	ldr	r2, [pc, #288]	@ (8000b70 <HAL_GPIO_Init+0x2f4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d013      	beq.n	8000a7a <HAL_GPIO_Init+0x1fe>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a47      	ldr	r2, [pc, #284]	@ (8000b74 <HAL_GPIO_Init+0x2f8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d00d      	beq.n	8000a76 <HAL_GPIO_Init+0x1fa>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a46      	ldr	r2, [pc, #280]	@ (8000b78 <HAL_GPIO_Init+0x2fc>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d007      	beq.n	8000a72 <HAL_GPIO_Init+0x1f6>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a45      	ldr	r2, [pc, #276]	@ (8000b7c <HAL_GPIO_Init+0x300>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d101      	bne.n	8000a6e <HAL_GPIO_Init+0x1f2>
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	e008      	b.n	8000a80 <HAL_GPIO_Init+0x204>
 8000a6e:	2307      	movs	r3, #7
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x204>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e004      	b.n	8000a80 <HAL_GPIO_Init+0x204>
 8000a76:	2302      	movs	r3, #2
 8000a78:	e002      	b.n	8000a80 <HAL_GPIO_Init+0x204>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x204>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	f002 0203 	and.w	r2, r2, #3
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4093      	lsls	r3, r2
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a90:	4935      	ldr	r1, [pc, #212]	@ (8000b68 <HAL_GPIO_Init+0x2ec>)
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9e:	4b38      	ldr	r3, [pc, #224]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aec:	4a24      	ldr	r2, [pc, #144]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000af2:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b16:	4a1a      	ldr	r2, [pc, #104]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b40:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <HAL_GPIO_Init+0x304>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	f67f aea2 	bls.w	8000898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3724      	adds	r7, #36	@ 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40013800 	.word	0x40013800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40020c00 	.word	0x40020c00
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40013c00 	.word	0x40013c00

08000b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	691a      	ldr	r2, [r3, #16]
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
 8000ba0:	e001      	b.n	8000ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc4:	787b      	ldrb	r3, [r7, #1]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d003      	beq.n	8000bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bca:	887a      	ldrh	r2, [r7, #2]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bd0:	e003      	b.n	8000bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	041a      	lsls	r2, r3, #16
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	619a      	str	r2, [r3, #24]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bf8:	887a      	ldrh	r2, [r7, #2]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	041a      	lsls	r2, r3, #16
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	43d9      	mvns	r1, r3
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	400b      	ands	r3, r1
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	619a      	str	r2, [r3, #24]
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <malloc>:
 8000c1c:	4b02      	ldr	r3, [pc, #8]	@ (8000c28 <malloc+0xc>)
 8000c1e:	4601      	mov	r1, r0
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	f000 b82d 	b.w	8000c80 <_malloc_r>
 8000c26:	bf00      	nop
 8000c28:	2000000c 	.word	0x2000000c

08000c2c <free>:
 8000c2c:	4b02      	ldr	r3, [pc, #8]	@ (8000c38 <free+0xc>)
 8000c2e:	4601      	mov	r1, r0
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	f000 bb15 	b.w	8001260 <_free_r>
 8000c36:	bf00      	nop
 8000c38:	2000000c 	.word	0x2000000c

08000c3c <sbrk_aligned>:
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8000c7c <sbrk_aligned+0x40>)
 8000c40:	460c      	mov	r4, r1
 8000c42:	6831      	ldr	r1, [r6, #0]
 8000c44:	4605      	mov	r5, r0
 8000c46:	b911      	cbnz	r1, 8000c4e <sbrk_aligned+0x12>
 8000c48:	f000 faa2 	bl	8001190 <_sbrk_r>
 8000c4c:	6030      	str	r0, [r6, #0]
 8000c4e:	4621      	mov	r1, r4
 8000c50:	4628      	mov	r0, r5
 8000c52:	f000 fa9d 	bl	8001190 <_sbrk_r>
 8000c56:	1c43      	adds	r3, r0, #1
 8000c58:	d103      	bne.n	8000c62 <sbrk_aligned+0x26>
 8000c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8000c5e:	4620      	mov	r0, r4
 8000c60:	bd70      	pop	{r4, r5, r6, pc}
 8000c62:	1cc4      	adds	r4, r0, #3
 8000c64:	f024 0403 	bic.w	r4, r4, #3
 8000c68:	42a0      	cmp	r0, r4
 8000c6a:	d0f8      	beq.n	8000c5e <sbrk_aligned+0x22>
 8000c6c:	1a21      	subs	r1, r4, r0
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f000 fa8e 	bl	8001190 <_sbrk_r>
 8000c74:	3001      	adds	r0, #1
 8000c76:	d1f2      	bne.n	8000c5e <sbrk_aligned+0x22>
 8000c78:	e7ef      	b.n	8000c5a <sbrk_aligned+0x1e>
 8000c7a:	bf00      	nop
 8000c7c:	20000078 	.word	0x20000078

08000c80 <_malloc_r>:
 8000c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c84:	1ccd      	adds	r5, r1, #3
 8000c86:	f025 0503 	bic.w	r5, r5, #3
 8000c8a:	3508      	adds	r5, #8
 8000c8c:	2d0c      	cmp	r5, #12
 8000c8e:	bf38      	it	cc
 8000c90:	250c      	movcc	r5, #12
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	4606      	mov	r6, r0
 8000c96:	db01      	blt.n	8000c9c <_malloc_r+0x1c>
 8000c98:	42a9      	cmp	r1, r5
 8000c9a:	d904      	bls.n	8000ca6 <_malloc_r+0x26>
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	6033      	str	r3, [r6, #0]
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d7c <_malloc_r+0xfc>
 8000caa:	f000 f869 	bl	8000d80 <__malloc_lock>
 8000cae:	f8d8 3000 	ldr.w	r3, [r8]
 8000cb2:	461c      	mov	r4, r3
 8000cb4:	bb44      	cbnz	r4, 8000d08 <_malloc_r+0x88>
 8000cb6:	4629      	mov	r1, r5
 8000cb8:	4630      	mov	r0, r6
 8000cba:	f7ff ffbf 	bl	8000c3c <sbrk_aligned>
 8000cbe:	1c43      	adds	r3, r0, #1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	d158      	bne.n	8000d76 <_malloc_r+0xf6>
 8000cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8000cc8:	4627      	mov	r7, r4
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d143      	bne.n	8000d56 <_malloc_r+0xd6>
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d04b      	beq.n	8000d6a <_malloc_r+0xea>
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	4639      	mov	r1, r7
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	eb04 0903 	add.w	r9, r4, r3
 8000cdc:	f000 fa58 	bl	8001190 <_sbrk_r>
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	d142      	bne.n	8000d6a <_malloc_r+0xea>
 8000ce4:	6821      	ldr	r1, [r4, #0]
 8000ce6:	1a6d      	subs	r5, r5, r1
 8000ce8:	4629      	mov	r1, r5
 8000cea:	4630      	mov	r0, r6
 8000cec:	f7ff ffa6 	bl	8000c3c <sbrk_aligned>
 8000cf0:	3001      	adds	r0, #1
 8000cf2:	d03a      	beq.n	8000d6a <_malloc_r+0xea>
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	442b      	add	r3, r5
 8000cf8:	6023      	str	r3, [r4, #0]
 8000cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	bb62      	cbnz	r2, 8000d5c <_malloc_r+0xdc>
 8000d02:	f8c8 7000 	str.w	r7, [r8]
 8000d06:	e00f      	b.n	8000d28 <_malloc_r+0xa8>
 8000d08:	6822      	ldr	r2, [r4, #0]
 8000d0a:	1b52      	subs	r2, r2, r5
 8000d0c:	d420      	bmi.n	8000d50 <_malloc_r+0xd0>
 8000d0e:	2a0b      	cmp	r2, #11
 8000d10:	d917      	bls.n	8000d42 <_malloc_r+0xc2>
 8000d12:	1961      	adds	r1, r4, r5
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	6025      	str	r5, [r4, #0]
 8000d18:	bf18      	it	ne
 8000d1a:	6059      	strne	r1, [r3, #4]
 8000d1c:	6863      	ldr	r3, [r4, #4]
 8000d1e:	bf08      	it	eq
 8000d20:	f8c8 1000 	streq.w	r1, [r8]
 8000d24:	5162      	str	r2, [r4, r5]
 8000d26:	604b      	str	r3, [r1, #4]
 8000d28:	4630      	mov	r0, r6
 8000d2a:	f000 f82f 	bl	8000d8c <__malloc_unlock>
 8000d2e:	f104 000b 	add.w	r0, r4, #11
 8000d32:	1d23      	adds	r3, r4, #4
 8000d34:	f020 0007 	bic.w	r0, r0, #7
 8000d38:	1ac2      	subs	r2, r0, r3
 8000d3a:	bf1c      	itt	ne
 8000d3c:	1a1b      	subne	r3, r3, r0
 8000d3e:	50a3      	strne	r3, [r4, r2]
 8000d40:	e7af      	b.n	8000ca2 <_malloc_r+0x22>
 8000d42:	6862      	ldr	r2, [r4, #4]
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	bf0c      	ite	eq
 8000d48:	f8c8 2000 	streq.w	r2, [r8]
 8000d4c:	605a      	strne	r2, [r3, #4]
 8000d4e:	e7eb      	b.n	8000d28 <_malloc_r+0xa8>
 8000d50:	4623      	mov	r3, r4
 8000d52:	6864      	ldr	r4, [r4, #4]
 8000d54:	e7ae      	b.n	8000cb4 <_malloc_r+0x34>
 8000d56:	463c      	mov	r4, r7
 8000d58:	687f      	ldr	r7, [r7, #4]
 8000d5a:	e7b6      	b.n	8000cca <_malloc_r+0x4a>
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	42a3      	cmp	r3, r4
 8000d62:	d1fb      	bne.n	8000d5c <_malloc_r+0xdc>
 8000d64:	2300      	movs	r3, #0
 8000d66:	6053      	str	r3, [r2, #4]
 8000d68:	e7de      	b.n	8000d28 <_malloc_r+0xa8>
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	6033      	str	r3, [r6, #0]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f000 f80c 	bl	8000d8c <__malloc_unlock>
 8000d74:	e794      	b.n	8000ca0 <_malloc_r+0x20>
 8000d76:	6005      	str	r5, [r0, #0]
 8000d78:	e7d6      	b.n	8000d28 <_malloc_r+0xa8>
 8000d7a:	bf00      	nop
 8000d7c:	2000007c 	.word	0x2000007c

08000d80 <__malloc_lock>:
 8000d80:	4801      	ldr	r0, [pc, #4]	@ (8000d88 <__malloc_lock+0x8>)
 8000d82:	f000 ba4c 	b.w	800121e <__retarget_lock_acquire_recursive>
 8000d86:	bf00      	nop
 8000d88:	200001c0 	.word	0x200001c0

08000d8c <__malloc_unlock>:
 8000d8c:	4801      	ldr	r0, [pc, #4]	@ (8000d94 <__malloc_unlock+0x8>)
 8000d8e:	f000 ba47 	b.w	8001220 <__retarget_lock_release_recursive>
 8000d92:	bf00      	nop
 8000d94:	200001c0 	.word	0x200001c0

08000d98 <srand>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <srand+0x44>)
 8000d9c:	681d      	ldr	r5, [r3, #0]
 8000d9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000da0:	4604      	mov	r4, r0
 8000da2:	b9b3      	cbnz	r3, 8000dd2 <srand+0x3a>
 8000da4:	2018      	movs	r0, #24
 8000da6:	f7ff ff39 	bl	8000c1c <malloc>
 8000daa:	4602      	mov	r2, r0
 8000dac:	6328      	str	r0, [r5, #48]	@ 0x30
 8000dae:	b920      	cbnz	r0, 8000dba <srand+0x22>
 8000db0:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <srand+0x48>)
 8000db2:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <srand+0x4c>)
 8000db4:	2146      	movs	r1, #70	@ 0x46
 8000db6:	f000 fa35 	bl	8001224 <__assert_func>
 8000dba:	490b      	ldr	r1, [pc, #44]	@ (8000de8 <srand+0x50>)
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <srand+0x54>)
 8000dbe:	e9c0 1300 	strd	r1, r3, [r0]
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <srand+0x58>)
 8000dc4:	6083      	str	r3, [r0, #8]
 8000dc6:	230b      	movs	r3, #11
 8000dc8:	8183      	strh	r3, [r0, #12]
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2001      	movs	r0, #1
 8000dce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000dd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611c      	str	r4, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	bd38      	pop	{r3, r4, r5, pc}
 8000ddc:	2000000c 	.word	0x2000000c
 8000de0:	080021dd 	.word	0x080021dd
 8000de4:	080021f4 	.word	0x080021f4
 8000de8:	abcd330e 	.word	0xabcd330e
 8000dec:	e66d1234 	.word	0xe66d1234
 8000df0:	0005deec 	.word	0x0005deec

08000df4 <rand>:
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <rand+0x5c>)
 8000df6:	b510      	push	{r4, lr}
 8000df8:	681c      	ldr	r4, [r3, #0]
 8000dfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000dfc:	b9b3      	cbnz	r3, 8000e2c <rand+0x38>
 8000dfe:	2018      	movs	r0, #24
 8000e00:	f7ff ff0c 	bl	8000c1c <malloc>
 8000e04:	4602      	mov	r2, r0
 8000e06:	6320      	str	r0, [r4, #48]	@ 0x30
 8000e08:	b920      	cbnz	r0, 8000e14 <rand+0x20>
 8000e0a:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <rand+0x60>)
 8000e0c:	4812      	ldr	r0, [pc, #72]	@ (8000e58 <rand+0x64>)
 8000e0e:	2152      	movs	r1, #82	@ 0x52
 8000e10:	f000 fa08 	bl	8001224 <__assert_func>
 8000e14:	4911      	ldr	r1, [pc, #68]	@ (8000e5c <rand+0x68>)
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <rand+0x6c>)
 8000e18:	e9c0 1300 	strd	r1, r3, [r0]
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <rand+0x70>)
 8000e1e:	6083      	str	r3, [r0, #8]
 8000e20:	230b      	movs	r3, #11
 8000e22:	8183      	strh	r3, [r0, #12]
 8000e24:	2100      	movs	r1, #0
 8000e26:	2001      	movs	r0, #1
 8000e28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000e2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000e2e:	480e      	ldr	r0, [pc, #56]	@ (8000e68 <rand+0x74>)
 8000e30:	690b      	ldr	r3, [r1, #16]
 8000e32:	694c      	ldr	r4, [r1, #20]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <rand+0x78>)
 8000e36:	4358      	muls	r0, r3
 8000e38:	fb02 0004 	mla	r0, r2, r4, r0
 8000e3c:	fba3 3202 	umull	r3, r2, r3, r2
 8000e40:	3301      	adds	r3, #1
 8000e42:	eb40 0002 	adc.w	r0, r0, r2
 8000e46:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000e4a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000e4e:	bd10      	pop	{r4, pc}
 8000e50:	2000000c 	.word	0x2000000c
 8000e54:	080021dd 	.word	0x080021dd
 8000e58:	080021f4 	.word	0x080021f4
 8000e5c:	abcd330e 	.word	0xabcd330e
 8000e60:	e66d1234 	.word	0xe66d1234
 8000e64:	0005deec 	.word	0x0005deec
 8000e68:	5851f42d 	.word	0x5851f42d
 8000e6c:	4c957f2d 	.word	0x4c957f2d

08000e70 <std>:
 8000e70:	2300      	movs	r3, #0
 8000e72:	b510      	push	{r4, lr}
 8000e74:	4604      	mov	r4, r0
 8000e76:	e9c0 3300 	strd	r3, r3, [r0]
 8000e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e7e:	6083      	str	r3, [r0, #8]
 8000e80:	8181      	strh	r1, [r0, #12]
 8000e82:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e84:	81c2      	strh	r2, [r0, #14]
 8000e86:	6183      	str	r3, [r0, #24]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	305c      	adds	r0, #92	@ 0x5c
 8000e8e:	f000 f914 	bl	80010ba <memset>
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <std+0x58>)
 8000e94:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <std+0x5c>)
 8000e98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <std+0x60>)
 8000e9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <std+0x64>)
 8000ea0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <std+0x68>)
 8000ea4:	6224      	str	r4, [r4, #32]
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	d006      	beq.n	8000eb8 <std+0x48>
 8000eaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000eae:	4294      	cmp	r4, r2
 8000eb0:	d002      	beq.n	8000eb8 <std+0x48>
 8000eb2:	33d0      	adds	r3, #208	@ 0xd0
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d105      	bne.n	8000ec4 <std+0x54>
 8000eb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ec0:	f000 b9ac 	b.w	800121c <__retarget_lock_init_recursive>
 8000ec4:	bd10      	pop	{r4, pc}
 8000ec6:	bf00      	nop
 8000ec8:	08001035 	.word	0x08001035
 8000ecc:	08001057 	.word	0x08001057
 8000ed0:	0800108f 	.word	0x0800108f
 8000ed4:	080010b3 	.word	0x080010b3
 8000ed8:	20000080 	.word	0x20000080

08000edc <stdio_exit_handler>:
 8000edc:	4a02      	ldr	r2, [pc, #8]	@ (8000ee8 <stdio_exit_handler+0xc>)
 8000ede:	4903      	ldr	r1, [pc, #12]	@ (8000eec <stdio_exit_handler+0x10>)
 8000ee0:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <stdio_exit_handler+0x14>)
 8000ee2:	f000 b869 	b.w	8000fb8 <_fwalk_sglue>
 8000ee6:	bf00      	nop
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	080019c9 	.word	0x080019c9
 8000ef0:	20000010 	.word	0x20000010

08000ef4 <cleanup_stdio>:
 8000ef4:	6841      	ldr	r1, [r0, #4]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <cleanup_stdio+0x34>)
 8000ef8:	4299      	cmp	r1, r3
 8000efa:	b510      	push	{r4, lr}
 8000efc:	4604      	mov	r4, r0
 8000efe:	d001      	beq.n	8000f04 <cleanup_stdio+0x10>
 8000f00:	f000 fd62 	bl	80019c8 <_fflush_r>
 8000f04:	68a1      	ldr	r1, [r4, #8]
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <cleanup_stdio+0x38>)
 8000f08:	4299      	cmp	r1, r3
 8000f0a:	d002      	beq.n	8000f12 <cleanup_stdio+0x1e>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f000 fd5b 	bl	80019c8 <_fflush_r>
 8000f12:	68e1      	ldr	r1, [r4, #12]
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <cleanup_stdio+0x3c>)
 8000f16:	4299      	cmp	r1, r3
 8000f18:	d004      	beq.n	8000f24 <cleanup_stdio+0x30>
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f20:	f000 bd52 	b.w	80019c8 <_fflush_r>
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	bf00      	nop
 8000f28:	20000080 	.word	0x20000080
 8000f2c:	200000e8 	.word	0x200000e8
 8000f30:	20000150 	.word	0x20000150

08000f34 <global_stdio_init.part.0>:
 8000f34:	b510      	push	{r4, lr}
 8000f36:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <global_stdio_init.part.0+0x30>)
 8000f38:	4c0b      	ldr	r4, [pc, #44]	@ (8000f68 <global_stdio_init.part.0+0x34>)
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <global_stdio_init.part.0+0x38>)
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	4620      	mov	r0, r4
 8000f40:	2200      	movs	r2, #0
 8000f42:	2104      	movs	r1, #4
 8000f44:	f7ff ff94 	bl	8000e70 <std>
 8000f48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2109      	movs	r1, #9
 8000f50:	f7ff ff8e 	bl	8000e70 <std>
 8000f54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f58:	2202      	movs	r2, #2
 8000f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f5e:	2112      	movs	r1, #18
 8000f60:	f7ff bf86 	b.w	8000e70 <std>
 8000f64:	200001b8 	.word	0x200001b8
 8000f68:	20000080 	.word	0x20000080
 8000f6c:	08000edd 	.word	0x08000edd

08000f70 <__sfp_lock_acquire>:
 8000f70:	4801      	ldr	r0, [pc, #4]	@ (8000f78 <__sfp_lock_acquire+0x8>)
 8000f72:	f000 b954 	b.w	800121e <__retarget_lock_acquire_recursive>
 8000f76:	bf00      	nop
 8000f78:	200001c1 	.word	0x200001c1

08000f7c <__sfp_lock_release>:
 8000f7c:	4801      	ldr	r0, [pc, #4]	@ (8000f84 <__sfp_lock_release+0x8>)
 8000f7e:	f000 b94f 	b.w	8001220 <__retarget_lock_release_recursive>
 8000f82:	bf00      	nop
 8000f84:	200001c1 	.word	0x200001c1

08000f88 <__sinit>:
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	f7ff fff0 	bl	8000f70 <__sfp_lock_acquire>
 8000f90:	6a23      	ldr	r3, [r4, #32]
 8000f92:	b11b      	cbz	r3, 8000f9c <__sinit+0x14>
 8000f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f98:	f7ff bff0 	b.w	8000f7c <__sfp_lock_release>
 8000f9c:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <__sinit+0x28>)
 8000f9e:	6223      	str	r3, [r4, #32]
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <__sinit+0x2c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f5      	bne.n	8000f94 <__sinit+0xc>
 8000fa8:	f7ff ffc4 	bl	8000f34 <global_stdio_init.part.0>
 8000fac:	e7f2      	b.n	8000f94 <__sinit+0xc>
 8000fae:	bf00      	nop
 8000fb0:	08000ef5 	.word	0x08000ef5
 8000fb4:	200001b8 	.word	0x200001b8

08000fb8 <_fwalk_sglue>:
 8000fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fbc:	4607      	mov	r7, r0
 8000fbe:	4688      	mov	r8, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	2600      	movs	r6, #0
 8000fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8000fcc:	d505      	bpl.n	8000fda <_fwalk_sglue+0x22>
 8000fce:	6824      	ldr	r4, [r4, #0]
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d1f7      	bne.n	8000fc4 <_fwalk_sglue+0xc>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fda:	89ab      	ldrh	r3, [r5, #12]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d907      	bls.n	8000ff0 <_fwalk_sglue+0x38>
 8000fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	d003      	beq.n	8000ff0 <_fwalk_sglue+0x38>
 8000fe8:	4629      	mov	r1, r5
 8000fea:	4638      	mov	r0, r7
 8000fec:	47c0      	blx	r8
 8000fee:	4306      	orrs	r6, r0
 8000ff0:	3568      	adds	r5, #104	@ 0x68
 8000ff2:	e7e9      	b.n	8000fc8 <_fwalk_sglue+0x10>

08000ff4 <siprintf>:
 8000ff4:	b40e      	push	{r1, r2, r3}
 8000ff6:	b500      	push	{lr}
 8000ff8:	b09c      	sub	sp, #112	@ 0x70
 8000ffa:	ab1d      	add	r3, sp, #116	@ 0x74
 8000ffc:	9002      	str	r0, [sp, #8]
 8000ffe:	9006      	str	r0, [sp, #24]
 8001000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001004:	4809      	ldr	r0, [pc, #36]	@ (800102c <siprintf+0x38>)
 8001006:	9107      	str	r1, [sp, #28]
 8001008:	9104      	str	r1, [sp, #16]
 800100a:	4909      	ldr	r1, [pc, #36]	@ (8001030 <siprintf+0x3c>)
 800100c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001010:	9105      	str	r1, [sp, #20]
 8001012:	6800      	ldr	r0, [r0, #0]
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	a902      	add	r1, sp, #8
 8001018:	f000 f9c8 	bl	80013ac <_svfiprintf_r>
 800101c:	9b02      	ldr	r3, [sp, #8]
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	b01c      	add	sp, #112	@ 0x70
 8001024:	f85d eb04 	ldr.w	lr, [sp], #4
 8001028:	b003      	add	sp, #12
 800102a:	4770      	bx	lr
 800102c:	2000000c 	.word	0x2000000c
 8001030:	ffff0208 	.word	0xffff0208

08001034 <__sread>:
 8001034:	b510      	push	{r4, lr}
 8001036:	460c      	mov	r4, r1
 8001038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800103c:	f000 f896 	bl	800116c <_read_r>
 8001040:	2800      	cmp	r0, #0
 8001042:	bfab      	itete	ge
 8001044:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001046:	89a3      	ldrhlt	r3, [r4, #12]
 8001048:	181b      	addge	r3, r3, r0
 800104a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800104e:	bfac      	ite	ge
 8001050:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001052:	81a3      	strhlt	r3, [r4, #12]
 8001054:	bd10      	pop	{r4, pc}

08001056 <__swrite>:
 8001056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105a:	461f      	mov	r7, r3
 800105c:	898b      	ldrh	r3, [r1, #12]
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	4605      	mov	r5, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4616      	mov	r6, r2
 8001066:	d505      	bpl.n	8001074 <__swrite+0x1e>
 8001068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800106c:	2302      	movs	r3, #2
 800106e:	2200      	movs	r2, #0
 8001070:	f000 f86a 	bl	8001148 <_lseek_r>
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800107a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800107e:	81a3      	strh	r3, [r4, #12]
 8001080:	4632      	mov	r2, r6
 8001082:	463b      	mov	r3, r7
 8001084:	4628      	mov	r0, r5
 8001086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800108a:	f000 b891 	b.w	80011b0 <_write_r>

0800108e <__sseek>:
 800108e:	b510      	push	{r4, lr}
 8001090:	460c      	mov	r4, r1
 8001092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001096:	f000 f857 	bl	8001148 <_lseek_r>
 800109a:	1c43      	adds	r3, r0, #1
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	bf15      	itete	ne
 80010a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010aa:	81a3      	strheq	r3, [r4, #12]
 80010ac:	bf18      	it	ne
 80010ae:	81a3      	strhne	r3, [r4, #12]
 80010b0:	bd10      	pop	{r4, pc}

080010b2 <__sclose>:
 80010b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b6:	f000 b825 	b.w	8001104 <_close_r>

080010ba <memset>:
 80010ba:	4402      	add	r2, r0
 80010bc:	4603      	mov	r3, r0
 80010be:	4293      	cmp	r3, r2
 80010c0:	d100      	bne.n	80010c4 <memset+0xa>
 80010c2:	4770      	bx	lr
 80010c4:	f803 1b01 	strb.w	r1, [r3], #1
 80010c8:	e7f9      	b.n	80010be <memset+0x4>
	...

080010cc <time>:
 80010cc:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <time+0x34>)
 80010d0:	f04f 36ff 	mov.w	r6, #4294967295
 80010d4:	f04f 37ff 	mov.w	r7, #4294967295
 80010d8:	4669      	mov	r1, sp
 80010da:	4604      	mov	r4, r0
 80010dc:	2200      	movs	r2, #0
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	e9cd 6700 	strd	r6, r7, [sp]
 80010e4:	f000 f81e 	bl	8001124 <_gettimeofday_r>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	bfb8      	it	lt
 80010ec:	e9cd 6700 	strdlt	r6, r7, [sp]
 80010f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80010f4:	b10c      	cbz	r4, 80010fa <time+0x2e>
 80010f6:	e9c4 0100 	strd	r0, r1, [r4]
 80010fa:	b004      	add	sp, #16
 80010fc:	bdd0      	pop	{r4, r6, r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000000c 	.word	0x2000000c

08001104 <_close_r>:
 8001104:	b538      	push	{r3, r4, r5, lr}
 8001106:	4d06      	ldr	r5, [pc, #24]	@ (8001120 <_close_r+0x1c>)
 8001108:	2300      	movs	r3, #0
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	602b      	str	r3, [r5, #0]
 8001110:	f000 ff96 	bl	8002040 <_close>
 8001114:	1c43      	adds	r3, r0, #1
 8001116:	d102      	bne.n	800111e <_close_r+0x1a>
 8001118:	682b      	ldr	r3, [r5, #0]
 800111a:	b103      	cbz	r3, 800111e <_close_r+0x1a>
 800111c:	6023      	str	r3, [r4, #0]
 800111e:	bd38      	pop	{r3, r4, r5, pc}
 8001120:	200001bc 	.word	0x200001bc

08001124 <_gettimeofday_r>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4d07      	ldr	r5, [pc, #28]	@ (8001144 <_gettimeofday_r+0x20>)
 8001128:	2300      	movs	r3, #0
 800112a:	4604      	mov	r4, r0
 800112c:	4608      	mov	r0, r1
 800112e:	4611      	mov	r1, r2
 8001130:	602b      	str	r3, [r5, #0]
 8001132:	f000 ff9d 	bl	8002070 <_gettimeofday>
 8001136:	1c43      	adds	r3, r0, #1
 8001138:	d102      	bne.n	8001140 <_gettimeofday_r+0x1c>
 800113a:	682b      	ldr	r3, [r5, #0]
 800113c:	b103      	cbz	r3, 8001140 <_gettimeofday_r+0x1c>
 800113e:	6023      	str	r3, [r4, #0]
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop
 8001144:	200001bc 	.word	0x200001bc

08001148 <_lseek_r>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4d07      	ldr	r5, [pc, #28]	@ (8001168 <_lseek_r+0x20>)
 800114c:	4604      	mov	r4, r0
 800114e:	4608      	mov	r0, r1
 8001150:	4611      	mov	r1, r2
 8001152:	2200      	movs	r2, #0
 8001154:	602a      	str	r2, [r5, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	f000 ffa2 	bl	80020a0 <_lseek>
 800115c:	1c43      	adds	r3, r0, #1
 800115e:	d102      	bne.n	8001166 <_lseek_r+0x1e>
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	b103      	cbz	r3, 8001166 <_lseek_r+0x1e>
 8001164:	6023      	str	r3, [r4, #0]
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	200001bc 	.word	0x200001bc

0800116c <_read_r>:
 800116c:	b538      	push	{r3, r4, r5, lr}
 800116e:	4d07      	ldr	r5, [pc, #28]	@ (800118c <_read_r+0x20>)
 8001170:	4604      	mov	r4, r0
 8001172:	4608      	mov	r0, r1
 8001174:	4611      	mov	r1, r2
 8001176:	2200      	movs	r2, #0
 8001178:	602a      	str	r2, [r5, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	f000 ff98 	bl	80020b0 <_read>
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	d102      	bne.n	800118a <_read_r+0x1e>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	b103      	cbz	r3, 800118a <_read_r+0x1e>
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	bd38      	pop	{r3, r4, r5, pc}
 800118c:	200001bc 	.word	0x200001bc

08001190 <_sbrk_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	4d06      	ldr	r5, [pc, #24]	@ (80011ac <_sbrk_r+0x1c>)
 8001194:	2300      	movs	r3, #0
 8001196:	4604      	mov	r4, r0
 8001198:	4608      	mov	r0, r1
 800119a:	602b      	str	r3, [r5, #0]
 800119c:	f000 ff90 	bl	80020c0 <_sbrk>
 80011a0:	1c43      	adds	r3, r0, #1
 80011a2:	d102      	bne.n	80011aa <_sbrk_r+0x1a>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	b103      	cbz	r3, 80011aa <_sbrk_r+0x1a>
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	200001bc 	.word	0x200001bc

080011b0 <_write_r>:
 80011b0:	b538      	push	{r3, r4, r5, lr}
 80011b2:	4d07      	ldr	r5, [pc, #28]	@ (80011d0 <_write_r+0x20>)
 80011b4:	4604      	mov	r4, r0
 80011b6:	4608      	mov	r0, r1
 80011b8:	4611      	mov	r1, r2
 80011ba:	2200      	movs	r2, #0
 80011bc:	602a      	str	r2, [r5, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	f000 ff8c 	bl	80020dc <_write>
 80011c4:	1c43      	adds	r3, r0, #1
 80011c6:	d102      	bne.n	80011ce <_write_r+0x1e>
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	b103      	cbz	r3, 80011ce <_write_r+0x1e>
 80011cc:	6023      	str	r3, [r4, #0]
 80011ce:	bd38      	pop	{r3, r4, r5, pc}
 80011d0:	200001bc 	.word	0x200001bc

080011d4 <__libc_init_array>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	4d0d      	ldr	r5, [pc, #52]	@ (800120c <__libc_init_array+0x38>)
 80011d8:	4c0d      	ldr	r4, [pc, #52]	@ (8001210 <__libc_init_array+0x3c>)
 80011da:	1b64      	subs	r4, r4, r5
 80011dc:	10a4      	asrs	r4, r4, #2
 80011de:	2600      	movs	r6, #0
 80011e0:	42a6      	cmp	r6, r4
 80011e2:	d109      	bne.n	80011f8 <__libc_init_array+0x24>
 80011e4:	4d0b      	ldr	r5, [pc, #44]	@ (8001214 <__libc_init_array+0x40>)
 80011e6:	4c0c      	ldr	r4, [pc, #48]	@ (8001218 <__libc_init_array+0x44>)
 80011e8:	f000 ff82 	bl	80020f0 <_init>
 80011ec:	1b64      	subs	r4, r4, r5
 80011ee:	10a4      	asrs	r4, r4, #2
 80011f0:	2600      	movs	r6, #0
 80011f2:	42a6      	cmp	r6, r4
 80011f4:	d105      	bne.n	8001202 <__libc_init_array+0x2e>
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011fc:	4798      	blx	r3
 80011fe:	3601      	adds	r6, #1
 8001200:	e7ee      	b.n	80011e0 <__libc_init_array+0xc>
 8001202:	f855 3b04 	ldr.w	r3, [r5], #4
 8001206:	4798      	blx	r3
 8001208:	3601      	adds	r6, #1
 800120a:	e7f2      	b.n	80011f2 <__libc_init_array+0x1e>
 800120c:	080022c4 	.word	0x080022c4
 8001210:	080022c4 	.word	0x080022c4
 8001214:	080022c4 	.word	0x080022c4
 8001218:	080022c8 	.word	0x080022c8

0800121c <__retarget_lock_init_recursive>:
 800121c:	4770      	bx	lr

0800121e <__retarget_lock_acquire_recursive>:
 800121e:	4770      	bx	lr

08001220 <__retarget_lock_release_recursive>:
 8001220:	4770      	bx	lr
	...

08001224 <__assert_func>:
 8001224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001226:	4614      	mov	r4, r2
 8001228:	461a      	mov	r2, r3
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <__assert_func+0x2c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4605      	mov	r5, r0
 8001230:	68d8      	ldr	r0, [r3, #12]
 8001232:	b954      	cbnz	r4, 800124a <__assert_func+0x26>
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <__assert_func+0x30>)
 8001236:	461c      	mov	r4, r3
 8001238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800123c:	9100      	str	r1, [sp, #0]
 800123e:	462b      	mov	r3, r5
 8001240:	4905      	ldr	r1, [pc, #20]	@ (8001258 <__assert_func+0x34>)
 8001242:	f000 fbe9 	bl	8001a18 <fiprintf>
 8001246:	f000 fc21 	bl	8001a8c <abort>
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__assert_func+0x38>)
 800124c:	e7f4      	b.n	8001238 <__assert_func+0x14>
 800124e:	bf00      	nop
 8001250:	2000000c 	.word	0x2000000c
 8001254:	08002287 	.word	0x08002287
 8001258:	08002259 	.word	0x08002259
 800125c:	0800224c 	.word	0x0800224c

08001260 <_free_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4605      	mov	r5, r0
 8001264:	2900      	cmp	r1, #0
 8001266:	d041      	beq.n	80012ec <_free_r+0x8c>
 8001268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800126c:	1f0c      	subs	r4, r1, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	bfb8      	it	lt
 8001272:	18e4      	addlt	r4, r4, r3
 8001274:	f7ff fd84 	bl	8000d80 <__malloc_lock>
 8001278:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <_free_r+0x90>)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	b933      	cbnz	r3, 800128c <_free_r+0x2c>
 800127e:	6063      	str	r3, [r4, #4]
 8001280:	6014      	str	r4, [r2, #0]
 8001282:	4628      	mov	r0, r5
 8001284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001288:	f7ff bd80 	b.w	8000d8c <__malloc_unlock>
 800128c:	42a3      	cmp	r3, r4
 800128e:	d908      	bls.n	80012a2 <_free_r+0x42>
 8001290:	6820      	ldr	r0, [r4, #0]
 8001292:	1821      	adds	r1, r4, r0
 8001294:	428b      	cmp	r3, r1
 8001296:	bf01      	itttt	eq
 8001298:	6819      	ldreq	r1, [r3, #0]
 800129a:	685b      	ldreq	r3, [r3, #4]
 800129c:	1809      	addeq	r1, r1, r0
 800129e:	6021      	streq	r1, [r4, #0]
 80012a0:	e7ed      	b.n	800127e <_free_r+0x1e>
 80012a2:	461a      	mov	r2, r3
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	b10b      	cbz	r3, 80012ac <_free_r+0x4c>
 80012a8:	42a3      	cmp	r3, r4
 80012aa:	d9fa      	bls.n	80012a2 <_free_r+0x42>
 80012ac:	6811      	ldr	r1, [r2, #0]
 80012ae:	1850      	adds	r0, r2, r1
 80012b0:	42a0      	cmp	r0, r4
 80012b2:	d10b      	bne.n	80012cc <_free_r+0x6c>
 80012b4:	6820      	ldr	r0, [r4, #0]
 80012b6:	4401      	add	r1, r0
 80012b8:	1850      	adds	r0, r2, r1
 80012ba:	4283      	cmp	r3, r0
 80012bc:	6011      	str	r1, [r2, #0]
 80012be:	d1e0      	bne.n	8001282 <_free_r+0x22>
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	6053      	str	r3, [r2, #4]
 80012c6:	4408      	add	r0, r1
 80012c8:	6010      	str	r0, [r2, #0]
 80012ca:	e7da      	b.n	8001282 <_free_r+0x22>
 80012cc:	d902      	bls.n	80012d4 <_free_r+0x74>
 80012ce:	230c      	movs	r3, #12
 80012d0:	602b      	str	r3, [r5, #0]
 80012d2:	e7d6      	b.n	8001282 <_free_r+0x22>
 80012d4:	6820      	ldr	r0, [r4, #0]
 80012d6:	1821      	adds	r1, r4, r0
 80012d8:	428b      	cmp	r3, r1
 80012da:	bf04      	itt	eq
 80012dc:	6819      	ldreq	r1, [r3, #0]
 80012de:	685b      	ldreq	r3, [r3, #4]
 80012e0:	6063      	str	r3, [r4, #4]
 80012e2:	bf04      	itt	eq
 80012e4:	1809      	addeq	r1, r1, r0
 80012e6:	6021      	streq	r1, [r4, #0]
 80012e8:	6054      	str	r4, [r2, #4]
 80012ea:	e7ca      	b.n	8001282 <_free_r+0x22>
 80012ec:	bd38      	pop	{r3, r4, r5, pc}
 80012ee:	bf00      	nop
 80012f0:	2000007c 	.word	0x2000007c

080012f4 <__ssputs_r>:
 80012f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f8:	688e      	ldr	r6, [r1, #8]
 80012fa:	461f      	mov	r7, r3
 80012fc:	42be      	cmp	r6, r7
 80012fe:	680b      	ldr	r3, [r1, #0]
 8001300:	4682      	mov	sl, r0
 8001302:	460c      	mov	r4, r1
 8001304:	4690      	mov	r8, r2
 8001306:	d82d      	bhi.n	8001364 <__ssputs_r+0x70>
 8001308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800130c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001310:	d026      	beq.n	8001360 <__ssputs_r+0x6c>
 8001312:	6965      	ldr	r5, [r4, #20]
 8001314:	6909      	ldr	r1, [r1, #16]
 8001316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800131a:	eba3 0901 	sub.w	r9, r3, r1
 800131e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001322:	1c7b      	adds	r3, r7, #1
 8001324:	444b      	add	r3, r9
 8001326:	106d      	asrs	r5, r5, #1
 8001328:	429d      	cmp	r5, r3
 800132a:	bf38      	it	cc
 800132c:	461d      	movcc	r5, r3
 800132e:	0553      	lsls	r3, r2, #21
 8001330:	d527      	bpl.n	8001382 <__ssputs_r+0x8e>
 8001332:	4629      	mov	r1, r5
 8001334:	f7ff fca4 	bl	8000c80 <_malloc_r>
 8001338:	4606      	mov	r6, r0
 800133a:	b360      	cbz	r0, 8001396 <__ssputs_r+0xa2>
 800133c:	6921      	ldr	r1, [r4, #16]
 800133e:	464a      	mov	r2, r9
 8001340:	f000 fb96 	bl	8001a70 <memcpy>
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800134a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800134e:	81a3      	strh	r3, [r4, #12]
 8001350:	6126      	str	r6, [r4, #16]
 8001352:	6165      	str	r5, [r4, #20]
 8001354:	444e      	add	r6, r9
 8001356:	eba5 0509 	sub.w	r5, r5, r9
 800135a:	6026      	str	r6, [r4, #0]
 800135c:	60a5      	str	r5, [r4, #8]
 800135e:	463e      	mov	r6, r7
 8001360:	42be      	cmp	r6, r7
 8001362:	d900      	bls.n	8001366 <__ssputs_r+0x72>
 8001364:	463e      	mov	r6, r7
 8001366:	6820      	ldr	r0, [r4, #0]
 8001368:	4632      	mov	r2, r6
 800136a:	4641      	mov	r1, r8
 800136c:	f000 fb66 	bl	8001a3c <memmove>
 8001370:	68a3      	ldr	r3, [r4, #8]
 8001372:	1b9b      	subs	r3, r3, r6
 8001374:	60a3      	str	r3, [r4, #8]
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	4433      	add	r3, r6
 800137a:	6023      	str	r3, [r4, #0]
 800137c:	2000      	movs	r0, #0
 800137e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001382:	462a      	mov	r2, r5
 8001384:	f000 fb89 	bl	8001a9a <_realloc_r>
 8001388:	4606      	mov	r6, r0
 800138a:	2800      	cmp	r0, #0
 800138c:	d1e0      	bne.n	8001350 <__ssputs_r+0x5c>
 800138e:	6921      	ldr	r1, [r4, #16]
 8001390:	4650      	mov	r0, sl
 8001392:	f7ff ff65 	bl	8001260 <_free_r>
 8001396:	230c      	movs	r3, #12
 8001398:	f8ca 3000 	str.w	r3, [sl]
 800139c:	89a3      	ldrh	r3, [r4, #12]
 800139e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a2:	81a3      	strh	r3, [r4, #12]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	e7e9      	b.n	800137e <__ssputs_r+0x8a>
	...

080013ac <_svfiprintf_r>:
 80013ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b0:	4698      	mov	r8, r3
 80013b2:	898b      	ldrh	r3, [r1, #12]
 80013b4:	061b      	lsls	r3, r3, #24
 80013b6:	b09d      	sub	sp, #116	@ 0x74
 80013b8:	4607      	mov	r7, r0
 80013ba:	460d      	mov	r5, r1
 80013bc:	4614      	mov	r4, r2
 80013be:	d510      	bpl.n	80013e2 <_svfiprintf_r+0x36>
 80013c0:	690b      	ldr	r3, [r1, #16]
 80013c2:	b973      	cbnz	r3, 80013e2 <_svfiprintf_r+0x36>
 80013c4:	2140      	movs	r1, #64	@ 0x40
 80013c6:	f7ff fc5b 	bl	8000c80 <_malloc_r>
 80013ca:	6028      	str	r0, [r5, #0]
 80013cc:	6128      	str	r0, [r5, #16]
 80013ce:	b930      	cbnz	r0, 80013de <_svfiprintf_r+0x32>
 80013d0:	230c      	movs	r3, #12
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	b01d      	add	sp, #116	@ 0x74
 80013da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013de:	2340      	movs	r3, #64	@ 0x40
 80013e0:	616b      	str	r3, [r5, #20]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80013e6:	2320      	movs	r3, #32
 80013e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80013ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80013f0:	2330      	movs	r3, #48	@ 0x30
 80013f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001590 <_svfiprintf_r+0x1e4>
 80013f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80013fa:	f04f 0901 	mov.w	r9, #1
 80013fe:	4623      	mov	r3, r4
 8001400:	469a      	mov	sl, r3
 8001402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001406:	b10a      	cbz	r2, 800140c <_svfiprintf_r+0x60>
 8001408:	2a25      	cmp	r2, #37	@ 0x25
 800140a:	d1f9      	bne.n	8001400 <_svfiprintf_r+0x54>
 800140c:	ebba 0b04 	subs.w	fp, sl, r4
 8001410:	d00b      	beq.n	800142a <_svfiprintf_r+0x7e>
 8001412:	465b      	mov	r3, fp
 8001414:	4622      	mov	r2, r4
 8001416:	4629      	mov	r1, r5
 8001418:	4638      	mov	r0, r7
 800141a:	f7ff ff6b 	bl	80012f4 <__ssputs_r>
 800141e:	3001      	adds	r0, #1
 8001420:	f000 80a7 	beq.w	8001572 <_svfiprintf_r+0x1c6>
 8001424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001426:	445a      	add	r2, fp
 8001428:	9209      	str	r2, [sp, #36]	@ 0x24
 800142a:	f89a 3000 	ldrb.w	r3, [sl]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 809f 	beq.w	8001572 <_svfiprintf_r+0x1c6>
 8001434:	2300      	movs	r3, #0
 8001436:	f04f 32ff 	mov.w	r2, #4294967295
 800143a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800143e:	f10a 0a01 	add.w	sl, sl, #1
 8001442:	9304      	str	r3, [sp, #16]
 8001444:	9307      	str	r3, [sp, #28]
 8001446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800144a:	931a      	str	r3, [sp, #104]	@ 0x68
 800144c:	4654      	mov	r4, sl
 800144e:	2205      	movs	r2, #5
 8001450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001454:	484e      	ldr	r0, [pc, #312]	@ (8001590 <_svfiprintf_r+0x1e4>)
 8001456:	f7fe fec3 	bl	80001e0 <memchr>
 800145a:	9a04      	ldr	r2, [sp, #16]
 800145c:	b9d8      	cbnz	r0, 8001496 <_svfiprintf_r+0xea>
 800145e:	06d0      	lsls	r0, r2, #27
 8001460:	bf44      	itt	mi
 8001462:	2320      	movmi	r3, #32
 8001464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001468:	0711      	lsls	r1, r2, #28
 800146a:	bf44      	itt	mi
 800146c:	232b      	movmi	r3, #43	@ 0x2b
 800146e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001472:	f89a 3000 	ldrb.w	r3, [sl]
 8001476:	2b2a      	cmp	r3, #42	@ 0x2a
 8001478:	d015      	beq.n	80014a6 <_svfiprintf_r+0xfa>
 800147a:	9a07      	ldr	r2, [sp, #28]
 800147c:	4654      	mov	r4, sl
 800147e:	2000      	movs	r0, #0
 8001480:	f04f 0c0a 	mov.w	ip, #10
 8001484:	4621      	mov	r1, r4
 8001486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800148a:	3b30      	subs	r3, #48	@ 0x30
 800148c:	2b09      	cmp	r3, #9
 800148e:	d94b      	bls.n	8001528 <_svfiprintf_r+0x17c>
 8001490:	b1b0      	cbz	r0, 80014c0 <_svfiprintf_r+0x114>
 8001492:	9207      	str	r2, [sp, #28]
 8001494:	e014      	b.n	80014c0 <_svfiprintf_r+0x114>
 8001496:	eba0 0308 	sub.w	r3, r0, r8
 800149a:	fa09 f303 	lsl.w	r3, r9, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	9304      	str	r3, [sp, #16]
 80014a2:	46a2      	mov	sl, r4
 80014a4:	e7d2      	b.n	800144c <_svfiprintf_r+0xa0>
 80014a6:	9b03      	ldr	r3, [sp, #12]
 80014a8:	1d19      	adds	r1, r3, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	9103      	str	r1, [sp, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bfbb      	ittet	lt
 80014b2:	425b      	neglt	r3, r3
 80014b4:	f042 0202 	orrlt.w	r2, r2, #2
 80014b8:	9307      	strge	r3, [sp, #28]
 80014ba:	9307      	strlt	r3, [sp, #28]
 80014bc:	bfb8      	it	lt
 80014be:	9204      	strlt	r2, [sp, #16]
 80014c0:	7823      	ldrb	r3, [r4, #0]
 80014c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80014c4:	d10a      	bne.n	80014dc <_svfiprintf_r+0x130>
 80014c6:	7863      	ldrb	r3, [r4, #1]
 80014c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80014ca:	d132      	bne.n	8001532 <_svfiprintf_r+0x186>
 80014cc:	9b03      	ldr	r3, [sp, #12]
 80014ce:	1d1a      	adds	r2, r3, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	9203      	str	r2, [sp, #12]
 80014d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80014d8:	3402      	adds	r4, #2
 80014da:	9305      	str	r3, [sp, #20]
 80014dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80015a0 <_svfiprintf_r+0x1f4>
 80014e0:	7821      	ldrb	r1, [r4, #0]
 80014e2:	2203      	movs	r2, #3
 80014e4:	4650      	mov	r0, sl
 80014e6:	f7fe fe7b 	bl	80001e0 <memchr>
 80014ea:	b138      	cbz	r0, 80014fc <_svfiprintf_r+0x150>
 80014ec:	9b04      	ldr	r3, [sp, #16]
 80014ee:	eba0 000a 	sub.w	r0, r0, sl
 80014f2:	2240      	movs	r2, #64	@ 0x40
 80014f4:	4082      	lsls	r2, r0
 80014f6:	4313      	orrs	r3, r2
 80014f8:	3401      	adds	r4, #1
 80014fa:	9304      	str	r3, [sp, #16]
 80014fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001500:	4824      	ldr	r0, [pc, #144]	@ (8001594 <_svfiprintf_r+0x1e8>)
 8001502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001506:	2206      	movs	r2, #6
 8001508:	f7fe fe6a 	bl	80001e0 <memchr>
 800150c:	2800      	cmp	r0, #0
 800150e:	d036      	beq.n	800157e <_svfiprintf_r+0x1d2>
 8001510:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <_svfiprintf_r+0x1ec>)
 8001512:	bb1b      	cbnz	r3, 800155c <_svfiprintf_r+0x1b0>
 8001514:	9b03      	ldr	r3, [sp, #12]
 8001516:	3307      	adds	r3, #7
 8001518:	f023 0307 	bic.w	r3, r3, #7
 800151c:	3308      	adds	r3, #8
 800151e:	9303      	str	r3, [sp, #12]
 8001520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001522:	4433      	add	r3, r6
 8001524:	9309      	str	r3, [sp, #36]	@ 0x24
 8001526:	e76a      	b.n	80013fe <_svfiprintf_r+0x52>
 8001528:	fb0c 3202 	mla	r2, ip, r2, r3
 800152c:	460c      	mov	r4, r1
 800152e:	2001      	movs	r0, #1
 8001530:	e7a8      	b.n	8001484 <_svfiprintf_r+0xd8>
 8001532:	2300      	movs	r3, #0
 8001534:	3401      	adds	r4, #1
 8001536:	9305      	str	r3, [sp, #20]
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 0c0a 	mov.w	ip, #10
 800153e:	4620      	mov	r0, r4
 8001540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001544:	3a30      	subs	r2, #48	@ 0x30
 8001546:	2a09      	cmp	r2, #9
 8001548:	d903      	bls.n	8001552 <_svfiprintf_r+0x1a6>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0c6      	beq.n	80014dc <_svfiprintf_r+0x130>
 800154e:	9105      	str	r1, [sp, #20]
 8001550:	e7c4      	b.n	80014dc <_svfiprintf_r+0x130>
 8001552:	fb0c 2101 	mla	r1, ip, r1, r2
 8001556:	4604      	mov	r4, r0
 8001558:	2301      	movs	r3, #1
 800155a:	e7f0      	b.n	800153e <_svfiprintf_r+0x192>
 800155c:	ab03      	add	r3, sp, #12
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	462a      	mov	r2, r5
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <_svfiprintf_r+0x1f0>)
 8001564:	a904      	add	r1, sp, #16
 8001566:	4638      	mov	r0, r7
 8001568:	f3af 8000 	nop.w
 800156c:	1c42      	adds	r2, r0, #1
 800156e:	4606      	mov	r6, r0
 8001570:	d1d6      	bne.n	8001520 <_svfiprintf_r+0x174>
 8001572:	89ab      	ldrh	r3, [r5, #12]
 8001574:	065b      	lsls	r3, r3, #25
 8001576:	f53f af2d 	bmi.w	80013d4 <_svfiprintf_r+0x28>
 800157a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800157c:	e72c      	b.n	80013d8 <_svfiprintf_r+0x2c>
 800157e:	ab03      	add	r3, sp, #12
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	462a      	mov	r2, r5
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <_svfiprintf_r+0x1f0>)
 8001586:	a904      	add	r1, sp, #16
 8001588:	4638      	mov	r0, r7
 800158a:	f000 f879 	bl	8001680 <_printf_i>
 800158e:	e7ed      	b.n	800156c <_svfiprintf_r+0x1c0>
 8001590:	08002288 	.word	0x08002288
 8001594:	08002292 	.word	0x08002292
 8001598:	00000000 	.word	0x00000000
 800159c:	080012f5 	.word	0x080012f5
 80015a0:	0800228e 	.word	0x0800228e

080015a4 <_printf_common>:
 80015a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015a8:	4616      	mov	r6, r2
 80015aa:	4698      	mov	r8, r3
 80015ac:	688a      	ldr	r2, [r1, #8]
 80015ae:	690b      	ldr	r3, [r1, #16]
 80015b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80015b4:	4293      	cmp	r3, r2
 80015b6:	bfb8      	it	lt
 80015b8:	4613      	movlt	r3, r2
 80015ba:	6033      	str	r3, [r6, #0]
 80015bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80015c0:	4607      	mov	r7, r0
 80015c2:	460c      	mov	r4, r1
 80015c4:	b10a      	cbz	r2, 80015ca <_printf_common+0x26>
 80015c6:	3301      	adds	r3, #1
 80015c8:	6033      	str	r3, [r6, #0]
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	0699      	lsls	r1, r3, #26
 80015ce:	bf42      	ittt	mi
 80015d0:	6833      	ldrmi	r3, [r6, #0]
 80015d2:	3302      	addmi	r3, #2
 80015d4:	6033      	strmi	r3, [r6, #0]
 80015d6:	6825      	ldr	r5, [r4, #0]
 80015d8:	f015 0506 	ands.w	r5, r5, #6
 80015dc:	d106      	bne.n	80015ec <_printf_common+0x48>
 80015de:	f104 0a19 	add.w	sl, r4, #25
 80015e2:	68e3      	ldr	r3, [r4, #12]
 80015e4:	6832      	ldr	r2, [r6, #0]
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	42ab      	cmp	r3, r5
 80015ea:	dc26      	bgt.n	800163a <_printf_common+0x96>
 80015ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	3b00      	subs	r3, #0
 80015f4:	bf18      	it	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	0692      	lsls	r2, r2, #26
 80015fa:	d42b      	bmi.n	8001654 <_printf_common+0xb0>
 80015fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001600:	4641      	mov	r1, r8
 8001602:	4638      	mov	r0, r7
 8001604:	47c8      	blx	r9
 8001606:	3001      	adds	r0, #1
 8001608:	d01e      	beq.n	8001648 <_printf_common+0xa4>
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	6922      	ldr	r2, [r4, #16]
 800160e:	f003 0306 	and.w	r3, r3, #6
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf02      	ittt	eq
 8001616:	68e5      	ldreq	r5, [r4, #12]
 8001618:	6833      	ldreq	r3, [r6, #0]
 800161a:	1aed      	subeq	r5, r5, r3
 800161c:	68a3      	ldr	r3, [r4, #8]
 800161e:	bf0c      	ite	eq
 8001620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001624:	2500      	movne	r5, #0
 8001626:	4293      	cmp	r3, r2
 8001628:	bfc4      	itt	gt
 800162a:	1a9b      	subgt	r3, r3, r2
 800162c:	18ed      	addgt	r5, r5, r3
 800162e:	2600      	movs	r6, #0
 8001630:	341a      	adds	r4, #26
 8001632:	42b5      	cmp	r5, r6
 8001634:	d11a      	bne.n	800166c <_printf_common+0xc8>
 8001636:	2000      	movs	r0, #0
 8001638:	e008      	b.n	800164c <_printf_common+0xa8>
 800163a:	2301      	movs	r3, #1
 800163c:	4652      	mov	r2, sl
 800163e:	4641      	mov	r1, r8
 8001640:	4638      	mov	r0, r7
 8001642:	47c8      	blx	r9
 8001644:	3001      	adds	r0, #1
 8001646:	d103      	bne.n	8001650 <_printf_common+0xac>
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001650:	3501      	adds	r5, #1
 8001652:	e7c6      	b.n	80015e2 <_printf_common+0x3e>
 8001654:	18e1      	adds	r1, r4, r3
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	2030      	movs	r0, #48	@ 0x30
 800165a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800165e:	4422      	add	r2, r4
 8001660:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001668:	3302      	adds	r3, #2
 800166a:	e7c7      	b.n	80015fc <_printf_common+0x58>
 800166c:	2301      	movs	r3, #1
 800166e:	4622      	mov	r2, r4
 8001670:	4641      	mov	r1, r8
 8001672:	4638      	mov	r0, r7
 8001674:	47c8      	blx	r9
 8001676:	3001      	adds	r0, #1
 8001678:	d0e6      	beq.n	8001648 <_printf_common+0xa4>
 800167a:	3601      	adds	r6, #1
 800167c:	e7d9      	b.n	8001632 <_printf_common+0x8e>
	...

08001680 <_printf_i>:
 8001680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001684:	7e0f      	ldrb	r7, [r1, #24]
 8001686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001688:	2f78      	cmp	r7, #120	@ 0x78
 800168a:	4691      	mov	r9, r2
 800168c:	4680      	mov	r8, r0
 800168e:	460c      	mov	r4, r1
 8001690:	469a      	mov	sl, r3
 8001692:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001696:	d807      	bhi.n	80016a8 <_printf_i+0x28>
 8001698:	2f62      	cmp	r7, #98	@ 0x62
 800169a:	d80a      	bhi.n	80016b2 <_printf_i+0x32>
 800169c:	2f00      	cmp	r7, #0
 800169e:	f000 80d2 	beq.w	8001846 <_printf_i+0x1c6>
 80016a2:	2f58      	cmp	r7, #88	@ 0x58
 80016a4:	f000 80b9 	beq.w	800181a <_printf_i+0x19a>
 80016a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80016b0:	e03a      	b.n	8001728 <_printf_i+0xa8>
 80016b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80016b6:	2b15      	cmp	r3, #21
 80016b8:	d8f6      	bhi.n	80016a8 <_printf_i+0x28>
 80016ba:	a101      	add	r1, pc, #4	@ (adr r1, 80016c0 <_printf_i+0x40>)
 80016bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016c0:	08001719 	.word	0x08001719
 80016c4:	0800172d 	.word	0x0800172d
 80016c8:	080016a9 	.word	0x080016a9
 80016cc:	080016a9 	.word	0x080016a9
 80016d0:	080016a9 	.word	0x080016a9
 80016d4:	080016a9 	.word	0x080016a9
 80016d8:	0800172d 	.word	0x0800172d
 80016dc:	080016a9 	.word	0x080016a9
 80016e0:	080016a9 	.word	0x080016a9
 80016e4:	080016a9 	.word	0x080016a9
 80016e8:	080016a9 	.word	0x080016a9
 80016ec:	0800182d 	.word	0x0800182d
 80016f0:	08001757 	.word	0x08001757
 80016f4:	080017e7 	.word	0x080017e7
 80016f8:	080016a9 	.word	0x080016a9
 80016fc:	080016a9 	.word	0x080016a9
 8001700:	0800184f 	.word	0x0800184f
 8001704:	080016a9 	.word	0x080016a9
 8001708:	08001757 	.word	0x08001757
 800170c:	080016a9 	.word	0x080016a9
 8001710:	080016a9 	.word	0x080016a9
 8001714:	080017ef 	.word	0x080017ef
 8001718:	6833      	ldr	r3, [r6, #0]
 800171a:	1d1a      	adds	r2, r3, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6032      	str	r2, [r6, #0]
 8001720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001724:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001728:	2301      	movs	r3, #1
 800172a:	e09d      	b.n	8001868 <_printf_i+0x1e8>
 800172c:	6833      	ldr	r3, [r6, #0]
 800172e:	6820      	ldr	r0, [r4, #0]
 8001730:	1d19      	adds	r1, r3, #4
 8001732:	6031      	str	r1, [r6, #0]
 8001734:	0606      	lsls	r6, r0, #24
 8001736:	d501      	bpl.n	800173c <_printf_i+0xbc>
 8001738:	681d      	ldr	r5, [r3, #0]
 800173a:	e003      	b.n	8001744 <_printf_i+0xc4>
 800173c:	0645      	lsls	r5, r0, #25
 800173e:	d5fb      	bpl.n	8001738 <_printf_i+0xb8>
 8001740:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001744:	2d00      	cmp	r5, #0
 8001746:	da03      	bge.n	8001750 <_printf_i+0xd0>
 8001748:	232d      	movs	r3, #45	@ 0x2d
 800174a:	426d      	negs	r5, r5
 800174c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001750:	4859      	ldr	r0, [pc, #356]	@ (80018b8 <_printf_i+0x238>)
 8001752:	230a      	movs	r3, #10
 8001754:	e011      	b.n	800177a <_printf_i+0xfa>
 8001756:	6821      	ldr	r1, [r4, #0]
 8001758:	6833      	ldr	r3, [r6, #0]
 800175a:	0608      	lsls	r0, r1, #24
 800175c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001760:	d402      	bmi.n	8001768 <_printf_i+0xe8>
 8001762:	0649      	lsls	r1, r1, #25
 8001764:	bf48      	it	mi
 8001766:	b2ad      	uxthmi	r5, r5
 8001768:	2f6f      	cmp	r7, #111	@ 0x6f
 800176a:	4853      	ldr	r0, [pc, #332]	@ (80018b8 <_printf_i+0x238>)
 800176c:	6033      	str	r3, [r6, #0]
 800176e:	bf14      	ite	ne
 8001770:	230a      	movne	r3, #10
 8001772:	2308      	moveq	r3, #8
 8001774:	2100      	movs	r1, #0
 8001776:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800177a:	6866      	ldr	r6, [r4, #4]
 800177c:	60a6      	str	r6, [r4, #8]
 800177e:	2e00      	cmp	r6, #0
 8001780:	bfa2      	ittt	ge
 8001782:	6821      	ldrge	r1, [r4, #0]
 8001784:	f021 0104 	bicge.w	r1, r1, #4
 8001788:	6021      	strge	r1, [r4, #0]
 800178a:	b90d      	cbnz	r5, 8001790 <_printf_i+0x110>
 800178c:	2e00      	cmp	r6, #0
 800178e:	d04b      	beq.n	8001828 <_printf_i+0x1a8>
 8001790:	4616      	mov	r6, r2
 8001792:	fbb5 f1f3 	udiv	r1, r5, r3
 8001796:	fb03 5711 	mls	r7, r3, r1, r5
 800179a:	5dc7      	ldrb	r7, [r0, r7]
 800179c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80017a0:	462f      	mov	r7, r5
 80017a2:	42bb      	cmp	r3, r7
 80017a4:	460d      	mov	r5, r1
 80017a6:	d9f4      	bls.n	8001792 <_printf_i+0x112>
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d10b      	bne.n	80017c4 <_printf_i+0x144>
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	07df      	lsls	r7, r3, #31
 80017b0:	d508      	bpl.n	80017c4 <_printf_i+0x144>
 80017b2:	6923      	ldr	r3, [r4, #16]
 80017b4:	6861      	ldr	r1, [r4, #4]
 80017b6:	4299      	cmp	r1, r3
 80017b8:	bfde      	ittt	le
 80017ba:	2330      	movle	r3, #48	@ 0x30
 80017bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80017c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80017c4:	1b92      	subs	r2, r2, r6
 80017c6:	6122      	str	r2, [r4, #16]
 80017c8:	f8cd a000 	str.w	sl, [sp]
 80017cc:	464b      	mov	r3, r9
 80017ce:	aa03      	add	r2, sp, #12
 80017d0:	4621      	mov	r1, r4
 80017d2:	4640      	mov	r0, r8
 80017d4:	f7ff fee6 	bl	80015a4 <_printf_common>
 80017d8:	3001      	adds	r0, #1
 80017da:	d14a      	bne.n	8001872 <_printf_i+0x1f2>
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	b004      	add	sp, #16
 80017e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	f043 0320 	orr.w	r3, r3, #32
 80017ec:	6023      	str	r3, [r4, #0]
 80017ee:	4833      	ldr	r0, [pc, #204]	@ (80018bc <_printf_i+0x23c>)
 80017f0:	2778      	movs	r7, #120	@ 0x78
 80017f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	6831      	ldr	r1, [r6, #0]
 80017fa:	061f      	lsls	r7, r3, #24
 80017fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8001800:	d402      	bmi.n	8001808 <_printf_i+0x188>
 8001802:	065f      	lsls	r7, r3, #25
 8001804:	bf48      	it	mi
 8001806:	b2ad      	uxthmi	r5, r5
 8001808:	6031      	str	r1, [r6, #0]
 800180a:	07d9      	lsls	r1, r3, #31
 800180c:	bf44      	itt	mi
 800180e:	f043 0320 	orrmi.w	r3, r3, #32
 8001812:	6023      	strmi	r3, [r4, #0]
 8001814:	b11d      	cbz	r5, 800181e <_printf_i+0x19e>
 8001816:	2310      	movs	r3, #16
 8001818:	e7ac      	b.n	8001774 <_printf_i+0xf4>
 800181a:	4827      	ldr	r0, [pc, #156]	@ (80018b8 <_printf_i+0x238>)
 800181c:	e7e9      	b.n	80017f2 <_printf_i+0x172>
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	f023 0320 	bic.w	r3, r3, #32
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	e7f6      	b.n	8001816 <_printf_i+0x196>
 8001828:	4616      	mov	r6, r2
 800182a:	e7bd      	b.n	80017a8 <_printf_i+0x128>
 800182c:	6833      	ldr	r3, [r6, #0]
 800182e:	6825      	ldr	r5, [r4, #0]
 8001830:	6961      	ldr	r1, [r4, #20]
 8001832:	1d18      	adds	r0, r3, #4
 8001834:	6030      	str	r0, [r6, #0]
 8001836:	062e      	lsls	r6, r5, #24
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	d501      	bpl.n	8001840 <_printf_i+0x1c0>
 800183c:	6019      	str	r1, [r3, #0]
 800183e:	e002      	b.n	8001846 <_printf_i+0x1c6>
 8001840:	0668      	lsls	r0, r5, #25
 8001842:	d5fb      	bpl.n	800183c <_printf_i+0x1bc>
 8001844:	8019      	strh	r1, [r3, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	6123      	str	r3, [r4, #16]
 800184a:	4616      	mov	r6, r2
 800184c:	e7bc      	b.n	80017c8 <_printf_i+0x148>
 800184e:	6833      	ldr	r3, [r6, #0]
 8001850:	1d1a      	adds	r2, r3, #4
 8001852:	6032      	str	r2, [r6, #0]
 8001854:	681e      	ldr	r6, [r3, #0]
 8001856:	6862      	ldr	r2, [r4, #4]
 8001858:	2100      	movs	r1, #0
 800185a:	4630      	mov	r0, r6
 800185c:	f7fe fcc0 	bl	80001e0 <memchr>
 8001860:	b108      	cbz	r0, 8001866 <_printf_i+0x1e6>
 8001862:	1b80      	subs	r0, r0, r6
 8001864:	6060      	str	r0, [r4, #4]
 8001866:	6863      	ldr	r3, [r4, #4]
 8001868:	6123      	str	r3, [r4, #16]
 800186a:	2300      	movs	r3, #0
 800186c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001870:	e7aa      	b.n	80017c8 <_printf_i+0x148>
 8001872:	6923      	ldr	r3, [r4, #16]
 8001874:	4632      	mov	r2, r6
 8001876:	4649      	mov	r1, r9
 8001878:	4640      	mov	r0, r8
 800187a:	47d0      	blx	sl
 800187c:	3001      	adds	r0, #1
 800187e:	d0ad      	beq.n	80017dc <_printf_i+0x15c>
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	079b      	lsls	r3, r3, #30
 8001884:	d413      	bmi.n	80018ae <_printf_i+0x22e>
 8001886:	68e0      	ldr	r0, [r4, #12]
 8001888:	9b03      	ldr	r3, [sp, #12]
 800188a:	4298      	cmp	r0, r3
 800188c:	bfb8      	it	lt
 800188e:	4618      	movlt	r0, r3
 8001890:	e7a6      	b.n	80017e0 <_printf_i+0x160>
 8001892:	2301      	movs	r3, #1
 8001894:	4632      	mov	r2, r6
 8001896:	4649      	mov	r1, r9
 8001898:	4640      	mov	r0, r8
 800189a:	47d0      	blx	sl
 800189c:	3001      	adds	r0, #1
 800189e:	d09d      	beq.n	80017dc <_printf_i+0x15c>
 80018a0:	3501      	adds	r5, #1
 80018a2:	68e3      	ldr	r3, [r4, #12]
 80018a4:	9903      	ldr	r1, [sp, #12]
 80018a6:	1a5b      	subs	r3, r3, r1
 80018a8:	42ab      	cmp	r3, r5
 80018aa:	dcf2      	bgt.n	8001892 <_printf_i+0x212>
 80018ac:	e7eb      	b.n	8001886 <_printf_i+0x206>
 80018ae:	2500      	movs	r5, #0
 80018b0:	f104 0619 	add.w	r6, r4, #25
 80018b4:	e7f5      	b.n	80018a2 <_printf_i+0x222>
 80018b6:	bf00      	nop
 80018b8:	08002299 	.word	0x08002299
 80018bc:	080022aa 	.word	0x080022aa

080018c0 <__sflush_r>:
 80018c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018c8:	0716      	lsls	r6, r2, #28
 80018ca:	4605      	mov	r5, r0
 80018cc:	460c      	mov	r4, r1
 80018ce:	d454      	bmi.n	800197a <__sflush_r+0xba>
 80018d0:	684b      	ldr	r3, [r1, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	dc02      	bgt.n	80018dc <__sflush_r+0x1c>
 80018d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dd48      	ble.n	800196e <__sflush_r+0xae>
 80018dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018de:	2e00      	cmp	r6, #0
 80018e0:	d045      	beq.n	800196e <__sflush_r+0xae>
 80018e2:	2300      	movs	r3, #0
 80018e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80018e8:	682f      	ldr	r7, [r5, #0]
 80018ea:	6a21      	ldr	r1, [r4, #32]
 80018ec:	602b      	str	r3, [r5, #0]
 80018ee:	d030      	beq.n	8001952 <__sflush_r+0x92>
 80018f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80018f2:	89a3      	ldrh	r3, [r4, #12]
 80018f4:	0759      	lsls	r1, r3, #29
 80018f6:	d505      	bpl.n	8001904 <__sflush_r+0x44>
 80018f8:	6863      	ldr	r3, [r4, #4]
 80018fa:	1ad2      	subs	r2, r2, r3
 80018fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80018fe:	b10b      	cbz	r3, 8001904 <__sflush_r+0x44>
 8001900:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001902:	1ad2      	subs	r2, r2, r3
 8001904:	2300      	movs	r3, #0
 8001906:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001908:	6a21      	ldr	r1, [r4, #32]
 800190a:	4628      	mov	r0, r5
 800190c:	47b0      	blx	r6
 800190e:	1c43      	adds	r3, r0, #1
 8001910:	89a3      	ldrh	r3, [r4, #12]
 8001912:	d106      	bne.n	8001922 <__sflush_r+0x62>
 8001914:	6829      	ldr	r1, [r5, #0]
 8001916:	291d      	cmp	r1, #29
 8001918:	d82b      	bhi.n	8001972 <__sflush_r+0xb2>
 800191a:	4a2a      	ldr	r2, [pc, #168]	@ (80019c4 <__sflush_r+0x104>)
 800191c:	410a      	asrs	r2, r1
 800191e:	07d6      	lsls	r6, r2, #31
 8001920:	d427      	bmi.n	8001972 <__sflush_r+0xb2>
 8001922:	2200      	movs	r2, #0
 8001924:	6062      	str	r2, [r4, #4]
 8001926:	04d9      	lsls	r1, r3, #19
 8001928:	6922      	ldr	r2, [r4, #16]
 800192a:	6022      	str	r2, [r4, #0]
 800192c:	d504      	bpl.n	8001938 <__sflush_r+0x78>
 800192e:	1c42      	adds	r2, r0, #1
 8001930:	d101      	bne.n	8001936 <__sflush_r+0x76>
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	b903      	cbnz	r3, 8001938 <__sflush_r+0x78>
 8001936:	6560      	str	r0, [r4, #84]	@ 0x54
 8001938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800193a:	602f      	str	r7, [r5, #0]
 800193c:	b1b9      	cbz	r1, 800196e <__sflush_r+0xae>
 800193e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001942:	4299      	cmp	r1, r3
 8001944:	d002      	beq.n	800194c <__sflush_r+0x8c>
 8001946:	4628      	mov	r0, r5
 8001948:	f7ff fc8a 	bl	8001260 <_free_r>
 800194c:	2300      	movs	r3, #0
 800194e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001950:	e00d      	b.n	800196e <__sflush_r+0xae>
 8001952:	2301      	movs	r3, #1
 8001954:	4628      	mov	r0, r5
 8001956:	47b0      	blx	r6
 8001958:	4602      	mov	r2, r0
 800195a:	1c50      	adds	r0, r2, #1
 800195c:	d1c9      	bne.n	80018f2 <__sflush_r+0x32>
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0c6      	beq.n	80018f2 <__sflush_r+0x32>
 8001964:	2b1d      	cmp	r3, #29
 8001966:	d001      	beq.n	800196c <__sflush_r+0xac>
 8001968:	2b16      	cmp	r3, #22
 800196a:	d11e      	bne.n	80019aa <__sflush_r+0xea>
 800196c:	602f      	str	r7, [r5, #0]
 800196e:	2000      	movs	r0, #0
 8001970:	e022      	b.n	80019b8 <__sflush_r+0xf8>
 8001972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001976:	b21b      	sxth	r3, r3
 8001978:	e01b      	b.n	80019b2 <__sflush_r+0xf2>
 800197a:	690f      	ldr	r7, [r1, #16]
 800197c:	2f00      	cmp	r7, #0
 800197e:	d0f6      	beq.n	800196e <__sflush_r+0xae>
 8001980:	0793      	lsls	r3, r2, #30
 8001982:	680e      	ldr	r6, [r1, #0]
 8001984:	bf08      	it	eq
 8001986:	694b      	ldreq	r3, [r1, #20]
 8001988:	600f      	str	r7, [r1, #0]
 800198a:	bf18      	it	ne
 800198c:	2300      	movne	r3, #0
 800198e:	eba6 0807 	sub.w	r8, r6, r7
 8001992:	608b      	str	r3, [r1, #8]
 8001994:	f1b8 0f00 	cmp.w	r8, #0
 8001998:	dde9      	ble.n	800196e <__sflush_r+0xae>
 800199a:	6a21      	ldr	r1, [r4, #32]
 800199c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800199e:	4643      	mov	r3, r8
 80019a0:	463a      	mov	r2, r7
 80019a2:	4628      	mov	r0, r5
 80019a4:	47b0      	blx	r6
 80019a6:	2800      	cmp	r0, #0
 80019a8:	dc08      	bgt.n	80019bc <__sflush_r+0xfc>
 80019aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019b2:	81a3      	strh	r3, [r4, #12]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019bc:	4407      	add	r7, r0
 80019be:	eba8 0800 	sub.w	r8, r8, r0
 80019c2:	e7e7      	b.n	8001994 <__sflush_r+0xd4>
 80019c4:	dfbffffe 	.word	0xdfbffffe

080019c8 <_fflush_r>:
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	690b      	ldr	r3, [r1, #16]
 80019cc:	4605      	mov	r5, r0
 80019ce:	460c      	mov	r4, r1
 80019d0:	b913      	cbnz	r3, 80019d8 <_fflush_r+0x10>
 80019d2:	2500      	movs	r5, #0
 80019d4:	4628      	mov	r0, r5
 80019d6:	bd38      	pop	{r3, r4, r5, pc}
 80019d8:	b118      	cbz	r0, 80019e2 <_fflush_r+0x1a>
 80019da:	6a03      	ldr	r3, [r0, #32]
 80019dc:	b90b      	cbnz	r3, 80019e2 <_fflush_r+0x1a>
 80019de:	f7ff fad3 	bl	8000f88 <__sinit>
 80019e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f3      	beq.n	80019d2 <_fflush_r+0xa>
 80019ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80019ec:	07d0      	lsls	r0, r2, #31
 80019ee:	d404      	bmi.n	80019fa <_fflush_r+0x32>
 80019f0:	0599      	lsls	r1, r3, #22
 80019f2:	d402      	bmi.n	80019fa <_fflush_r+0x32>
 80019f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019f6:	f7ff fc12 	bl	800121e <__retarget_lock_acquire_recursive>
 80019fa:	4628      	mov	r0, r5
 80019fc:	4621      	mov	r1, r4
 80019fe:	f7ff ff5f 	bl	80018c0 <__sflush_r>
 8001a02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a04:	07da      	lsls	r2, r3, #31
 8001a06:	4605      	mov	r5, r0
 8001a08:	d4e4      	bmi.n	80019d4 <_fflush_r+0xc>
 8001a0a:	89a3      	ldrh	r3, [r4, #12]
 8001a0c:	059b      	lsls	r3, r3, #22
 8001a0e:	d4e1      	bmi.n	80019d4 <_fflush_r+0xc>
 8001a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a12:	f7ff fc05 	bl	8001220 <__retarget_lock_release_recursive>
 8001a16:	e7dd      	b.n	80019d4 <_fflush_r+0xc>

08001a18 <fiprintf>:
 8001a18:	b40e      	push	{r1, r2, r3}
 8001a1a:	b503      	push	{r0, r1, lr}
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	ab03      	add	r3, sp, #12
 8001a20:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <fiprintf+0x20>)
 8001a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a26:	6800      	ldr	r0, [r0, #0]
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	f000 f88d 	bl	8001b48 <_vfiprintf_r>
 8001a2e:	b002      	add	sp, #8
 8001a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a34:	b003      	add	sp, #12
 8001a36:	4770      	bx	lr
 8001a38:	2000000c 	.word	0x2000000c

08001a3c <memmove>:
 8001a3c:	4288      	cmp	r0, r1
 8001a3e:	b510      	push	{r4, lr}
 8001a40:	eb01 0402 	add.w	r4, r1, r2
 8001a44:	d902      	bls.n	8001a4c <memmove+0x10>
 8001a46:	4284      	cmp	r4, r0
 8001a48:	4623      	mov	r3, r4
 8001a4a:	d807      	bhi.n	8001a5c <memmove+0x20>
 8001a4c:	1e43      	subs	r3, r0, #1
 8001a4e:	42a1      	cmp	r1, r4
 8001a50:	d008      	beq.n	8001a64 <memmove+0x28>
 8001a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a5a:	e7f8      	b.n	8001a4e <memmove+0x12>
 8001a5c:	4402      	add	r2, r0
 8001a5e:	4601      	mov	r1, r0
 8001a60:	428a      	cmp	r2, r1
 8001a62:	d100      	bne.n	8001a66 <memmove+0x2a>
 8001a64:	bd10      	pop	{r4, pc}
 8001a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001a6e:	e7f7      	b.n	8001a60 <memmove+0x24>

08001a70 <memcpy>:
 8001a70:	440a      	add	r2, r1
 8001a72:	4291      	cmp	r1, r2
 8001a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8001a78:	d100      	bne.n	8001a7c <memcpy+0xc>
 8001a7a:	4770      	bx	lr
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a86:	4291      	cmp	r1, r2
 8001a88:	d1f9      	bne.n	8001a7e <memcpy+0xe>
 8001a8a:	bd10      	pop	{r4, pc}

08001a8c <abort>:
 8001a8c:	b508      	push	{r3, lr}
 8001a8e:	2006      	movs	r0, #6
 8001a90:	f000 fa2e 	bl	8001ef0 <raise>
 8001a94:	2001      	movs	r0, #1
 8001a96:	f000 fb29 	bl	80020ec <_exit>

08001a9a <_realloc_r>:
 8001a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9e:	4680      	mov	r8, r0
 8001aa0:	4615      	mov	r5, r2
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	b921      	cbnz	r1, 8001ab0 <_realloc_r+0x16>
 8001aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001aaa:	4611      	mov	r1, r2
 8001aac:	f7ff b8e8 	b.w	8000c80 <_malloc_r>
 8001ab0:	b92a      	cbnz	r2, 8001abe <_realloc_r+0x24>
 8001ab2:	f7ff fbd5 	bl	8001260 <_free_r>
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	4620      	mov	r0, r4
 8001aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001abe:	f000 fa33 	bl	8001f28 <_malloc_usable_size_r>
 8001ac2:	4285      	cmp	r5, r0
 8001ac4:	4606      	mov	r6, r0
 8001ac6:	d802      	bhi.n	8001ace <_realloc_r+0x34>
 8001ac8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001acc:	d8f4      	bhi.n	8001ab8 <_realloc_r+0x1e>
 8001ace:	4629      	mov	r1, r5
 8001ad0:	4640      	mov	r0, r8
 8001ad2:	f7ff f8d5 	bl	8000c80 <_malloc_r>
 8001ad6:	4607      	mov	r7, r0
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d0ec      	beq.n	8001ab6 <_realloc_r+0x1c>
 8001adc:	42b5      	cmp	r5, r6
 8001ade:	462a      	mov	r2, r5
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	bf28      	it	cs
 8001ae4:	4632      	movcs	r2, r6
 8001ae6:	f7ff ffc3 	bl	8001a70 <memcpy>
 8001aea:	4621      	mov	r1, r4
 8001aec:	4640      	mov	r0, r8
 8001aee:	f7ff fbb7 	bl	8001260 <_free_r>
 8001af2:	463c      	mov	r4, r7
 8001af4:	e7e0      	b.n	8001ab8 <_realloc_r+0x1e>

08001af6 <__sfputc_r>:
 8001af6:	6893      	ldr	r3, [r2, #8]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	b410      	push	{r4}
 8001afe:	6093      	str	r3, [r2, #8]
 8001b00:	da08      	bge.n	8001b14 <__sfputc_r+0x1e>
 8001b02:	6994      	ldr	r4, [r2, #24]
 8001b04:	42a3      	cmp	r3, r4
 8001b06:	db01      	blt.n	8001b0c <__sfputc_r+0x16>
 8001b08:	290a      	cmp	r1, #10
 8001b0a:	d103      	bne.n	8001b14 <__sfputc_r+0x1e>
 8001b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b10:	f000 b932 	b.w	8001d78 <__swbuf_r>
 8001b14:	6813      	ldr	r3, [r2, #0]
 8001b16:	1c58      	adds	r0, r3, #1
 8001b18:	6010      	str	r0, [r2, #0]
 8001b1a:	7019      	strb	r1, [r3, #0]
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <__sfputs_r>:
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b26:	4606      	mov	r6, r0
 8001b28:	460f      	mov	r7, r1
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	18d5      	adds	r5, r2, r3
 8001b2e:	42ac      	cmp	r4, r5
 8001b30:	d101      	bne.n	8001b36 <__sfputs_r+0x12>
 8001b32:	2000      	movs	r0, #0
 8001b34:	e007      	b.n	8001b46 <__sfputs_r+0x22>
 8001b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b3a:	463a      	mov	r2, r7
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	f7ff ffda 	bl	8001af6 <__sfputc_r>
 8001b42:	1c43      	adds	r3, r0, #1
 8001b44:	d1f3      	bne.n	8001b2e <__sfputs_r+0xa>
 8001b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b48 <_vfiprintf_r>:
 8001b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	b09d      	sub	sp, #116	@ 0x74
 8001b50:	4614      	mov	r4, r2
 8001b52:	4698      	mov	r8, r3
 8001b54:	4606      	mov	r6, r0
 8001b56:	b118      	cbz	r0, 8001b60 <_vfiprintf_r+0x18>
 8001b58:	6a03      	ldr	r3, [r0, #32]
 8001b5a:	b90b      	cbnz	r3, 8001b60 <_vfiprintf_r+0x18>
 8001b5c:	f7ff fa14 	bl	8000f88 <__sinit>
 8001b60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b62:	07d9      	lsls	r1, r3, #31
 8001b64:	d405      	bmi.n	8001b72 <_vfiprintf_r+0x2a>
 8001b66:	89ab      	ldrh	r3, [r5, #12]
 8001b68:	059a      	lsls	r2, r3, #22
 8001b6a:	d402      	bmi.n	8001b72 <_vfiprintf_r+0x2a>
 8001b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b6e:	f7ff fb56 	bl	800121e <__retarget_lock_acquire_recursive>
 8001b72:	89ab      	ldrh	r3, [r5, #12]
 8001b74:	071b      	lsls	r3, r3, #28
 8001b76:	d501      	bpl.n	8001b7c <_vfiprintf_r+0x34>
 8001b78:	692b      	ldr	r3, [r5, #16]
 8001b7a:	b99b      	cbnz	r3, 8001ba4 <_vfiprintf_r+0x5c>
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f000 f938 	bl	8001df4 <__swsetup_r>
 8001b84:	b170      	cbz	r0, 8001ba4 <_vfiprintf_r+0x5c>
 8001b86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b88:	07dc      	lsls	r4, r3, #31
 8001b8a:	d504      	bpl.n	8001b96 <_vfiprintf_r+0x4e>
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	b01d      	add	sp, #116	@ 0x74
 8001b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b96:	89ab      	ldrh	r3, [r5, #12]
 8001b98:	0598      	lsls	r0, r3, #22
 8001b9a:	d4f7      	bmi.n	8001b8c <_vfiprintf_r+0x44>
 8001b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b9e:	f7ff fb3f 	bl	8001220 <__retarget_lock_release_recursive>
 8001ba2:	e7f3      	b.n	8001b8c <_vfiprintf_r+0x44>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ba8:	2320      	movs	r3, #32
 8001baa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bb2:	2330      	movs	r3, #48	@ 0x30
 8001bb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001d64 <_vfiprintf_r+0x21c>
 8001bb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001bbc:	f04f 0901 	mov.w	r9, #1
 8001bc0:	4623      	mov	r3, r4
 8001bc2:	469a      	mov	sl, r3
 8001bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bc8:	b10a      	cbz	r2, 8001bce <_vfiprintf_r+0x86>
 8001bca:	2a25      	cmp	r2, #37	@ 0x25
 8001bcc:	d1f9      	bne.n	8001bc2 <_vfiprintf_r+0x7a>
 8001bce:	ebba 0b04 	subs.w	fp, sl, r4
 8001bd2:	d00b      	beq.n	8001bec <_vfiprintf_r+0xa4>
 8001bd4:	465b      	mov	r3, fp
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	4629      	mov	r1, r5
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f7ff ffa2 	bl	8001b24 <__sfputs_r>
 8001be0:	3001      	adds	r0, #1
 8001be2:	f000 80a7 	beq.w	8001d34 <_vfiprintf_r+0x1ec>
 8001be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001be8:	445a      	add	r2, fp
 8001bea:	9209      	str	r2, [sp, #36]	@ 0x24
 8001bec:	f89a 3000 	ldrb.w	r3, [sl]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 809f 	beq.w	8001d34 <_vfiprintf_r+0x1ec>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c00:	f10a 0a01 	add.w	sl, sl, #1
 8001c04:	9304      	str	r3, [sp, #16]
 8001c06:	9307      	str	r3, [sp, #28]
 8001c08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c0e:	4654      	mov	r4, sl
 8001c10:	2205      	movs	r2, #5
 8001c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c16:	4853      	ldr	r0, [pc, #332]	@ (8001d64 <_vfiprintf_r+0x21c>)
 8001c18:	f7fe fae2 	bl	80001e0 <memchr>
 8001c1c:	9a04      	ldr	r2, [sp, #16]
 8001c1e:	b9d8      	cbnz	r0, 8001c58 <_vfiprintf_r+0x110>
 8001c20:	06d1      	lsls	r1, r2, #27
 8001c22:	bf44      	itt	mi
 8001c24:	2320      	movmi	r3, #32
 8001c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c2a:	0713      	lsls	r3, r2, #28
 8001c2c:	bf44      	itt	mi
 8001c2e:	232b      	movmi	r3, #43	@ 0x2b
 8001c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c34:	f89a 3000 	ldrb.w	r3, [sl]
 8001c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c3a:	d015      	beq.n	8001c68 <_vfiprintf_r+0x120>
 8001c3c:	9a07      	ldr	r2, [sp, #28]
 8001c3e:	4654      	mov	r4, sl
 8001c40:	2000      	movs	r0, #0
 8001c42:	f04f 0c0a 	mov.w	ip, #10
 8001c46:	4621      	mov	r1, r4
 8001c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c4c:	3b30      	subs	r3, #48	@ 0x30
 8001c4e:	2b09      	cmp	r3, #9
 8001c50:	d94b      	bls.n	8001cea <_vfiprintf_r+0x1a2>
 8001c52:	b1b0      	cbz	r0, 8001c82 <_vfiprintf_r+0x13a>
 8001c54:	9207      	str	r2, [sp, #28]
 8001c56:	e014      	b.n	8001c82 <_vfiprintf_r+0x13a>
 8001c58:	eba0 0308 	sub.w	r3, r0, r8
 8001c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	9304      	str	r3, [sp, #16]
 8001c64:	46a2      	mov	sl, r4
 8001c66:	e7d2      	b.n	8001c0e <_vfiprintf_r+0xc6>
 8001c68:	9b03      	ldr	r3, [sp, #12]
 8001c6a:	1d19      	adds	r1, r3, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	9103      	str	r1, [sp, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bfbb      	ittet	lt
 8001c74:	425b      	neglt	r3, r3
 8001c76:	f042 0202 	orrlt.w	r2, r2, #2
 8001c7a:	9307      	strge	r3, [sp, #28]
 8001c7c:	9307      	strlt	r3, [sp, #28]
 8001c7e:	bfb8      	it	lt
 8001c80:	9204      	strlt	r2, [sp, #16]
 8001c82:	7823      	ldrb	r3, [r4, #0]
 8001c84:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c86:	d10a      	bne.n	8001c9e <_vfiprintf_r+0x156>
 8001c88:	7863      	ldrb	r3, [r4, #1]
 8001c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c8c:	d132      	bne.n	8001cf4 <_vfiprintf_r+0x1ac>
 8001c8e:	9b03      	ldr	r3, [sp, #12]
 8001c90:	1d1a      	adds	r2, r3, #4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	9203      	str	r2, [sp, #12]
 8001c96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001c9a:	3402      	adds	r4, #2
 8001c9c:	9305      	str	r3, [sp, #20]
 8001c9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001d74 <_vfiprintf_r+0x22c>
 8001ca2:	7821      	ldrb	r1, [r4, #0]
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	4650      	mov	r0, sl
 8001ca8:	f7fe fa9a 	bl	80001e0 <memchr>
 8001cac:	b138      	cbz	r0, 8001cbe <_vfiprintf_r+0x176>
 8001cae:	9b04      	ldr	r3, [sp, #16]
 8001cb0:	eba0 000a 	sub.w	r0, r0, sl
 8001cb4:	2240      	movs	r2, #64	@ 0x40
 8001cb6:	4082      	lsls	r2, r0
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	3401      	adds	r4, #1
 8001cbc:	9304      	str	r3, [sp, #16]
 8001cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cc2:	4829      	ldr	r0, [pc, #164]	@ (8001d68 <_vfiprintf_r+0x220>)
 8001cc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001cc8:	2206      	movs	r2, #6
 8001cca:	f7fe fa89 	bl	80001e0 <memchr>
 8001cce:	2800      	cmp	r0, #0
 8001cd0:	d03f      	beq.n	8001d52 <_vfiprintf_r+0x20a>
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <_vfiprintf_r+0x224>)
 8001cd4:	bb1b      	cbnz	r3, 8001d1e <_vfiprintf_r+0x1d6>
 8001cd6:	9b03      	ldr	r3, [sp, #12]
 8001cd8:	3307      	adds	r3, #7
 8001cda:	f023 0307 	bic.w	r3, r3, #7
 8001cde:	3308      	adds	r3, #8
 8001ce0:	9303      	str	r3, [sp, #12]
 8001ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ce4:	443b      	add	r3, r7
 8001ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ce8:	e76a      	b.n	8001bc0 <_vfiprintf_r+0x78>
 8001cea:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cee:	460c      	mov	r4, r1
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	e7a8      	b.n	8001c46 <_vfiprintf_r+0xfe>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	3401      	adds	r4, #1
 8001cf8:	9305      	str	r3, [sp, #20]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 0c0a 	mov.w	ip, #10
 8001d00:	4620      	mov	r0, r4
 8001d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d06:	3a30      	subs	r2, #48	@ 0x30
 8001d08:	2a09      	cmp	r2, #9
 8001d0a:	d903      	bls.n	8001d14 <_vfiprintf_r+0x1cc>
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0c6      	beq.n	8001c9e <_vfiprintf_r+0x156>
 8001d10:	9105      	str	r1, [sp, #20]
 8001d12:	e7c4      	b.n	8001c9e <_vfiprintf_r+0x156>
 8001d14:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d18:	4604      	mov	r4, r0
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e7f0      	b.n	8001d00 <_vfiprintf_r+0x1b8>
 8001d1e:	ab03      	add	r3, sp, #12
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	462a      	mov	r2, r5
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <_vfiprintf_r+0x228>)
 8001d26:	a904      	add	r1, sp, #16
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f3af 8000 	nop.w
 8001d2e:	4607      	mov	r7, r0
 8001d30:	1c78      	adds	r0, r7, #1
 8001d32:	d1d6      	bne.n	8001ce2 <_vfiprintf_r+0x19a>
 8001d34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d36:	07d9      	lsls	r1, r3, #31
 8001d38:	d405      	bmi.n	8001d46 <_vfiprintf_r+0x1fe>
 8001d3a:	89ab      	ldrh	r3, [r5, #12]
 8001d3c:	059a      	lsls	r2, r3, #22
 8001d3e:	d402      	bmi.n	8001d46 <_vfiprintf_r+0x1fe>
 8001d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d42:	f7ff fa6d 	bl	8001220 <__retarget_lock_release_recursive>
 8001d46:	89ab      	ldrh	r3, [r5, #12]
 8001d48:	065b      	lsls	r3, r3, #25
 8001d4a:	f53f af1f 	bmi.w	8001b8c <_vfiprintf_r+0x44>
 8001d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d50:	e71e      	b.n	8001b90 <_vfiprintf_r+0x48>
 8001d52:	ab03      	add	r3, sp, #12
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	462a      	mov	r2, r5
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <_vfiprintf_r+0x228>)
 8001d5a:	a904      	add	r1, sp, #16
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	f7ff fc8f 	bl	8001680 <_printf_i>
 8001d62:	e7e4      	b.n	8001d2e <_vfiprintf_r+0x1e6>
 8001d64:	08002288 	.word	0x08002288
 8001d68:	08002292 	.word	0x08002292
 8001d6c:	00000000 	.word	0x00000000
 8001d70:	08001b25 	.word	0x08001b25
 8001d74:	0800228e 	.word	0x0800228e

08001d78 <__swbuf_r>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	460e      	mov	r6, r1
 8001d7c:	4614      	mov	r4, r2
 8001d7e:	4605      	mov	r5, r0
 8001d80:	b118      	cbz	r0, 8001d8a <__swbuf_r+0x12>
 8001d82:	6a03      	ldr	r3, [r0, #32]
 8001d84:	b90b      	cbnz	r3, 8001d8a <__swbuf_r+0x12>
 8001d86:	f7ff f8ff 	bl	8000f88 <__sinit>
 8001d8a:	69a3      	ldr	r3, [r4, #24]
 8001d8c:	60a3      	str	r3, [r4, #8]
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	071a      	lsls	r2, r3, #28
 8001d92:	d501      	bpl.n	8001d98 <__swbuf_r+0x20>
 8001d94:	6923      	ldr	r3, [r4, #16]
 8001d96:	b943      	cbnz	r3, 8001daa <__swbuf_r+0x32>
 8001d98:	4621      	mov	r1, r4
 8001d9a:	4628      	mov	r0, r5
 8001d9c:	f000 f82a 	bl	8001df4 <__swsetup_r>
 8001da0:	b118      	cbz	r0, 8001daa <__swbuf_r+0x32>
 8001da2:	f04f 37ff 	mov.w	r7, #4294967295
 8001da6:	4638      	mov	r0, r7
 8001da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	6922      	ldr	r2, [r4, #16]
 8001dae:	1a98      	subs	r0, r3, r2
 8001db0:	6963      	ldr	r3, [r4, #20]
 8001db2:	b2f6      	uxtb	r6, r6
 8001db4:	4283      	cmp	r3, r0
 8001db6:	4637      	mov	r7, r6
 8001db8:	dc05      	bgt.n	8001dc6 <__swbuf_r+0x4e>
 8001dba:	4621      	mov	r1, r4
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f7ff fe03 	bl	80019c8 <_fflush_r>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d1ed      	bne.n	8001da2 <__swbuf_r+0x2a>
 8001dc6:	68a3      	ldr	r3, [r4, #8]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	60a3      	str	r3, [r4, #8]
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	6022      	str	r2, [r4, #0]
 8001dd2:	701e      	strb	r6, [r3, #0]
 8001dd4:	6962      	ldr	r2, [r4, #20]
 8001dd6:	1c43      	adds	r3, r0, #1
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d004      	beq.n	8001de6 <__swbuf_r+0x6e>
 8001ddc:	89a3      	ldrh	r3, [r4, #12]
 8001dde:	07db      	lsls	r3, r3, #31
 8001de0:	d5e1      	bpl.n	8001da6 <__swbuf_r+0x2e>
 8001de2:	2e0a      	cmp	r6, #10
 8001de4:	d1df      	bne.n	8001da6 <__swbuf_r+0x2e>
 8001de6:	4621      	mov	r1, r4
 8001de8:	4628      	mov	r0, r5
 8001dea:	f7ff fded 	bl	80019c8 <_fflush_r>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d0d9      	beq.n	8001da6 <__swbuf_r+0x2e>
 8001df2:	e7d6      	b.n	8001da2 <__swbuf_r+0x2a>

08001df4 <__swsetup_r>:
 8001df4:	b538      	push	{r3, r4, r5, lr}
 8001df6:	4b29      	ldr	r3, [pc, #164]	@ (8001e9c <__swsetup_r+0xa8>)
 8001df8:	4605      	mov	r5, r0
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	b118      	cbz	r0, 8001e08 <__swsetup_r+0x14>
 8001e00:	6a03      	ldr	r3, [r0, #32]
 8001e02:	b90b      	cbnz	r3, 8001e08 <__swsetup_r+0x14>
 8001e04:	f7ff f8c0 	bl	8000f88 <__sinit>
 8001e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e0c:	0719      	lsls	r1, r3, #28
 8001e0e:	d422      	bmi.n	8001e56 <__swsetup_r+0x62>
 8001e10:	06da      	lsls	r2, r3, #27
 8001e12:	d407      	bmi.n	8001e24 <__swsetup_r+0x30>
 8001e14:	2209      	movs	r2, #9
 8001e16:	602a      	str	r2, [r5, #0]
 8001e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e1c:	81a3      	strh	r3, [r4, #12]
 8001e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e22:	e033      	b.n	8001e8c <__swsetup_r+0x98>
 8001e24:	0758      	lsls	r0, r3, #29
 8001e26:	d512      	bpl.n	8001e4e <__swsetup_r+0x5a>
 8001e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e2a:	b141      	cbz	r1, 8001e3e <__swsetup_r+0x4a>
 8001e2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e30:	4299      	cmp	r1, r3
 8001e32:	d002      	beq.n	8001e3a <__swsetup_r+0x46>
 8001e34:	4628      	mov	r0, r5
 8001e36:	f7ff fa13 	bl	8001260 <_free_r>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e3e:	89a3      	ldrh	r3, [r4, #12]
 8001e40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001e44:	81a3      	strh	r3, [r4, #12]
 8001e46:	2300      	movs	r3, #0
 8001e48:	6063      	str	r3, [r4, #4]
 8001e4a:	6923      	ldr	r3, [r4, #16]
 8001e4c:	6023      	str	r3, [r4, #0]
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	81a3      	strh	r3, [r4, #12]
 8001e56:	6923      	ldr	r3, [r4, #16]
 8001e58:	b94b      	cbnz	r3, 8001e6e <__swsetup_r+0x7a>
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e64:	d003      	beq.n	8001e6e <__swsetup_r+0x7a>
 8001e66:	4621      	mov	r1, r4
 8001e68:	4628      	mov	r0, r5
 8001e6a:	f000 f88b 	bl	8001f84 <__smakebuf_r>
 8001e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e72:	f013 0201 	ands.w	r2, r3, #1
 8001e76:	d00a      	beq.n	8001e8e <__swsetup_r+0x9a>
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60a2      	str	r2, [r4, #8]
 8001e7c:	6962      	ldr	r2, [r4, #20]
 8001e7e:	4252      	negs	r2, r2
 8001e80:	61a2      	str	r2, [r4, #24]
 8001e82:	6922      	ldr	r2, [r4, #16]
 8001e84:	b942      	cbnz	r2, 8001e98 <__swsetup_r+0xa4>
 8001e86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001e8a:	d1c5      	bne.n	8001e18 <__swsetup_r+0x24>
 8001e8c:	bd38      	pop	{r3, r4, r5, pc}
 8001e8e:	0799      	lsls	r1, r3, #30
 8001e90:	bf58      	it	pl
 8001e92:	6962      	ldrpl	r2, [r4, #20]
 8001e94:	60a2      	str	r2, [r4, #8]
 8001e96:	e7f4      	b.n	8001e82 <__swsetup_r+0x8e>
 8001e98:	2000      	movs	r0, #0
 8001e9a:	e7f7      	b.n	8001e8c <__swsetup_r+0x98>
 8001e9c:	2000000c 	.word	0x2000000c

08001ea0 <_raise_r>:
 8001ea0:	291f      	cmp	r1, #31
 8001ea2:	b538      	push	{r3, r4, r5, lr}
 8001ea4:	4605      	mov	r5, r0
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	d904      	bls.n	8001eb4 <_raise_r+0x14>
 8001eaa:	2316      	movs	r3, #22
 8001eac:	6003      	str	r3, [r0, #0]
 8001eae:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb2:	bd38      	pop	{r3, r4, r5, pc}
 8001eb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001eb6:	b112      	cbz	r2, 8001ebe <_raise_r+0x1e>
 8001eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001ebc:	b94b      	cbnz	r3, 8001ed2 <_raise_r+0x32>
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f000 f830 	bl	8001f24 <_getpid_r>
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4628      	mov	r0, r5
 8001eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ece:	f000 b817 	b.w	8001f00 <_kill_r>
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d00a      	beq.n	8001eec <_raise_r+0x4c>
 8001ed6:	1c59      	adds	r1, r3, #1
 8001ed8:	d103      	bne.n	8001ee2 <_raise_r+0x42>
 8001eda:	2316      	movs	r3, #22
 8001edc:	6003      	str	r3, [r0, #0]
 8001ede:	2001      	movs	r0, #1
 8001ee0:	e7e7      	b.n	8001eb2 <_raise_r+0x12>
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4798      	blx	r3
 8001eec:	2000      	movs	r0, #0
 8001eee:	e7e0      	b.n	8001eb2 <_raise_r+0x12>

08001ef0 <raise>:
 8001ef0:	4b02      	ldr	r3, [pc, #8]	@ (8001efc <raise+0xc>)
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	f7ff bfd3 	b.w	8001ea0 <_raise_r>
 8001efa:	bf00      	nop
 8001efc:	2000000c 	.word	0x2000000c

08001f00 <_kill_r>:
 8001f00:	b538      	push	{r3, r4, r5, lr}
 8001f02:	4d07      	ldr	r5, [pc, #28]	@ (8001f20 <_kill_r+0x20>)
 8001f04:	2300      	movs	r3, #0
 8001f06:	4604      	mov	r4, r0
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	602b      	str	r3, [r5, #0]
 8001f0e:	f000 f8bf 	bl	8002090 <_kill>
 8001f12:	1c43      	adds	r3, r0, #1
 8001f14:	d102      	bne.n	8001f1c <_kill_r+0x1c>
 8001f16:	682b      	ldr	r3, [r5, #0]
 8001f18:	b103      	cbz	r3, 8001f1c <_kill_r+0x1c>
 8001f1a:	6023      	str	r3, [r4, #0]
 8001f1c:	bd38      	pop	{r3, r4, r5, pc}
 8001f1e:	bf00      	nop
 8001f20:	200001bc 	.word	0x200001bc

08001f24 <_getpid_r>:
 8001f24:	f000 b89c 	b.w	8002060 <_getpid>

08001f28 <_malloc_usable_size_r>:
 8001f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f2c:	1f18      	subs	r0, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bfbc      	itt	lt
 8001f32:	580b      	ldrlt	r3, [r1, r0]
 8001f34:	18c0      	addlt	r0, r0, r3
 8001f36:	4770      	bx	lr

08001f38 <__swhatbuf_r>:
 8001f38:	b570      	push	{r4, r5, r6, lr}
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f40:	2900      	cmp	r1, #0
 8001f42:	b096      	sub	sp, #88	@ 0x58
 8001f44:	4615      	mov	r5, r2
 8001f46:	461e      	mov	r6, r3
 8001f48:	da0d      	bge.n	8001f66 <__swhatbuf_r+0x2e>
 8001f4a:	89a3      	ldrh	r3, [r4, #12]
 8001f4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2340      	movne	r3, #64	@ 0x40
 8001f58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	6031      	str	r1, [r6, #0]
 8001f60:	602b      	str	r3, [r5, #0]
 8001f62:	b016      	add	sp, #88	@ 0x58
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
 8001f66:	466a      	mov	r2, sp
 8001f68:	f000 f848 	bl	8001ffc <_fstat_r>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	dbec      	blt.n	8001f4a <__swhatbuf_r+0x12>
 8001f70:	9901      	ldr	r1, [sp, #4]
 8001f72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001f76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001f7a:	4259      	negs	r1, r3
 8001f7c:	4159      	adcs	r1, r3
 8001f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f82:	e7eb      	b.n	8001f5c <__swhatbuf_r+0x24>

08001f84 <__smakebuf_r>:
 8001f84:	898b      	ldrh	r3, [r1, #12]
 8001f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f88:	079d      	lsls	r5, r3, #30
 8001f8a:	4606      	mov	r6, r0
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	d507      	bpl.n	8001fa0 <__smakebuf_r+0x1c>
 8001f90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	6123      	str	r3, [r4, #16]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	6163      	str	r3, [r4, #20]
 8001f9c:	b003      	add	sp, #12
 8001f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa0:	ab01      	add	r3, sp, #4
 8001fa2:	466a      	mov	r2, sp
 8001fa4:	f7ff ffc8 	bl	8001f38 <__swhatbuf_r>
 8001fa8:	9f00      	ldr	r7, [sp, #0]
 8001faa:	4605      	mov	r5, r0
 8001fac:	4639      	mov	r1, r7
 8001fae:	4630      	mov	r0, r6
 8001fb0:	f7fe fe66 	bl	8000c80 <_malloc_r>
 8001fb4:	b948      	cbnz	r0, 8001fca <__smakebuf_r+0x46>
 8001fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fba:	059a      	lsls	r2, r3, #22
 8001fbc:	d4ee      	bmi.n	8001f9c <__smakebuf_r+0x18>
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	81a3      	strh	r3, [r4, #12]
 8001fc8:	e7e2      	b.n	8001f90 <__smakebuf_r+0xc>
 8001fca:	89a3      	ldrh	r3, [r4, #12]
 8001fcc:	6020      	str	r0, [r4, #0]
 8001fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd2:	81a3      	strh	r3, [r4, #12]
 8001fd4:	9b01      	ldr	r3, [sp, #4]
 8001fd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001fda:	b15b      	cbz	r3, 8001ff4 <__smakebuf_r+0x70>
 8001fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	f000 f81d 	bl	8002020 <_isatty_r>
 8001fe6:	b128      	cbz	r0, 8001ff4 <__smakebuf_r+0x70>
 8001fe8:	89a3      	ldrh	r3, [r4, #12]
 8001fea:	f023 0303 	bic.w	r3, r3, #3
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	81a3      	strh	r3, [r4, #12]
 8001ff4:	89a3      	ldrh	r3, [r4, #12]
 8001ff6:	431d      	orrs	r5, r3
 8001ff8:	81a5      	strh	r5, [r4, #12]
 8001ffa:	e7cf      	b.n	8001f9c <__smakebuf_r+0x18>

08001ffc <_fstat_r>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4d07      	ldr	r5, [pc, #28]	@ (800201c <_fstat_r+0x20>)
 8002000:	2300      	movs	r3, #0
 8002002:	4604      	mov	r4, r0
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	602b      	str	r3, [r5, #0]
 800200a:	f000 f821 	bl	8002050 <_fstat>
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	d102      	bne.n	8002018 <_fstat_r+0x1c>
 8002012:	682b      	ldr	r3, [r5, #0]
 8002014:	b103      	cbz	r3, 8002018 <_fstat_r+0x1c>
 8002016:	6023      	str	r3, [r4, #0]
 8002018:	bd38      	pop	{r3, r4, r5, pc}
 800201a:	bf00      	nop
 800201c:	200001bc 	.word	0x200001bc

08002020 <_isatty_r>:
 8002020:	b538      	push	{r3, r4, r5, lr}
 8002022:	4d06      	ldr	r5, [pc, #24]	@ (800203c <_isatty_r+0x1c>)
 8002024:	2300      	movs	r3, #0
 8002026:	4604      	mov	r4, r0
 8002028:	4608      	mov	r0, r1
 800202a:	602b      	str	r3, [r5, #0]
 800202c:	f000 f828 	bl	8002080 <_isatty>
 8002030:	1c43      	adds	r3, r0, #1
 8002032:	d102      	bne.n	800203a <_isatty_r+0x1a>
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	b103      	cbz	r3, 800203a <_isatty_r+0x1a>
 8002038:	6023      	str	r3, [r4, #0]
 800203a:	bd38      	pop	{r3, r4, r5, pc}
 800203c:	200001bc 	.word	0x200001bc

08002040 <_close>:
 8002040:	4b02      	ldr	r3, [pc, #8]	@ (800204c <_close+0xc>)
 8002042:	2258      	movs	r2, #88	@ 0x58
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f04f 30ff 	mov.w	r0, #4294967295
 800204a:	4770      	bx	lr
 800204c:	200001bc 	.word	0x200001bc

08002050 <_fstat>:
 8002050:	4b02      	ldr	r3, [pc, #8]	@ (800205c <_fstat+0xc>)
 8002052:	2258      	movs	r2, #88	@ 0x58
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	f04f 30ff 	mov.w	r0, #4294967295
 800205a:	4770      	bx	lr
 800205c:	200001bc 	.word	0x200001bc

08002060 <_getpid>:
 8002060:	4b02      	ldr	r3, [pc, #8]	@ (800206c <_getpid+0xc>)
 8002062:	2258      	movs	r2, #88	@ 0x58
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f04f 30ff 	mov.w	r0, #4294967295
 800206a:	4770      	bx	lr
 800206c:	200001bc 	.word	0x200001bc

08002070 <_gettimeofday>:
 8002070:	4b02      	ldr	r3, [pc, #8]	@ (800207c <_gettimeofday+0xc>)
 8002072:	2258      	movs	r2, #88	@ 0x58
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f04f 30ff 	mov.w	r0, #4294967295
 800207a:	4770      	bx	lr
 800207c:	200001bc 	.word	0x200001bc

08002080 <_isatty>:
 8002080:	4b02      	ldr	r3, [pc, #8]	@ (800208c <_isatty+0xc>)
 8002082:	2258      	movs	r2, #88	@ 0x58
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	2000      	movs	r0, #0
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	200001bc 	.word	0x200001bc

08002090 <_kill>:
 8002090:	4b02      	ldr	r3, [pc, #8]	@ (800209c <_kill+0xc>)
 8002092:	2258      	movs	r2, #88	@ 0x58
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f04f 30ff 	mov.w	r0, #4294967295
 800209a:	4770      	bx	lr
 800209c:	200001bc 	.word	0x200001bc

080020a0 <_lseek>:
 80020a0:	4b02      	ldr	r3, [pc, #8]	@ (80020ac <_lseek+0xc>)
 80020a2:	2258      	movs	r2, #88	@ 0x58
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	f04f 30ff 	mov.w	r0, #4294967295
 80020aa:	4770      	bx	lr
 80020ac:	200001bc 	.word	0x200001bc

080020b0 <_read>:
 80020b0:	4b02      	ldr	r3, [pc, #8]	@ (80020bc <_read+0xc>)
 80020b2:	2258      	movs	r2, #88	@ 0x58
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ba:	4770      	bx	lr
 80020bc:	200001bc 	.word	0x200001bc

080020c0 <_sbrk>:
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <_sbrk+0x14>)
 80020c2:	6811      	ldr	r1, [r2, #0]
 80020c4:	4603      	mov	r3, r0
 80020c6:	b909      	cbnz	r1, 80020cc <_sbrk+0xc>
 80020c8:	4903      	ldr	r1, [pc, #12]	@ (80020d8 <_sbrk+0x18>)
 80020ca:	6011      	str	r1, [r2, #0]
 80020cc:	6810      	ldr	r0, [r2, #0]
 80020ce:	4403      	add	r3, r0
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4770      	bx	lr
 80020d4:	200001c4 	.word	0x200001c4
 80020d8:	200001c8 	.word	0x200001c8

080020dc <_write>:
 80020dc:	4b02      	ldr	r3, [pc, #8]	@ (80020e8 <_write+0xc>)
 80020de:	2258      	movs	r2, #88	@ 0x58
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f04f 30ff 	mov.w	r0, #4294967295
 80020e6:	4770      	bx	lr
 80020e8:	200001bc 	.word	0x200001bc

080020ec <_exit>:
 80020ec:	e7fe      	b.n	80020ec <_exit>
	...

080020f0 <_init>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr

080020fc <_fini>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr
