
BtnLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000580  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000714  0800071c  0000171c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000714  08000714  0000171c  2**0
                  CONTENTS
  4 .ARM          00000000  08000714  08000714  0000171c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000714  0800071c  0000171c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000714  08000714  00001714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000718  08000718  00001718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000171c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800071c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800071c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010b8  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c8  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00002cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000091  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013912  00000000  00000000  00002e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001aa7  00000000  00000000  0001674b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d6c7  00000000  00000000  000181f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000958b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000024c  00000000  00000000  000958fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00095b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006fc 	.word	0x080006fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006fc 	.word	0x080006fc

080001d4 <main>:
// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
// delay(500000);

// Main Function
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	GPIO_Config();
 80001da:	f000 f82d 	bl	8000238 <GPIO_Config>
	int flag = 1;
 80001de:	2301      	movs	r3, #1
 80001e0:	607b      	str	r3, [r7, #4]

	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 0 && flag == 1)
 80001e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001e6:	4813      	ldr	r0, [pc, #76]	@ (8000234 <main+0x60>)
 80001e8:	f000 fa32 	bl	8000650 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d10e      	bne.n	8000210 <main+0x3c>
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d10b      	bne.n	8000210 <main+0x3c>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80001f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001fc:	480d      	ldr	r0, [pc, #52]	@ (8000234 <main+0x60>)
 80001fe:	f000 fa3f 	bl	8000680 <HAL_GPIO_TogglePin>
			flag = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
			delay(50000);
 8000206:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800020a:	f000 f84b 	bl	80002a4 <delay>
 800020e:	e010      	b.n	8000232 <main+0x5e>
		}
		else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1 && flag == 0)
 8000210:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000214:	4807      	ldr	r0, [pc, #28]	@ (8000234 <main+0x60>)
 8000216:	f000 fa1b 	bl	8000650 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	2b01      	cmp	r3, #1
 800021e:	d1e0      	bne.n	80001e2 <main+0xe>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d1dd      	bne.n	80001e2 <main+0xe>
		{
			flag = 1;
 8000226:	2301      	movs	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
			delay(50000);
 800022a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800022e:	f000 f839 	bl	80002a4 <delay>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 0 && flag == 1)
 8000232:	e7d6      	b.n	80001e2 <main+0xe>
 8000234:	40020800 	.word	0x40020800

08000238 <GPIO_Config>:
	}
}

// GPIO Configuration
void GPIO_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800023e:	2300      	movs	r3, #0
 8000240:	603b      	str	r3, [r7, #0]
 8000242:	4b16      	ldr	r3, [pc, #88]	@ (800029c <GPIO_Config+0x64>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000246:	4a15      	ldr	r2, [pc, #84]	@ (800029c <GPIO_Config+0x64>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6313      	str	r3, [r2, #48]	@ 0x30
 800024e:	4b13      	ldr	r3, [pc, #76]	@ (800029c <GPIO_Config+0x64>)
 8000250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	603b      	str	r3, [r7, #0]
 8000258:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOC_Init = {};
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]

	// LED Output
	GPIOC_Init.Pin = GPIO_PIN_8;
 8000268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800026c:	607b      	str	r3, [r7, #4]
	GPIOC_Init.Mode = GPIO_MODE_OUTPUT_PP;
 800026e:	2301      	movs	r3, #1
 8000270:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOC,&GPIOC_Init);
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	4619      	mov	r1, r3
 8000276:	480a      	ldr	r0, [pc, #40]	@ (80002a0 <GPIO_Config+0x68>)
 8000278:	f000 f866 	bl	8000348 <HAL_GPIO_Init>

	// Button Input
	GPIOC_Init.Pin = GPIO_PIN_10;
 800027c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000280:	607b      	str	r3, [r7, #4]
	GPIOC_Init.Mode = GPIO_MODE_INPUT;
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
	GPIOC_Init.Pull = GPIO_PULLUP;
 8000286:	2301      	movs	r3, #1
 8000288:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC,&GPIOC_Init);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <GPIO_Config+0x68>)
 8000290:	f000 f85a 	bl	8000348 <HAL_GPIO_Init>
}
 8000294:	bf00      	nop
 8000296:	3718      	adds	r7, #24
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020800 	.word	0x40020800

080002a4 <delay>:

void delay(uint32_t delayVal)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i=0;i < delayVal; i++)
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	e002      	b.n	80002b8 <delay+0x14>
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	3301      	adds	r3, #1
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	68fa      	ldr	r2, [r7, #12]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d3f8      	bcc.n	80002b2 <delay+0xe>
	{
	}
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d4:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <SystemInit+0x20>)
 80002d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002da:	4a05      	ldr	r2, [pc, #20]	@ (80002f0 <SystemInit+0x20>)
 80002dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800032c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002f8:	f7ff ffea 	bl	80002d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	@ (8000330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	@ (8000334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	@ (800033c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	@ (8000340 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000322:	f000 f9c7 	bl	80006b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000326:	f7ff ff55 	bl	80001d4 <main>
  bx  lr    
 800032a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800032c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000338:	0800071c 	.word	0x0800071c
  ldr r2, =_sbss
 800033c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000340:	2000001c 	.word	0x2000001c

08000344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC_IRQHandler>
	...

08000348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000348:	b480      	push	{r7}
 800034a:	b089      	sub	sp, #36	@ 0x24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000352:	2300      	movs	r3, #0
 8000354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800035e:	2300      	movs	r3, #0
 8000360:	61fb      	str	r3, [r7, #28]
 8000362:	e159      	b.n	8000618 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000364:	2201      	movs	r2, #1
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	fa02 f303 	lsl.w	r3, r2, r3
 800036c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	697a      	ldr	r2, [r7, #20]
 8000374:	4013      	ands	r3, r2
 8000376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000378:	693a      	ldr	r2, [r7, #16]
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	429a      	cmp	r2, r3
 800037e:	f040 8148 	bne.w	8000612 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	f003 0303 	and.w	r3, r3, #3
 800038a:	2b01      	cmp	r3, #1
 800038c:	d005      	beq.n	800039a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000396:	2b02      	cmp	r3, #2
 8000398:	d130      	bne.n	80003fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003a0:	69fb      	ldr	r3, [r7, #28]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	2203      	movs	r2, #3
 80003a6:	fa02 f303 	lsl.w	r3, r2, r3
 80003aa:	43db      	mvns	r3, r3
 80003ac:	69ba      	ldr	r2, [r7, #24]
 80003ae:	4013      	ands	r3, r2
 80003b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	68da      	ldr	r2, [r3, #12]
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	fa02 f303 	lsl.w	r3, r2, r3
 80003be:	69ba      	ldr	r2, [r7, #24]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	69ba      	ldr	r2, [r7, #24]
 80003c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003d0:	2201      	movs	r2, #1
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	fa02 f303 	lsl.w	r3, r2, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	69ba      	ldr	r2, [r7, #24]
 80003dc:	4013      	ands	r3, r2
 80003de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	091b      	lsrs	r3, r3, #4
 80003e6:	f003 0201 	and.w	r2, r3, #1
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	69ba      	ldr	r2, [r7, #24]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	69ba      	ldr	r2, [r7, #24]
 80003fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	f003 0303 	and.w	r3, r3, #3
 8000404:	2b03      	cmp	r3, #3
 8000406:	d017      	beq.n	8000438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	2203      	movs	r2, #3
 8000414:	fa02 f303 	lsl.w	r3, r2, r3
 8000418:	43db      	mvns	r3, r3
 800041a:	69ba      	ldr	r2, [r7, #24]
 800041c:	4013      	ands	r3, r2
 800041e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	689a      	ldr	r2, [r3, #8]
 8000424:	69fb      	ldr	r3, [r7, #28]
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	fa02 f303 	lsl.w	r3, r2, r3
 800042c:	69ba      	ldr	r2, [r7, #24]
 800042e:	4313      	orrs	r3, r2
 8000430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	69ba      	ldr	r2, [r7, #24]
 8000436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f003 0303 	and.w	r3, r3, #3
 8000440:	2b02      	cmp	r3, #2
 8000442:	d123      	bne.n	800048c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	08da      	lsrs	r2, r3, #3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3208      	adds	r2, #8
 800044c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	f003 0307 	and.w	r3, r3, #7
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	220f      	movs	r2, #15
 800045c:	fa02 f303 	lsl.w	r3, r2, r3
 8000460:	43db      	mvns	r3, r3
 8000462:	69ba      	ldr	r2, [r7, #24]
 8000464:	4013      	ands	r3, r2
 8000466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	691a      	ldr	r2, [r3, #16]
 800046c:	69fb      	ldr	r3, [r7, #28]
 800046e:	f003 0307 	and.w	r3, r3, #7
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	69ba      	ldr	r2, [r7, #24]
 800047a:	4313      	orrs	r3, r2
 800047c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	08da      	lsrs	r2, r3, #3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3208      	adds	r2, #8
 8000486:	69b9      	ldr	r1, [r7, #24]
 8000488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	2203      	movs	r2, #3
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	43db      	mvns	r3, r3
 800049e:	69ba      	ldr	r2, [r7, #24]
 80004a0:	4013      	ands	r3, r2
 80004a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f003 0203 	and.w	r2, r3, #3
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	69ba      	ldr	r2, [r7, #24]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	69ba      	ldr	r2, [r7, #24]
 80004be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	f000 80a2 	beq.w	8000612 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	4b57      	ldr	r3, [pc, #348]	@ (8000630 <HAL_GPIO_Init+0x2e8>)
 80004d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004d6:	4a56      	ldr	r2, [pc, #344]	@ (8000630 <HAL_GPIO_Init+0x2e8>)
 80004d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80004de:	4b54      	ldr	r3, [pc, #336]	@ (8000630 <HAL_GPIO_Init+0x2e8>)
 80004e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80004ea:	4a52      	ldr	r2, [pc, #328]	@ (8000634 <HAL_GPIO_Init+0x2ec>)
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	089b      	lsrs	r3, r3, #2
 80004f0:	3302      	adds	r3, #2
 80004f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	f003 0303 	and.w	r3, r3, #3
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	220f      	movs	r2, #15
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	43db      	mvns	r3, r3
 8000508:	69ba      	ldr	r2, [r7, #24]
 800050a:	4013      	ands	r3, r2
 800050c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a49      	ldr	r2, [pc, #292]	@ (8000638 <HAL_GPIO_Init+0x2f0>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d019      	beq.n	800054a <HAL_GPIO_Init+0x202>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a48      	ldr	r2, [pc, #288]	@ (800063c <HAL_GPIO_Init+0x2f4>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d013      	beq.n	8000546 <HAL_GPIO_Init+0x1fe>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a47      	ldr	r2, [pc, #284]	@ (8000640 <HAL_GPIO_Init+0x2f8>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d00d      	beq.n	8000542 <HAL_GPIO_Init+0x1fa>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a46      	ldr	r2, [pc, #280]	@ (8000644 <HAL_GPIO_Init+0x2fc>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d007      	beq.n	800053e <HAL_GPIO_Init+0x1f6>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a45      	ldr	r2, [pc, #276]	@ (8000648 <HAL_GPIO_Init+0x300>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d101      	bne.n	800053a <HAL_GPIO_Init+0x1f2>
 8000536:	2304      	movs	r3, #4
 8000538:	e008      	b.n	800054c <HAL_GPIO_Init+0x204>
 800053a:	2307      	movs	r3, #7
 800053c:	e006      	b.n	800054c <HAL_GPIO_Init+0x204>
 800053e:	2303      	movs	r3, #3
 8000540:	e004      	b.n	800054c <HAL_GPIO_Init+0x204>
 8000542:	2302      	movs	r3, #2
 8000544:	e002      	b.n	800054c <HAL_GPIO_Init+0x204>
 8000546:	2301      	movs	r3, #1
 8000548:	e000      	b.n	800054c <HAL_GPIO_Init+0x204>
 800054a:	2300      	movs	r3, #0
 800054c:	69fa      	ldr	r2, [r7, #28]
 800054e:	f002 0203 	and.w	r2, r2, #3
 8000552:	0092      	lsls	r2, r2, #2
 8000554:	4093      	lsls	r3, r2
 8000556:	69ba      	ldr	r2, [r7, #24]
 8000558:	4313      	orrs	r3, r2
 800055a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800055c:	4935      	ldr	r1, [pc, #212]	@ (8000634 <HAL_GPIO_Init+0x2ec>)
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	089b      	lsrs	r3, r3, #2
 8000562:	3302      	adds	r3, #2
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800056a:	4b38      	ldr	r3, [pc, #224]	@ (800064c <HAL_GPIO_Init+0x304>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	43db      	mvns	r3, r3
 8000574:	69ba      	ldr	r2, [r7, #24]
 8000576:	4013      	ands	r3, r2
 8000578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000582:	2b00      	cmp	r3, #0
 8000584:	d003      	beq.n	800058e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000586:	69ba      	ldr	r2, [r7, #24]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	4313      	orrs	r3, r2
 800058c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800058e:	4a2f      	ldr	r2, [pc, #188]	@ (800064c <HAL_GPIO_Init+0x304>)
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000594:	4b2d      	ldr	r3, [pc, #180]	@ (800064c <HAL_GPIO_Init+0x304>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	43db      	mvns	r3, r3
 800059e:	69ba      	ldr	r2, [r7, #24]
 80005a0:	4013      	ands	r3, r2
 80005a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d003      	beq.n	80005b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80005b0:	69ba      	ldr	r2, [r7, #24]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80005b8:	4a24      	ldr	r2, [pc, #144]	@ (800064c <HAL_GPIO_Init+0x304>)
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80005be:	4b23      	ldr	r3, [pc, #140]	@ (800064c <HAL_GPIO_Init+0x304>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	43db      	mvns	r3, r3
 80005c8:	69ba      	ldr	r2, [r7, #24]
 80005ca:	4013      	ands	r3, r2
 80005cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	4313      	orrs	r3, r2
 80005e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80005e2:	4a1a      	ldr	r2, [pc, #104]	@ (800064c <HAL_GPIO_Init+0x304>)
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <HAL_GPIO_Init+0x304>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	43db      	mvns	r3, r3
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	4013      	ands	r3, r2
 80005f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d003      	beq.n	800060c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	4313      	orrs	r3, r2
 800060a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800060c:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <HAL_GPIO_Init+0x304>)
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	3301      	adds	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	2b0f      	cmp	r3, #15
 800061c:	f67f aea2 	bls.w	8000364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3724      	adds	r7, #36	@ 0x24
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40013800 	.word	0x40013800
 8000638:	40020000 	.word	0x40020000
 800063c:	40020400 	.word	0x40020400
 8000640:	40020800 	.word	0x40020800
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40021000 	.word	0x40021000
 800064c:	40013c00 	.word	0x40013c00

08000650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	691a      	ldr	r2, [r3, #16]
 8000660:	887b      	ldrh	r3, [r7, #2]
 8000662:	4013      	ands	r3, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000668:	2301      	movs	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	e001      	b.n	8000672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000692:	887a      	ldrh	r2, [r7, #2]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4013      	ands	r3, r2
 8000698:	041a      	lsls	r2, r3, #16
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	43d9      	mvns	r1, r3
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	400b      	ands	r3, r1
 80006a2:	431a      	orrs	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	619a      	str	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <__libc_init_array>:
 80006b4:	b570      	push	{r4, r5, r6, lr}
 80006b6:	4d0d      	ldr	r5, [pc, #52]	@ (80006ec <__libc_init_array+0x38>)
 80006b8:	4c0d      	ldr	r4, [pc, #52]	@ (80006f0 <__libc_init_array+0x3c>)
 80006ba:	1b64      	subs	r4, r4, r5
 80006bc:	10a4      	asrs	r4, r4, #2
 80006be:	2600      	movs	r6, #0
 80006c0:	42a6      	cmp	r6, r4
 80006c2:	d109      	bne.n	80006d8 <__libc_init_array+0x24>
 80006c4:	4d0b      	ldr	r5, [pc, #44]	@ (80006f4 <__libc_init_array+0x40>)
 80006c6:	4c0c      	ldr	r4, [pc, #48]	@ (80006f8 <__libc_init_array+0x44>)
 80006c8:	f000 f818 	bl	80006fc <_init>
 80006cc:	1b64      	subs	r4, r4, r5
 80006ce:	10a4      	asrs	r4, r4, #2
 80006d0:	2600      	movs	r6, #0
 80006d2:	42a6      	cmp	r6, r4
 80006d4:	d105      	bne.n	80006e2 <__libc_init_array+0x2e>
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006dc:	4798      	blx	r3
 80006de:	3601      	adds	r6, #1
 80006e0:	e7ee      	b.n	80006c0 <__libc_init_array+0xc>
 80006e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e6:	4798      	blx	r3
 80006e8:	3601      	adds	r6, #1
 80006ea:	e7f2      	b.n	80006d2 <__libc_init_array+0x1e>
 80006ec:	08000714 	.word	0x08000714
 80006f0:	08000714 	.word	0x08000714
 80006f4:	08000714 	.word	0x08000714
 80006f8:	08000718 	.word	0x08000718

080006fc <_init>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr

08000708 <_fini>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr
