
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001030  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080011d0  080011d0  000021d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001214  08001214  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001214  08001214  00002214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800121c  0800121c  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800121c  0800121c  0000221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001220  08001220  00002220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001224  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000050  08001274  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08001274  000031b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011db  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000517  00000000  00000000  0000425b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00004778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b0  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014338  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c82  00000000  00000000  00018c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080df4  00000000  00000000  0001a8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b6d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000834  00000000  00000000  0009b71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0009bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080011b8 	.word	0x080011b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	080011b8 	.word	0x080011b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#include "main.h"
#include <stdio.h>

// Main Function
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	@ 0x28
 8000284:	af00      	add	r7, sp, #0
	GPIO_Config();
 8000286:	f000 f81b 	bl	80002c0 <GPIO_Config>
	LCD_Init();
 800028a:	f000 f86f 	bl	800036c <LCD_Init>
	delay(100000);
 800028e:	480a      	ldr	r0, [pc, #40]	@ (80002b8 <main+0x38>)
 8000290:	f000 f903 	bl	800049a <delay>
	//LCD_Command(0x02);
	int var = 5;
 8000294:	2305      	movs	r3, #5
 8000296:	627b      	str	r3, [r7, #36]	@ 0x24
	char str[32];
	sprintf(str, "The value is: %d", var);
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800029c:	4907      	ldr	r1, [pc, #28]	@ (80002bc <main+0x3c>)
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 faea 	bl	8000878 <siprintf>
	LCD_Print(str);
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f8e2 	bl	8000470 <LCD_Print>
 80002ac:	2300      	movs	r3, #0
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3728      	adds	r7, #40	@ 0x28
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	000186a0 	.word	0x000186a0
 80002bc:	080011d0 	.word	0x080011d0

080002c0 <GPIO_Config>:

// GPIO Configuration
void GPIO_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	@ 0x30
 80002c4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	4b25      	ldr	r3, [pc, #148]	@ (8000360 <GPIO_Config+0xa0>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a24      	ldr	r2, [pc, #144]	@ (8000360 <GPIO_Config+0xa0>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002d6:	4b22      	ldr	r3, [pc, #136]	@ (8000360 <GPIO_Config+0xa0>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002da:	f003 0301 	and.w	r3, r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002e2:	2300      	movs	r3, #0
 80002e4:	603b      	str	r3, [r7, #0]
 80002e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000360 <GPIO_Config+0xa0>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000360 <GPIO_Config+0xa0>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000360 <GPIO_Config+0xa0>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOA_Init = {0};
 80002fe:	f107 031c 	add.w	r3, r7, #28
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIOC_Init = {0};
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]

	// LCD PA
	GPIOA_Init.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800031e:	23e0      	movs	r3, #224	@ 0xe0
 8000320:	61fb      	str	r3, [r7, #28]
	GPIOA_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	623b      	str	r3, [r7, #32]
	GPIOA_Init.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIOA_Init.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2300      	movs	r3, #0
 800032c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA,&GPIOA_Init);
 800032e:	f107 031c 	add.w	r3, r7, #28
 8000332:	4619      	mov	r1, r3
 8000334:	480b      	ldr	r0, [pc, #44]	@ (8000364 <GPIO_Config+0xa4>)
 8000336:	f000 f901 	bl	800053c <HAL_GPIO_Init>

	// LCD PC
	GPIOC_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800033a:	23ff      	movs	r3, #255	@ 0xff
 800033c:	60bb      	str	r3, [r7, #8]
	GPIOC_Init.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
	GPIOC_Init.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	613b      	str	r3, [r7, #16]
	GPIOC_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&GPIOC_Init);
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	4619      	mov	r1, r3
 8000350:	4805      	ldr	r0, [pc, #20]	@ (8000368 <GPIO_Config+0xa8>)
 8000352:	f000 f8f3 	bl	800053c <HAL_GPIO_Init>
}
 8000356:	bf00      	nop
 8000358:	3730      	adds	r7, #48	@ 0x30
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800
 8000364:	40020000 	.word	0x40020000
 8000368:	40020800 	.word	0x40020800

0800036c <LCD_Init>:

// LCD Configuration
void LCD_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

	delay(150000);
 8000370:	4814      	ldr	r0, [pc, #80]	@ (80003c4 <LCD_Init+0x58>)
 8000372:	f000 f892 	bl	800049a <delay>
	LCD_Command(0x30);     // Function set
 8000376:	2030      	movs	r0, #48	@ 0x30
 8000378:	f000 f85e 	bl	8000438 <LCD_Command>
	delay(50000);
 800037c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000380:	f000 f88b 	bl	800049a <delay>
	LCD_Command(0x30);     // Function set again
 8000384:	2030      	movs	r0, #48	@ 0x30
 8000386:	f000 f857 	bl	8000438 <LCD_Command>
	delay(50000);
 800038a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800038e:	f000 f884 	bl	800049a <delay>
	LCD_Command(0x30);     // Function set again
 8000392:	2030      	movs	r0, #48	@ 0x30
 8000394:	f000 f850 	bl	8000438 <LCD_Command>
	delay(50000);
 8000398:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800039c:	f000 f87d 	bl	800049a <delay>
	LCD_Command(0x38);     // Set 8-bit mode, 2-line display, 5x8 font
 80003a0:	2038      	movs	r0, #56	@ 0x38
 80003a2:	f000 f849 	bl	8000438 <LCD_Command>
	LCD_Command(0x0C);     // Display ON, cursor OFF
 80003a6:	200c      	movs	r0, #12
 80003a8:	f000 f846 	bl	8000438 <LCD_Command>
	LCD_Command(0x01);     // Clear display
 80003ac:	2001      	movs	r0, #1
 80003ae:	f000 f843 	bl	8000438 <LCD_Command>
	delay(100000);
 80003b2:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <LCD_Init+0x5c>)
 80003b4:	f000 f871 	bl	800049a <delay>
	LCD_Command(0x06);     // Increment cursor after each character
 80003b8:	2006      	movs	r0, #6
 80003ba:	f000 f83d 	bl	8000438 <LCD_Command>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	000249f0 	.word	0x000249f0
 80003c8:	000186a0 	.word	0x000186a0

080003cc <LCD_Send>:

// LCD Send Information
void LCD_Send(uint8_t data, uint8_t cd)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	460a      	mov	r2, r1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	4613      	mov	r3, r2
 80003da:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, cd ? GPIO_PIN_SET : GPIO_PIN_RESET);	// cd = 0 -> command | cd = 1 -> data
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	bf14      	ite	ne
 80003e2:	2301      	movne	r3, #1
 80003e4:	2300      	moveq	r3, #0
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	2120      	movs	r1, #32
 80003ec:	4810      	ldr	r0, [pc, #64]	@ (8000430 <LCD_Send+0x64>)
 80003ee:	f000 fa29 	bl	8000844 <HAL_GPIO_WritePin>

	GPIOC->ODR = (GPIOC->ODR & 0xFFFFFF00) | data;
 80003f2:	4b10      	ldr	r3, [pc, #64]	@ (8000434 <LCD_Send+0x68>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	490d      	ldr	r1, [pc, #52]	@ (8000434 <LCD_Send+0x68>)
 80003fe:	4313      	orrs	r3, r2
 8000400:	614b      	str	r3, [r1, #20]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	2180      	movs	r1, #128	@ 0x80
 8000406:	480a      	ldr	r0, [pc, #40]	@ (8000430 <LCD_Send+0x64>)
 8000408:	f000 fa1c 	bl	8000844 <HAL_GPIO_WritePin>
	delay(10000);
 800040c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000410:	f000 f843 	bl	800049a <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2180      	movs	r1, #128	@ 0x80
 8000418:	4805      	ldr	r0, [pc, #20]	@ (8000430 <LCD_Send+0x64>)
 800041a:	f000 fa13 	bl	8000844 <HAL_GPIO_WritePin>
	delay(10000);
 800041e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000422:	f000 f83a 	bl	800049a <delay>

}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40020000 	.word	0x40020000
 8000434:	40020800 	.word	0x40020800

08000438 <LCD_Command>:

void LCD_Command(uint8_t command)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	LCD_Send(command, 0);
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ffc0 	bl	80003cc <LCD_Send>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <LCD_Data>:

void LCD_Data(uint8_t data)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	LCD_Send(data, 1);
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ffb2 	bl	80003cc <LCD_Send>
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <LCD_Print>:

void LCD_Print(const char *str)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	while(*str)
 8000478:	e006      	b.n	8000488 <LCD_Print+0x18>
	{
		LCD_Data(*str++);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	1c5a      	adds	r2, r3, #1
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffe6 	bl	8000454 <LCD_Data>
	while(*str)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1f4      	bne.n	800047a <LCD_Print+0xa>
	}
}
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <delay>:


void delay(uint32_t delayVal)
{
 800049a:	b480      	push	{r7}
 800049c:	b085      	sub	sp, #20
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i=0;i < delayVal; i++)
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	e002      	b.n	80004ae <delay+0x14>
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3301      	adds	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	429a      	cmp	r2, r3
 80004b4:	d3f8      	bcc.n	80004a8 <delay+0xe>
	{
	}
}
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <SystemInit+0x20>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004ce:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <SystemInit+0x20>)
 80004d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004ec:	f7ff ffea 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	@ (8000524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	@ (8000528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	@ (8000534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000516:	f000 f9cf 	bl	80008b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800051a:	f7ff feb1 	bl	8000280 <main>
  bx  lr    
 800051e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000520:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800052c:	08001224 	.word	0x08001224
  ldr r2, =_sbss
 8000530:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000534:	200001b8 	.word	0x200001b8

08000538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC_IRQHandler>
	...

0800053c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800053c:	b480      	push	{r7}
 800053e:	b089      	sub	sp, #36	@ 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
 8000556:	e159      	b.n	800080c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000558:	2201      	movs	r2, #1
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	697a      	ldr	r2, [r7, #20]
 8000568:	4013      	ands	r3, r2
 800056a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	429a      	cmp	r2, r3
 8000572:	f040 8148 	bne.w	8000806 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	f003 0303 	and.w	r3, r3, #3
 800057e:	2b01      	cmp	r3, #1
 8000580:	d005      	beq.n	800058e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800058a:	2b02      	cmp	r3, #2
 800058c:	d130      	bne.n	80005f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2203      	movs	r2, #3
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	43db      	mvns	r3, r3
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	4013      	ands	r3, r2
 80005a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	68da      	ldr	r2, [r3, #12]
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	69ba      	ldr	r2, [r7, #24]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	69ba      	ldr	r2, [r7, #24]
 80005bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005c4:	2201      	movs	r2, #1
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	69ba      	ldr	r2, [r7, #24]
 80005d0:	4013      	ands	r3, r2
 80005d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	091b      	lsrs	r3, r3, #4
 80005da:	f003 0201 	and.w	r2, r3, #1
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	69ba      	ldr	r2, [r7, #24]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	69ba      	ldr	r2, [r7, #24]
 80005ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	f003 0303 	and.w	r3, r3, #3
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d017      	beq.n	800062c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	2203      	movs	r2, #3
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	43db      	mvns	r3, r3
 800060e:	69ba      	ldr	r2, [r7, #24]
 8000610:	4013      	ands	r3, r2
 8000612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	689a      	ldr	r2, [r3, #8]
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	69ba      	ldr	r2, [r7, #24]
 8000622:	4313      	orrs	r3, r2
 8000624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	69ba      	ldr	r2, [r7, #24]
 800062a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f003 0303 	and.w	r3, r3, #3
 8000634:	2b02      	cmp	r3, #2
 8000636:	d123      	bne.n	8000680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	08da      	lsrs	r2, r3, #3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3208      	adds	r2, #8
 8000640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	f003 0307 	and.w	r3, r3, #7
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	220f      	movs	r2, #15
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	43db      	mvns	r3, r3
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	4013      	ands	r3, r2
 800065a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	691a      	ldr	r2, [r3, #16]
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	4313      	orrs	r3, r2
 8000670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	08da      	lsrs	r2, r3, #3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3208      	adds	r2, #8
 800067a:	69b9      	ldr	r1, [r7, #24]
 800067c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	2203      	movs	r2, #3
 800068c:	fa02 f303 	lsl.w	r3, r2, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	69ba      	ldr	r2, [r7, #24]
 8000694:	4013      	ands	r3, r2
 8000696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f003 0203 	and.w	r2, r3, #3
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	69ba      	ldr	r2, [r7, #24]
 80006b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	f000 80a2 	beq.w	8000806 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b57      	ldr	r3, [pc, #348]	@ (8000824 <HAL_GPIO_Init+0x2e8>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ca:	4a56      	ldr	r2, [pc, #344]	@ (8000824 <HAL_GPIO_Init+0x2e8>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006d2:	4b54      	ldr	r3, [pc, #336]	@ (8000824 <HAL_GPIO_Init+0x2e8>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80006de:	4a52      	ldr	r2, [pc, #328]	@ (8000828 <HAL_GPIO_Init+0x2ec>)
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	089b      	lsrs	r3, r3, #2
 80006e4:	3302      	adds	r3, #2
 80006e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	f003 0303 	and.w	r3, r3, #3
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	220f      	movs	r2, #15
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43db      	mvns	r3, r3
 80006fc:	69ba      	ldr	r2, [r7, #24]
 80006fe:	4013      	ands	r3, r2
 8000700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a49      	ldr	r2, [pc, #292]	@ (800082c <HAL_GPIO_Init+0x2f0>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d019      	beq.n	800073e <HAL_GPIO_Init+0x202>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a48      	ldr	r2, [pc, #288]	@ (8000830 <HAL_GPIO_Init+0x2f4>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d013      	beq.n	800073a <HAL_GPIO_Init+0x1fe>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a47      	ldr	r2, [pc, #284]	@ (8000834 <HAL_GPIO_Init+0x2f8>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d00d      	beq.n	8000736 <HAL_GPIO_Init+0x1fa>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a46      	ldr	r2, [pc, #280]	@ (8000838 <HAL_GPIO_Init+0x2fc>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d007      	beq.n	8000732 <HAL_GPIO_Init+0x1f6>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a45      	ldr	r2, [pc, #276]	@ (800083c <HAL_GPIO_Init+0x300>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d101      	bne.n	800072e <HAL_GPIO_Init+0x1f2>
 800072a:	2304      	movs	r3, #4
 800072c:	e008      	b.n	8000740 <HAL_GPIO_Init+0x204>
 800072e:	2307      	movs	r3, #7
 8000730:	e006      	b.n	8000740 <HAL_GPIO_Init+0x204>
 8000732:	2303      	movs	r3, #3
 8000734:	e004      	b.n	8000740 <HAL_GPIO_Init+0x204>
 8000736:	2302      	movs	r3, #2
 8000738:	e002      	b.n	8000740 <HAL_GPIO_Init+0x204>
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <HAL_GPIO_Init+0x204>
 800073e:	2300      	movs	r3, #0
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	f002 0203 	and.w	r2, r2, #3
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	4093      	lsls	r3, r2
 800074a:	69ba      	ldr	r2, [r7, #24]
 800074c:	4313      	orrs	r3, r2
 800074e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000750:	4935      	ldr	r1, [pc, #212]	@ (8000828 <HAL_GPIO_Init+0x2ec>)
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	089b      	lsrs	r3, r3, #2
 8000756:	3302      	adds	r3, #2
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800075e:	4b38      	ldr	r3, [pc, #224]	@ (8000840 <HAL_GPIO_Init+0x304>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	43db      	mvns	r3, r3
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	4013      	ands	r3, r2
 800076c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800077a:	69ba      	ldr	r2, [r7, #24]
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	4313      	orrs	r3, r2
 8000780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000782:	4a2f      	ldr	r2, [pc, #188]	@ (8000840 <HAL_GPIO_Init+0x304>)
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000788:	4b2d      	ldr	r3, [pc, #180]	@ (8000840 <HAL_GPIO_Init+0x304>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	43db      	mvns	r3, r3
 8000792:	69ba      	ldr	r2, [r7, #24]
 8000794:	4013      	ands	r3, r2
 8000796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d003      	beq.n	80007ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007ac:	4a24      	ldr	r2, [pc, #144]	@ (8000840 <HAL_GPIO_Init+0x304>)
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80007b2:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <HAL_GPIO_Init+0x304>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	43db      	mvns	r3, r3
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	4013      	ands	r3, r2
 80007c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80007ce:	69ba      	ldr	r2, [r7, #24]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80007d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000840 <HAL_GPIO_Init+0x304>)
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <HAL_GPIO_Init+0x304>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	43db      	mvns	r3, r3
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	4013      	ands	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d003      	beq.n	8000800 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000800:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <HAL_GPIO_Init+0x304>)
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3301      	adds	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	2b0f      	cmp	r3, #15
 8000810:	f67f aea2 	bls.w	8000558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3724      	adds	r7, #36	@ 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40013800 	.word	0x40013800
 800082c:	40020000 	.word	0x40020000
 8000830:	40020400 	.word	0x40020400
 8000834:	40020800 	.word	0x40020800
 8000838:	40020c00 	.word	0x40020c00
 800083c:	40021000 	.word	0x40021000
 8000840:	40013c00 	.word	0x40013c00

08000844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	807b      	strh	r3, [r7, #2]
 8000850:	4613      	mov	r3, r2
 8000852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000854:	787b      	ldrb	r3, [r7, #1]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800085a:	887a      	ldrh	r2, [r7, #2]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000860:	e003      	b.n	800086a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000862:	887b      	ldrh	r3, [r7, #2]
 8000864:	041a      	lsls	r2, r3, #16
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	619a      	str	r2, [r3, #24]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <siprintf>:
 8000878:	b40e      	push	{r1, r2, r3}
 800087a:	b500      	push	{lr}
 800087c:	b09c      	sub	sp, #112	@ 0x70
 800087e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000880:	9002      	str	r0, [sp, #8]
 8000882:	9006      	str	r0, [sp, #24]
 8000884:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <siprintf+0x38>)
 800088a:	9107      	str	r1, [sp, #28]
 800088c:	9104      	str	r1, [sp, #16]
 800088e:	4909      	ldr	r1, [pc, #36]	@ (80008b4 <siprintf+0x3c>)
 8000890:	f853 2b04 	ldr.w	r2, [r3], #4
 8000894:	9105      	str	r1, [sp, #20]
 8000896:	6800      	ldr	r0, [r0, #0]
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	a902      	add	r1, sp, #8
 800089c:	f000 f986 	bl	8000bac <_svfiprintf_r>
 80008a0:	9b02      	ldr	r3, [sp, #8]
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	b01c      	add	sp, #112	@ 0x70
 80008a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80008ac:	b003      	add	sp, #12
 80008ae:	4770      	bx	lr
 80008b0:	20000000 	.word	0x20000000
 80008b4:	ffff0208 	.word	0xffff0208

080008b8 <__libc_init_array>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4d0d      	ldr	r5, [pc, #52]	@ (80008f0 <__libc_init_array+0x38>)
 80008bc:	4c0d      	ldr	r4, [pc, #52]	@ (80008f4 <__libc_init_array+0x3c>)
 80008be:	1b64      	subs	r4, r4, r5
 80008c0:	10a4      	asrs	r4, r4, #2
 80008c2:	2600      	movs	r6, #0
 80008c4:	42a6      	cmp	r6, r4
 80008c6:	d109      	bne.n	80008dc <__libc_init_array+0x24>
 80008c8:	4d0b      	ldr	r5, [pc, #44]	@ (80008f8 <__libc_init_array+0x40>)
 80008ca:	4c0c      	ldr	r4, [pc, #48]	@ (80008fc <__libc_init_array+0x44>)
 80008cc:	f000 fc74 	bl	80011b8 <_init>
 80008d0:	1b64      	subs	r4, r4, r5
 80008d2:	10a4      	asrs	r4, r4, #2
 80008d4:	2600      	movs	r6, #0
 80008d6:	42a6      	cmp	r6, r4
 80008d8:	d105      	bne.n	80008e6 <__libc_init_array+0x2e>
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e0:	4798      	blx	r3
 80008e2:	3601      	adds	r6, #1
 80008e4:	e7ee      	b.n	80008c4 <__libc_init_array+0xc>
 80008e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ea:	4798      	blx	r3
 80008ec:	3601      	adds	r6, #1
 80008ee:	e7f2      	b.n	80008d6 <__libc_init_array+0x1e>
 80008f0:	0800121c 	.word	0x0800121c
 80008f4:	0800121c 	.word	0x0800121c
 80008f8:	0800121c 	.word	0x0800121c
 80008fc:	08001220 	.word	0x08001220

08000900 <__retarget_lock_acquire_recursive>:
 8000900:	4770      	bx	lr

08000902 <__retarget_lock_release_recursive>:
 8000902:	4770      	bx	lr

08000904 <_free_r>:
 8000904:	b538      	push	{r3, r4, r5, lr}
 8000906:	4605      	mov	r5, r0
 8000908:	2900      	cmp	r1, #0
 800090a:	d041      	beq.n	8000990 <_free_r+0x8c>
 800090c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000910:	1f0c      	subs	r4, r1, #4
 8000912:	2b00      	cmp	r3, #0
 8000914:	bfb8      	it	lt
 8000916:	18e4      	addlt	r4, r4, r3
 8000918:	f000 f8e0 	bl	8000adc <__malloc_lock>
 800091c:	4a1d      	ldr	r2, [pc, #116]	@ (8000994 <_free_r+0x90>)
 800091e:	6813      	ldr	r3, [r2, #0]
 8000920:	b933      	cbnz	r3, 8000930 <_free_r+0x2c>
 8000922:	6063      	str	r3, [r4, #4]
 8000924:	6014      	str	r4, [r2, #0]
 8000926:	4628      	mov	r0, r5
 8000928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800092c:	f000 b8dc 	b.w	8000ae8 <__malloc_unlock>
 8000930:	42a3      	cmp	r3, r4
 8000932:	d908      	bls.n	8000946 <_free_r+0x42>
 8000934:	6820      	ldr	r0, [r4, #0]
 8000936:	1821      	adds	r1, r4, r0
 8000938:	428b      	cmp	r3, r1
 800093a:	bf01      	itttt	eq
 800093c:	6819      	ldreq	r1, [r3, #0]
 800093e:	685b      	ldreq	r3, [r3, #4]
 8000940:	1809      	addeq	r1, r1, r0
 8000942:	6021      	streq	r1, [r4, #0]
 8000944:	e7ed      	b.n	8000922 <_free_r+0x1e>
 8000946:	461a      	mov	r2, r3
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	b10b      	cbz	r3, 8000950 <_free_r+0x4c>
 800094c:	42a3      	cmp	r3, r4
 800094e:	d9fa      	bls.n	8000946 <_free_r+0x42>
 8000950:	6811      	ldr	r1, [r2, #0]
 8000952:	1850      	adds	r0, r2, r1
 8000954:	42a0      	cmp	r0, r4
 8000956:	d10b      	bne.n	8000970 <_free_r+0x6c>
 8000958:	6820      	ldr	r0, [r4, #0]
 800095a:	4401      	add	r1, r0
 800095c:	1850      	adds	r0, r2, r1
 800095e:	4283      	cmp	r3, r0
 8000960:	6011      	str	r1, [r2, #0]
 8000962:	d1e0      	bne.n	8000926 <_free_r+0x22>
 8000964:	6818      	ldr	r0, [r3, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	6053      	str	r3, [r2, #4]
 800096a:	4408      	add	r0, r1
 800096c:	6010      	str	r0, [r2, #0]
 800096e:	e7da      	b.n	8000926 <_free_r+0x22>
 8000970:	d902      	bls.n	8000978 <_free_r+0x74>
 8000972:	230c      	movs	r3, #12
 8000974:	602b      	str	r3, [r5, #0]
 8000976:	e7d6      	b.n	8000926 <_free_r+0x22>
 8000978:	6820      	ldr	r0, [r4, #0]
 800097a:	1821      	adds	r1, r4, r0
 800097c:	428b      	cmp	r3, r1
 800097e:	bf04      	itt	eq
 8000980:	6819      	ldreq	r1, [r3, #0]
 8000982:	685b      	ldreq	r3, [r3, #4]
 8000984:	6063      	str	r3, [r4, #4]
 8000986:	bf04      	itt	eq
 8000988:	1809      	addeq	r1, r1, r0
 800098a:	6021      	streq	r1, [r4, #0]
 800098c:	6054      	str	r4, [r2, #4]
 800098e:	e7ca      	b.n	8000926 <_free_r+0x22>
 8000990:	bd38      	pop	{r3, r4, r5, pc}
 8000992:	bf00      	nop
 8000994:	200001b0 	.word	0x200001b0

08000998 <sbrk_aligned>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4e0f      	ldr	r6, [pc, #60]	@ (80009d8 <sbrk_aligned+0x40>)
 800099c:	460c      	mov	r4, r1
 800099e:	6831      	ldr	r1, [r6, #0]
 80009a0:	4605      	mov	r5, r0
 80009a2:	b911      	cbnz	r1, 80009aa <sbrk_aligned+0x12>
 80009a4:	f000 fba6 	bl	80010f4 <_sbrk_r>
 80009a8:	6030      	str	r0, [r6, #0]
 80009aa:	4621      	mov	r1, r4
 80009ac:	4628      	mov	r0, r5
 80009ae:	f000 fba1 	bl	80010f4 <_sbrk_r>
 80009b2:	1c43      	adds	r3, r0, #1
 80009b4:	d103      	bne.n	80009be <sbrk_aligned+0x26>
 80009b6:	f04f 34ff 	mov.w	r4, #4294967295
 80009ba:	4620      	mov	r0, r4
 80009bc:	bd70      	pop	{r4, r5, r6, pc}
 80009be:	1cc4      	adds	r4, r0, #3
 80009c0:	f024 0403 	bic.w	r4, r4, #3
 80009c4:	42a0      	cmp	r0, r4
 80009c6:	d0f8      	beq.n	80009ba <sbrk_aligned+0x22>
 80009c8:	1a21      	subs	r1, r4, r0
 80009ca:	4628      	mov	r0, r5
 80009cc:	f000 fb92 	bl	80010f4 <_sbrk_r>
 80009d0:	3001      	adds	r0, #1
 80009d2:	d1f2      	bne.n	80009ba <sbrk_aligned+0x22>
 80009d4:	e7ef      	b.n	80009b6 <sbrk_aligned+0x1e>
 80009d6:	bf00      	nop
 80009d8:	200001ac 	.word	0x200001ac

080009dc <_malloc_r>:
 80009dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e0:	1ccd      	adds	r5, r1, #3
 80009e2:	f025 0503 	bic.w	r5, r5, #3
 80009e6:	3508      	adds	r5, #8
 80009e8:	2d0c      	cmp	r5, #12
 80009ea:	bf38      	it	cc
 80009ec:	250c      	movcc	r5, #12
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	4606      	mov	r6, r0
 80009f2:	db01      	blt.n	80009f8 <_malloc_r+0x1c>
 80009f4:	42a9      	cmp	r1, r5
 80009f6:	d904      	bls.n	8000a02 <_malloc_r+0x26>
 80009f8:	230c      	movs	r3, #12
 80009fa:	6033      	str	r3, [r6, #0]
 80009fc:	2000      	movs	r0, #0
 80009fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ad8 <_malloc_r+0xfc>
 8000a06:	f000 f869 	bl	8000adc <__malloc_lock>
 8000a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a0e:	461c      	mov	r4, r3
 8000a10:	bb44      	cbnz	r4, 8000a64 <_malloc_r+0x88>
 8000a12:	4629      	mov	r1, r5
 8000a14:	4630      	mov	r0, r6
 8000a16:	f7ff ffbf 	bl	8000998 <sbrk_aligned>
 8000a1a:	1c43      	adds	r3, r0, #1
 8000a1c:	4604      	mov	r4, r0
 8000a1e:	d158      	bne.n	8000ad2 <_malloc_r+0xf6>
 8000a20:	f8d8 4000 	ldr.w	r4, [r8]
 8000a24:	4627      	mov	r7, r4
 8000a26:	2f00      	cmp	r7, #0
 8000a28:	d143      	bne.n	8000ab2 <_malloc_r+0xd6>
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d04b      	beq.n	8000ac6 <_malloc_r+0xea>
 8000a2e:	6823      	ldr	r3, [r4, #0]
 8000a30:	4639      	mov	r1, r7
 8000a32:	4630      	mov	r0, r6
 8000a34:	eb04 0903 	add.w	r9, r4, r3
 8000a38:	f000 fb5c 	bl	80010f4 <_sbrk_r>
 8000a3c:	4581      	cmp	r9, r0
 8000a3e:	d142      	bne.n	8000ac6 <_malloc_r+0xea>
 8000a40:	6821      	ldr	r1, [r4, #0]
 8000a42:	1a6d      	subs	r5, r5, r1
 8000a44:	4629      	mov	r1, r5
 8000a46:	4630      	mov	r0, r6
 8000a48:	f7ff ffa6 	bl	8000998 <sbrk_aligned>
 8000a4c:	3001      	adds	r0, #1
 8000a4e:	d03a      	beq.n	8000ac6 <_malloc_r+0xea>
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	442b      	add	r3, r5
 8000a54:	6023      	str	r3, [r4, #0]
 8000a56:	f8d8 3000 	ldr.w	r3, [r8]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	bb62      	cbnz	r2, 8000ab8 <_malloc_r+0xdc>
 8000a5e:	f8c8 7000 	str.w	r7, [r8]
 8000a62:	e00f      	b.n	8000a84 <_malloc_r+0xa8>
 8000a64:	6822      	ldr	r2, [r4, #0]
 8000a66:	1b52      	subs	r2, r2, r5
 8000a68:	d420      	bmi.n	8000aac <_malloc_r+0xd0>
 8000a6a:	2a0b      	cmp	r2, #11
 8000a6c:	d917      	bls.n	8000a9e <_malloc_r+0xc2>
 8000a6e:	1961      	adds	r1, r4, r5
 8000a70:	42a3      	cmp	r3, r4
 8000a72:	6025      	str	r5, [r4, #0]
 8000a74:	bf18      	it	ne
 8000a76:	6059      	strne	r1, [r3, #4]
 8000a78:	6863      	ldr	r3, [r4, #4]
 8000a7a:	bf08      	it	eq
 8000a7c:	f8c8 1000 	streq.w	r1, [r8]
 8000a80:	5162      	str	r2, [r4, r5]
 8000a82:	604b      	str	r3, [r1, #4]
 8000a84:	4630      	mov	r0, r6
 8000a86:	f000 f82f 	bl	8000ae8 <__malloc_unlock>
 8000a8a:	f104 000b 	add.w	r0, r4, #11
 8000a8e:	1d23      	adds	r3, r4, #4
 8000a90:	f020 0007 	bic.w	r0, r0, #7
 8000a94:	1ac2      	subs	r2, r0, r3
 8000a96:	bf1c      	itt	ne
 8000a98:	1a1b      	subne	r3, r3, r0
 8000a9a:	50a3      	strne	r3, [r4, r2]
 8000a9c:	e7af      	b.n	80009fe <_malloc_r+0x22>
 8000a9e:	6862      	ldr	r2, [r4, #4]
 8000aa0:	42a3      	cmp	r3, r4
 8000aa2:	bf0c      	ite	eq
 8000aa4:	f8c8 2000 	streq.w	r2, [r8]
 8000aa8:	605a      	strne	r2, [r3, #4]
 8000aaa:	e7eb      	b.n	8000a84 <_malloc_r+0xa8>
 8000aac:	4623      	mov	r3, r4
 8000aae:	6864      	ldr	r4, [r4, #4]
 8000ab0:	e7ae      	b.n	8000a10 <_malloc_r+0x34>
 8000ab2:	463c      	mov	r4, r7
 8000ab4:	687f      	ldr	r7, [r7, #4]
 8000ab6:	e7b6      	b.n	8000a26 <_malloc_r+0x4a>
 8000ab8:	461a      	mov	r2, r3
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	42a3      	cmp	r3, r4
 8000abe:	d1fb      	bne.n	8000ab8 <_malloc_r+0xdc>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	6053      	str	r3, [r2, #4]
 8000ac4:	e7de      	b.n	8000a84 <_malloc_r+0xa8>
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	6033      	str	r3, [r6, #0]
 8000aca:	4630      	mov	r0, r6
 8000acc:	f000 f80c 	bl	8000ae8 <__malloc_unlock>
 8000ad0:	e794      	b.n	80009fc <_malloc_r+0x20>
 8000ad2:	6005      	str	r5, [r0, #0]
 8000ad4:	e7d6      	b.n	8000a84 <_malloc_r+0xa8>
 8000ad6:	bf00      	nop
 8000ad8:	200001b0 	.word	0x200001b0

08000adc <__malloc_lock>:
 8000adc:	4801      	ldr	r0, [pc, #4]	@ (8000ae4 <__malloc_lock+0x8>)
 8000ade:	f7ff bf0f 	b.w	8000900 <__retarget_lock_acquire_recursive>
 8000ae2:	bf00      	nop
 8000ae4:	200001a8 	.word	0x200001a8

08000ae8 <__malloc_unlock>:
 8000ae8:	4801      	ldr	r0, [pc, #4]	@ (8000af0 <__malloc_unlock+0x8>)
 8000aea:	f7ff bf0a 	b.w	8000902 <__retarget_lock_release_recursive>
 8000aee:	bf00      	nop
 8000af0:	200001a8 	.word	0x200001a8

08000af4 <__ssputs_r>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	688e      	ldr	r6, [r1, #8]
 8000afa:	461f      	mov	r7, r3
 8000afc:	42be      	cmp	r6, r7
 8000afe:	680b      	ldr	r3, [r1, #0]
 8000b00:	4682      	mov	sl, r0
 8000b02:	460c      	mov	r4, r1
 8000b04:	4690      	mov	r8, r2
 8000b06:	d82d      	bhi.n	8000b64 <__ssputs_r+0x70>
 8000b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000b10:	d026      	beq.n	8000b60 <__ssputs_r+0x6c>
 8000b12:	6965      	ldr	r5, [r4, #20]
 8000b14:	6909      	ldr	r1, [r1, #16]
 8000b16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b1a:	eba3 0901 	sub.w	r9, r3, r1
 8000b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b22:	1c7b      	adds	r3, r7, #1
 8000b24:	444b      	add	r3, r9
 8000b26:	106d      	asrs	r5, r5, #1
 8000b28:	429d      	cmp	r5, r3
 8000b2a:	bf38      	it	cc
 8000b2c:	461d      	movcc	r5, r3
 8000b2e:	0553      	lsls	r3, r2, #21
 8000b30:	d527      	bpl.n	8000b82 <__ssputs_r+0x8e>
 8000b32:	4629      	mov	r1, r5
 8000b34:	f7ff ff52 	bl	80009dc <_malloc_r>
 8000b38:	4606      	mov	r6, r0
 8000b3a:	b360      	cbz	r0, 8000b96 <__ssputs_r+0xa2>
 8000b3c:	6921      	ldr	r1, [r4, #16]
 8000b3e:	464a      	mov	r2, r9
 8000b40:	f000 fae8 	bl	8001114 <memcpy>
 8000b44:	89a3      	ldrh	r3, [r4, #12]
 8000b46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b4e:	81a3      	strh	r3, [r4, #12]
 8000b50:	6126      	str	r6, [r4, #16]
 8000b52:	6165      	str	r5, [r4, #20]
 8000b54:	444e      	add	r6, r9
 8000b56:	eba5 0509 	sub.w	r5, r5, r9
 8000b5a:	6026      	str	r6, [r4, #0]
 8000b5c:	60a5      	str	r5, [r4, #8]
 8000b5e:	463e      	mov	r6, r7
 8000b60:	42be      	cmp	r6, r7
 8000b62:	d900      	bls.n	8000b66 <__ssputs_r+0x72>
 8000b64:	463e      	mov	r6, r7
 8000b66:	6820      	ldr	r0, [r4, #0]
 8000b68:	4632      	mov	r2, r6
 8000b6a:	4641      	mov	r1, r8
 8000b6c:	f000 faa8 	bl	80010c0 <memmove>
 8000b70:	68a3      	ldr	r3, [r4, #8]
 8000b72:	1b9b      	subs	r3, r3, r6
 8000b74:	60a3      	str	r3, [r4, #8]
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	4433      	add	r3, r6
 8000b7a:	6023      	str	r3, [r4, #0]
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	462a      	mov	r2, r5
 8000b84:	f000 fad4 	bl	8001130 <_realloc_r>
 8000b88:	4606      	mov	r6, r0
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d1e0      	bne.n	8000b50 <__ssputs_r+0x5c>
 8000b8e:	6921      	ldr	r1, [r4, #16]
 8000b90:	4650      	mov	r0, sl
 8000b92:	f7ff feb7 	bl	8000904 <_free_r>
 8000b96:	230c      	movs	r3, #12
 8000b98:	f8ca 3000 	str.w	r3, [sl]
 8000b9c:	89a3      	ldrh	r3, [r4, #12]
 8000b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba2:	81a3      	strh	r3, [r4, #12]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	e7e9      	b.n	8000b7e <__ssputs_r+0x8a>
	...

08000bac <_svfiprintf_r>:
 8000bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bb0:	4698      	mov	r8, r3
 8000bb2:	898b      	ldrh	r3, [r1, #12]
 8000bb4:	061b      	lsls	r3, r3, #24
 8000bb6:	b09d      	sub	sp, #116	@ 0x74
 8000bb8:	4607      	mov	r7, r0
 8000bba:	460d      	mov	r5, r1
 8000bbc:	4614      	mov	r4, r2
 8000bbe:	d510      	bpl.n	8000be2 <_svfiprintf_r+0x36>
 8000bc0:	690b      	ldr	r3, [r1, #16]
 8000bc2:	b973      	cbnz	r3, 8000be2 <_svfiprintf_r+0x36>
 8000bc4:	2140      	movs	r1, #64	@ 0x40
 8000bc6:	f7ff ff09 	bl	80009dc <_malloc_r>
 8000bca:	6028      	str	r0, [r5, #0]
 8000bcc:	6128      	str	r0, [r5, #16]
 8000bce:	b930      	cbnz	r0, 8000bde <_svfiprintf_r+0x32>
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	b01d      	add	sp, #116	@ 0x74
 8000bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bde:	2340      	movs	r3, #64	@ 0x40
 8000be0:	616b      	str	r3, [r5, #20]
 8000be2:	2300      	movs	r3, #0
 8000be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000be6:	2320      	movs	r3, #32
 8000be8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bf0:	2330      	movs	r3, #48	@ 0x30
 8000bf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000d90 <_svfiprintf_r+0x1e4>
 8000bf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000bfa:	f04f 0901 	mov.w	r9, #1
 8000bfe:	4623      	mov	r3, r4
 8000c00:	469a      	mov	sl, r3
 8000c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c06:	b10a      	cbz	r2, 8000c0c <_svfiprintf_r+0x60>
 8000c08:	2a25      	cmp	r2, #37	@ 0x25
 8000c0a:	d1f9      	bne.n	8000c00 <_svfiprintf_r+0x54>
 8000c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8000c10:	d00b      	beq.n	8000c2a <_svfiprintf_r+0x7e>
 8000c12:	465b      	mov	r3, fp
 8000c14:	4622      	mov	r2, r4
 8000c16:	4629      	mov	r1, r5
 8000c18:	4638      	mov	r0, r7
 8000c1a:	f7ff ff6b 	bl	8000af4 <__ssputs_r>
 8000c1e:	3001      	adds	r0, #1
 8000c20:	f000 80a7 	beq.w	8000d72 <_svfiprintf_r+0x1c6>
 8000c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c26:	445a      	add	r2, fp
 8000c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 809f 	beq.w	8000d72 <_svfiprintf_r+0x1c6>
 8000c34:	2300      	movs	r3, #0
 8000c36:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c3e:	f10a 0a01 	add.w	sl, sl, #1
 8000c42:	9304      	str	r3, [sp, #16]
 8000c44:	9307      	str	r3, [sp, #28]
 8000c46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c4c:	4654      	mov	r4, sl
 8000c4e:	2205      	movs	r2, #5
 8000c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c54:	484e      	ldr	r0, [pc, #312]	@ (8000d90 <_svfiprintf_r+0x1e4>)
 8000c56:	f7ff fac3 	bl	80001e0 <memchr>
 8000c5a:	9a04      	ldr	r2, [sp, #16]
 8000c5c:	b9d8      	cbnz	r0, 8000c96 <_svfiprintf_r+0xea>
 8000c5e:	06d0      	lsls	r0, r2, #27
 8000c60:	bf44      	itt	mi
 8000c62:	2320      	movmi	r3, #32
 8000c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c68:	0711      	lsls	r1, r2, #28
 8000c6a:	bf44      	itt	mi
 8000c6c:	232b      	movmi	r3, #43	@ 0x2b
 8000c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c72:	f89a 3000 	ldrb.w	r3, [sl]
 8000c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c78:	d015      	beq.n	8000ca6 <_svfiprintf_r+0xfa>
 8000c7a:	9a07      	ldr	r2, [sp, #28]
 8000c7c:	4654      	mov	r4, sl
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f04f 0c0a 	mov.w	ip, #10
 8000c84:	4621      	mov	r1, r4
 8000c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c8a:	3b30      	subs	r3, #48	@ 0x30
 8000c8c:	2b09      	cmp	r3, #9
 8000c8e:	d94b      	bls.n	8000d28 <_svfiprintf_r+0x17c>
 8000c90:	b1b0      	cbz	r0, 8000cc0 <_svfiprintf_r+0x114>
 8000c92:	9207      	str	r2, [sp, #28]
 8000c94:	e014      	b.n	8000cc0 <_svfiprintf_r+0x114>
 8000c96:	eba0 0308 	sub.w	r3, r0, r8
 8000c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	9304      	str	r3, [sp, #16]
 8000ca2:	46a2      	mov	sl, r4
 8000ca4:	e7d2      	b.n	8000c4c <_svfiprintf_r+0xa0>
 8000ca6:	9b03      	ldr	r3, [sp, #12]
 8000ca8:	1d19      	adds	r1, r3, #4
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	9103      	str	r1, [sp, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bfbb      	ittet	lt
 8000cb2:	425b      	neglt	r3, r3
 8000cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8000cb8:	9307      	strge	r3, [sp, #28]
 8000cba:	9307      	strlt	r3, [sp, #28]
 8000cbc:	bfb8      	it	lt
 8000cbe:	9204      	strlt	r2, [sp, #16]
 8000cc0:	7823      	ldrb	r3, [r4, #0]
 8000cc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cc4:	d10a      	bne.n	8000cdc <_svfiprintf_r+0x130>
 8000cc6:	7863      	ldrb	r3, [r4, #1]
 8000cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cca:	d132      	bne.n	8000d32 <_svfiprintf_r+0x186>
 8000ccc:	9b03      	ldr	r3, [sp, #12]
 8000cce:	1d1a      	adds	r2, r3, #4
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	9203      	str	r2, [sp, #12]
 8000cd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000cd8:	3402      	adds	r4, #2
 8000cda:	9305      	str	r3, [sp, #20]
 8000cdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000da0 <_svfiprintf_r+0x1f4>
 8000ce0:	7821      	ldrb	r1, [r4, #0]
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	4650      	mov	r0, sl
 8000ce6:	f7ff fa7b 	bl	80001e0 <memchr>
 8000cea:	b138      	cbz	r0, 8000cfc <_svfiprintf_r+0x150>
 8000cec:	9b04      	ldr	r3, [sp, #16]
 8000cee:	eba0 000a 	sub.w	r0, r0, sl
 8000cf2:	2240      	movs	r2, #64	@ 0x40
 8000cf4:	4082      	lsls	r2, r0
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	3401      	adds	r4, #1
 8000cfa:	9304      	str	r3, [sp, #16]
 8000cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d00:	4824      	ldr	r0, [pc, #144]	@ (8000d94 <_svfiprintf_r+0x1e8>)
 8000d02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d06:	2206      	movs	r2, #6
 8000d08:	f7ff fa6a 	bl	80001e0 <memchr>
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d036      	beq.n	8000d7e <_svfiprintf_r+0x1d2>
 8000d10:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <_svfiprintf_r+0x1ec>)
 8000d12:	bb1b      	cbnz	r3, 8000d5c <_svfiprintf_r+0x1b0>
 8000d14:	9b03      	ldr	r3, [sp, #12]
 8000d16:	3307      	adds	r3, #7
 8000d18:	f023 0307 	bic.w	r3, r3, #7
 8000d1c:	3308      	adds	r3, #8
 8000d1e:	9303      	str	r3, [sp, #12]
 8000d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d22:	4433      	add	r3, r6
 8000d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d26:	e76a      	b.n	8000bfe <_svfiprintf_r+0x52>
 8000d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d2c:	460c      	mov	r4, r1
 8000d2e:	2001      	movs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <_svfiprintf_r+0xd8>
 8000d32:	2300      	movs	r3, #0
 8000d34:	3401      	adds	r4, #1
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 0c0a 	mov.w	ip, #10
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d44:	3a30      	subs	r2, #48	@ 0x30
 8000d46:	2a09      	cmp	r2, #9
 8000d48:	d903      	bls.n	8000d52 <_svfiprintf_r+0x1a6>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0c6      	beq.n	8000cdc <_svfiprintf_r+0x130>
 8000d4e:	9105      	str	r1, [sp, #20]
 8000d50:	e7c4      	b.n	8000cdc <_svfiprintf_r+0x130>
 8000d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d56:	4604      	mov	r4, r0
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e7f0      	b.n	8000d3e <_svfiprintf_r+0x192>
 8000d5c:	ab03      	add	r3, sp, #12
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	462a      	mov	r2, r5
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <_svfiprintf_r+0x1f0>)
 8000d64:	a904      	add	r1, sp, #16
 8000d66:	4638      	mov	r0, r7
 8000d68:	f3af 8000 	nop.w
 8000d6c:	1c42      	adds	r2, r0, #1
 8000d6e:	4606      	mov	r6, r0
 8000d70:	d1d6      	bne.n	8000d20 <_svfiprintf_r+0x174>
 8000d72:	89ab      	ldrh	r3, [r5, #12]
 8000d74:	065b      	lsls	r3, r3, #25
 8000d76:	f53f af2d 	bmi.w	8000bd4 <_svfiprintf_r+0x28>
 8000d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d7c:	e72c      	b.n	8000bd8 <_svfiprintf_r+0x2c>
 8000d7e:	ab03      	add	r3, sp, #12
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	462a      	mov	r2, r5
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <_svfiprintf_r+0x1f0>)
 8000d86:	a904      	add	r1, sp, #16
 8000d88:	4638      	mov	r0, r7
 8000d8a:	f000 f879 	bl	8000e80 <_printf_i>
 8000d8e:	e7ed      	b.n	8000d6c <_svfiprintf_r+0x1c0>
 8000d90:	080011e1 	.word	0x080011e1
 8000d94:	080011eb 	.word	0x080011eb
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	08000af5 	.word	0x08000af5
 8000da0:	080011e7 	.word	0x080011e7

08000da4 <_printf_common>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	4616      	mov	r6, r2
 8000daa:	4698      	mov	r8, r3
 8000dac:	688a      	ldr	r2, [r1, #8]
 8000dae:	690b      	ldr	r3, [r1, #16]
 8000db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000db4:	4293      	cmp	r3, r2
 8000db6:	bfb8      	it	lt
 8000db8:	4613      	movlt	r3, r2
 8000dba:	6033      	str	r3, [r6, #0]
 8000dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000dc0:	4607      	mov	r7, r0
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	b10a      	cbz	r2, 8000dca <_printf_common+0x26>
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	6033      	str	r3, [r6, #0]
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	0699      	lsls	r1, r3, #26
 8000dce:	bf42      	ittt	mi
 8000dd0:	6833      	ldrmi	r3, [r6, #0]
 8000dd2:	3302      	addmi	r3, #2
 8000dd4:	6033      	strmi	r3, [r6, #0]
 8000dd6:	6825      	ldr	r5, [r4, #0]
 8000dd8:	f015 0506 	ands.w	r5, r5, #6
 8000ddc:	d106      	bne.n	8000dec <_printf_common+0x48>
 8000dde:	f104 0a19 	add.w	sl, r4, #25
 8000de2:	68e3      	ldr	r3, [r4, #12]
 8000de4:	6832      	ldr	r2, [r6, #0]
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	dc26      	bgt.n	8000e3a <_printf_common+0x96>
 8000dec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000df0:	6822      	ldr	r2, [r4, #0]
 8000df2:	3b00      	subs	r3, #0
 8000df4:	bf18      	it	ne
 8000df6:	2301      	movne	r3, #1
 8000df8:	0692      	lsls	r2, r2, #26
 8000dfa:	d42b      	bmi.n	8000e54 <_printf_common+0xb0>
 8000dfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e00:	4641      	mov	r1, r8
 8000e02:	4638      	mov	r0, r7
 8000e04:	47c8      	blx	r9
 8000e06:	3001      	adds	r0, #1
 8000e08:	d01e      	beq.n	8000e48 <_printf_common+0xa4>
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	6922      	ldr	r2, [r4, #16]
 8000e0e:	f003 0306 	and.w	r3, r3, #6
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf02      	ittt	eq
 8000e16:	68e5      	ldreq	r5, [r4, #12]
 8000e18:	6833      	ldreq	r3, [r6, #0]
 8000e1a:	1aed      	subeq	r5, r5, r3
 8000e1c:	68a3      	ldr	r3, [r4, #8]
 8000e1e:	bf0c      	ite	eq
 8000e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e24:	2500      	movne	r5, #0
 8000e26:	4293      	cmp	r3, r2
 8000e28:	bfc4      	itt	gt
 8000e2a:	1a9b      	subgt	r3, r3, r2
 8000e2c:	18ed      	addgt	r5, r5, r3
 8000e2e:	2600      	movs	r6, #0
 8000e30:	341a      	adds	r4, #26
 8000e32:	42b5      	cmp	r5, r6
 8000e34:	d11a      	bne.n	8000e6c <_printf_common+0xc8>
 8000e36:	2000      	movs	r0, #0
 8000e38:	e008      	b.n	8000e4c <_printf_common+0xa8>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	4652      	mov	r2, sl
 8000e3e:	4641      	mov	r1, r8
 8000e40:	4638      	mov	r0, r7
 8000e42:	47c8      	blx	r9
 8000e44:	3001      	adds	r0, #1
 8000e46:	d103      	bne.n	8000e50 <_printf_common+0xac>
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e50:	3501      	adds	r5, #1
 8000e52:	e7c6      	b.n	8000de2 <_printf_common+0x3e>
 8000e54:	18e1      	adds	r1, r4, r3
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	2030      	movs	r0, #48	@ 0x30
 8000e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e5e:	4422      	add	r2, r4
 8000e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e68:	3302      	adds	r3, #2
 8000e6a:	e7c7      	b.n	8000dfc <_printf_common+0x58>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	4622      	mov	r2, r4
 8000e70:	4641      	mov	r1, r8
 8000e72:	4638      	mov	r0, r7
 8000e74:	47c8      	blx	r9
 8000e76:	3001      	adds	r0, #1
 8000e78:	d0e6      	beq.n	8000e48 <_printf_common+0xa4>
 8000e7a:	3601      	adds	r6, #1
 8000e7c:	e7d9      	b.n	8000e32 <_printf_common+0x8e>
	...

08000e80 <_printf_i>:
 8000e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e84:	7e0f      	ldrb	r7, [r1, #24]
 8000e86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e88:	2f78      	cmp	r7, #120	@ 0x78
 8000e8a:	4691      	mov	r9, r2
 8000e8c:	4680      	mov	r8, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	469a      	mov	sl, r3
 8000e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e96:	d807      	bhi.n	8000ea8 <_printf_i+0x28>
 8000e98:	2f62      	cmp	r7, #98	@ 0x62
 8000e9a:	d80a      	bhi.n	8000eb2 <_printf_i+0x32>
 8000e9c:	2f00      	cmp	r7, #0
 8000e9e:	f000 80d2 	beq.w	8001046 <_printf_i+0x1c6>
 8000ea2:	2f58      	cmp	r7, #88	@ 0x58
 8000ea4:	f000 80b9 	beq.w	800101a <_printf_i+0x19a>
 8000ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000eb0:	e03a      	b.n	8000f28 <_printf_i+0xa8>
 8000eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000eb6:	2b15      	cmp	r3, #21
 8000eb8:	d8f6      	bhi.n	8000ea8 <_printf_i+0x28>
 8000eba:	a101      	add	r1, pc, #4	@ (adr r1, 8000ec0 <_printf_i+0x40>)
 8000ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ec0:	08000f19 	.word	0x08000f19
 8000ec4:	08000f2d 	.word	0x08000f2d
 8000ec8:	08000ea9 	.word	0x08000ea9
 8000ecc:	08000ea9 	.word	0x08000ea9
 8000ed0:	08000ea9 	.word	0x08000ea9
 8000ed4:	08000ea9 	.word	0x08000ea9
 8000ed8:	08000f2d 	.word	0x08000f2d
 8000edc:	08000ea9 	.word	0x08000ea9
 8000ee0:	08000ea9 	.word	0x08000ea9
 8000ee4:	08000ea9 	.word	0x08000ea9
 8000ee8:	08000ea9 	.word	0x08000ea9
 8000eec:	0800102d 	.word	0x0800102d
 8000ef0:	08000f57 	.word	0x08000f57
 8000ef4:	08000fe7 	.word	0x08000fe7
 8000ef8:	08000ea9 	.word	0x08000ea9
 8000efc:	08000ea9 	.word	0x08000ea9
 8000f00:	0800104f 	.word	0x0800104f
 8000f04:	08000ea9 	.word	0x08000ea9
 8000f08:	08000f57 	.word	0x08000f57
 8000f0c:	08000ea9 	.word	0x08000ea9
 8000f10:	08000ea9 	.word	0x08000ea9
 8000f14:	08000fef 	.word	0x08000fef
 8000f18:	6833      	ldr	r3, [r6, #0]
 8000f1a:	1d1a      	adds	r2, r3, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6032      	str	r2, [r6, #0]
 8000f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e09d      	b.n	8001068 <_printf_i+0x1e8>
 8000f2c:	6833      	ldr	r3, [r6, #0]
 8000f2e:	6820      	ldr	r0, [r4, #0]
 8000f30:	1d19      	adds	r1, r3, #4
 8000f32:	6031      	str	r1, [r6, #0]
 8000f34:	0606      	lsls	r6, r0, #24
 8000f36:	d501      	bpl.n	8000f3c <_printf_i+0xbc>
 8000f38:	681d      	ldr	r5, [r3, #0]
 8000f3a:	e003      	b.n	8000f44 <_printf_i+0xc4>
 8000f3c:	0645      	lsls	r5, r0, #25
 8000f3e:	d5fb      	bpl.n	8000f38 <_printf_i+0xb8>
 8000f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f44:	2d00      	cmp	r5, #0
 8000f46:	da03      	bge.n	8000f50 <_printf_i+0xd0>
 8000f48:	232d      	movs	r3, #45	@ 0x2d
 8000f4a:	426d      	negs	r5, r5
 8000f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f50:	4859      	ldr	r0, [pc, #356]	@ (80010b8 <_printf_i+0x238>)
 8000f52:	230a      	movs	r3, #10
 8000f54:	e011      	b.n	8000f7a <_printf_i+0xfa>
 8000f56:	6821      	ldr	r1, [r4, #0]
 8000f58:	6833      	ldr	r3, [r6, #0]
 8000f5a:	0608      	lsls	r0, r1, #24
 8000f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f60:	d402      	bmi.n	8000f68 <_printf_i+0xe8>
 8000f62:	0649      	lsls	r1, r1, #25
 8000f64:	bf48      	it	mi
 8000f66:	b2ad      	uxthmi	r5, r5
 8000f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f6a:	4853      	ldr	r0, [pc, #332]	@ (80010b8 <_printf_i+0x238>)
 8000f6c:	6033      	str	r3, [r6, #0]
 8000f6e:	bf14      	ite	ne
 8000f70:	230a      	movne	r3, #10
 8000f72:	2308      	moveq	r3, #8
 8000f74:	2100      	movs	r1, #0
 8000f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f7a:	6866      	ldr	r6, [r4, #4]
 8000f7c:	60a6      	str	r6, [r4, #8]
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	bfa2      	ittt	ge
 8000f82:	6821      	ldrge	r1, [r4, #0]
 8000f84:	f021 0104 	bicge.w	r1, r1, #4
 8000f88:	6021      	strge	r1, [r4, #0]
 8000f8a:	b90d      	cbnz	r5, 8000f90 <_printf_i+0x110>
 8000f8c:	2e00      	cmp	r6, #0
 8000f8e:	d04b      	beq.n	8001028 <_printf_i+0x1a8>
 8000f90:	4616      	mov	r6, r2
 8000f92:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f96:	fb03 5711 	mls	r7, r3, r1, r5
 8000f9a:	5dc7      	ldrb	r7, [r0, r7]
 8000f9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fa0:	462f      	mov	r7, r5
 8000fa2:	42bb      	cmp	r3, r7
 8000fa4:	460d      	mov	r5, r1
 8000fa6:	d9f4      	bls.n	8000f92 <_printf_i+0x112>
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d10b      	bne.n	8000fc4 <_printf_i+0x144>
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	07df      	lsls	r7, r3, #31
 8000fb0:	d508      	bpl.n	8000fc4 <_printf_i+0x144>
 8000fb2:	6923      	ldr	r3, [r4, #16]
 8000fb4:	6861      	ldr	r1, [r4, #4]
 8000fb6:	4299      	cmp	r1, r3
 8000fb8:	bfde      	ittt	le
 8000fba:	2330      	movle	r3, #48	@ 0x30
 8000fbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000fc4:	1b92      	subs	r2, r2, r6
 8000fc6:	6122      	str	r2, [r4, #16]
 8000fc8:	f8cd a000 	str.w	sl, [sp]
 8000fcc:	464b      	mov	r3, r9
 8000fce:	aa03      	add	r2, sp, #12
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	4640      	mov	r0, r8
 8000fd4:	f7ff fee6 	bl	8000da4 <_printf_common>
 8000fd8:	3001      	adds	r0, #1
 8000fda:	d14a      	bne.n	8001072 <_printf_i+0x1f2>
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	b004      	add	sp, #16
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	f043 0320 	orr.w	r3, r3, #32
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	4833      	ldr	r0, [pc, #204]	@ (80010bc <_printf_i+0x23c>)
 8000ff0:	2778      	movs	r7, #120	@ 0x78
 8000ff2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	6831      	ldr	r1, [r6, #0]
 8000ffa:	061f      	lsls	r7, r3, #24
 8000ffc:	f851 5b04 	ldr.w	r5, [r1], #4
 8001000:	d402      	bmi.n	8001008 <_printf_i+0x188>
 8001002:	065f      	lsls	r7, r3, #25
 8001004:	bf48      	it	mi
 8001006:	b2ad      	uxthmi	r5, r5
 8001008:	6031      	str	r1, [r6, #0]
 800100a:	07d9      	lsls	r1, r3, #31
 800100c:	bf44      	itt	mi
 800100e:	f043 0320 	orrmi.w	r3, r3, #32
 8001012:	6023      	strmi	r3, [r4, #0]
 8001014:	b11d      	cbz	r5, 800101e <_printf_i+0x19e>
 8001016:	2310      	movs	r3, #16
 8001018:	e7ac      	b.n	8000f74 <_printf_i+0xf4>
 800101a:	4827      	ldr	r0, [pc, #156]	@ (80010b8 <_printf_i+0x238>)
 800101c:	e7e9      	b.n	8000ff2 <_printf_i+0x172>
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	f023 0320 	bic.w	r3, r3, #32
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	e7f6      	b.n	8001016 <_printf_i+0x196>
 8001028:	4616      	mov	r6, r2
 800102a:	e7bd      	b.n	8000fa8 <_printf_i+0x128>
 800102c:	6833      	ldr	r3, [r6, #0]
 800102e:	6825      	ldr	r5, [r4, #0]
 8001030:	6961      	ldr	r1, [r4, #20]
 8001032:	1d18      	adds	r0, r3, #4
 8001034:	6030      	str	r0, [r6, #0]
 8001036:	062e      	lsls	r6, r5, #24
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	d501      	bpl.n	8001040 <_printf_i+0x1c0>
 800103c:	6019      	str	r1, [r3, #0]
 800103e:	e002      	b.n	8001046 <_printf_i+0x1c6>
 8001040:	0668      	lsls	r0, r5, #25
 8001042:	d5fb      	bpl.n	800103c <_printf_i+0x1bc>
 8001044:	8019      	strh	r1, [r3, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	6123      	str	r3, [r4, #16]
 800104a:	4616      	mov	r6, r2
 800104c:	e7bc      	b.n	8000fc8 <_printf_i+0x148>
 800104e:	6833      	ldr	r3, [r6, #0]
 8001050:	1d1a      	adds	r2, r3, #4
 8001052:	6032      	str	r2, [r6, #0]
 8001054:	681e      	ldr	r6, [r3, #0]
 8001056:	6862      	ldr	r2, [r4, #4]
 8001058:	2100      	movs	r1, #0
 800105a:	4630      	mov	r0, r6
 800105c:	f7ff f8c0 	bl	80001e0 <memchr>
 8001060:	b108      	cbz	r0, 8001066 <_printf_i+0x1e6>
 8001062:	1b80      	subs	r0, r0, r6
 8001064:	6060      	str	r0, [r4, #4]
 8001066:	6863      	ldr	r3, [r4, #4]
 8001068:	6123      	str	r3, [r4, #16]
 800106a:	2300      	movs	r3, #0
 800106c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001070:	e7aa      	b.n	8000fc8 <_printf_i+0x148>
 8001072:	6923      	ldr	r3, [r4, #16]
 8001074:	4632      	mov	r2, r6
 8001076:	4649      	mov	r1, r9
 8001078:	4640      	mov	r0, r8
 800107a:	47d0      	blx	sl
 800107c:	3001      	adds	r0, #1
 800107e:	d0ad      	beq.n	8000fdc <_printf_i+0x15c>
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	079b      	lsls	r3, r3, #30
 8001084:	d413      	bmi.n	80010ae <_printf_i+0x22e>
 8001086:	68e0      	ldr	r0, [r4, #12]
 8001088:	9b03      	ldr	r3, [sp, #12]
 800108a:	4298      	cmp	r0, r3
 800108c:	bfb8      	it	lt
 800108e:	4618      	movlt	r0, r3
 8001090:	e7a6      	b.n	8000fe0 <_printf_i+0x160>
 8001092:	2301      	movs	r3, #1
 8001094:	4632      	mov	r2, r6
 8001096:	4649      	mov	r1, r9
 8001098:	4640      	mov	r0, r8
 800109a:	47d0      	blx	sl
 800109c:	3001      	adds	r0, #1
 800109e:	d09d      	beq.n	8000fdc <_printf_i+0x15c>
 80010a0:	3501      	adds	r5, #1
 80010a2:	68e3      	ldr	r3, [r4, #12]
 80010a4:	9903      	ldr	r1, [sp, #12]
 80010a6:	1a5b      	subs	r3, r3, r1
 80010a8:	42ab      	cmp	r3, r5
 80010aa:	dcf2      	bgt.n	8001092 <_printf_i+0x212>
 80010ac:	e7eb      	b.n	8001086 <_printf_i+0x206>
 80010ae:	2500      	movs	r5, #0
 80010b0:	f104 0619 	add.w	r6, r4, #25
 80010b4:	e7f5      	b.n	80010a2 <_printf_i+0x222>
 80010b6:	bf00      	nop
 80010b8:	080011f2 	.word	0x080011f2
 80010bc:	08001203 	.word	0x08001203

080010c0 <memmove>:
 80010c0:	4288      	cmp	r0, r1
 80010c2:	b510      	push	{r4, lr}
 80010c4:	eb01 0402 	add.w	r4, r1, r2
 80010c8:	d902      	bls.n	80010d0 <memmove+0x10>
 80010ca:	4284      	cmp	r4, r0
 80010cc:	4623      	mov	r3, r4
 80010ce:	d807      	bhi.n	80010e0 <memmove+0x20>
 80010d0:	1e43      	subs	r3, r0, #1
 80010d2:	42a1      	cmp	r1, r4
 80010d4:	d008      	beq.n	80010e8 <memmove+0x28>
 80010d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80010da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80010de:	e7f8      	b.n	80010d2 <memmove+0x12>
 80010e0:	4402      	add	r2, r0
 80010e2:	4601      	mov	r1, r0
 80010e4:	428a      	cmp	r2, r1
 80010e6:	d100      	bne.n	80010ea <memmove+0x2a>
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80010ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80010f2:	e7f7      	b.n	80010e4 <memmove+0x24>

080010f4 <_sbrk_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4d06      	ldr	r5, [pc, #24]	@ (8001110 <_sbrk_r+0x1c>)
 80010f8:	2300      	movs	r3, #0
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	602b      	str	r3, [r5, #0]
 8001100:	f000 f84c 	bl	800119c <_sbrk>
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	d102      	bne.n	800110e <_sbrk_r+0x1a>
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	b103      	cbz	r3, 800110e <_sbrk_r+0x1a>
 800110c:	6023      	str	r3, [r4, #0]
 800110e:	bd38      	pop	{r3, r4, r5, pc}
 8001110:	200001a4 	.word	0x200001a4

08001114 <memcpy>:
 8001114:	440a      	add	r2, r1
 8001116:	4291      	cmp	r1, r2
 8001118:	f100 33ff 	add.w	r3, r0, #4294967295
 800111c:	d100      	bne.n	8001120 <memcpy+0xc>
 800111e:	4770      	bx	lr
 8001120:	b510      	push	{r4, lr}
 8001122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800112a:	4291      	cmp	r1, r2
 800112c:	d1f9      	bne.n	8001122 <memcpy+0xe>
 800112e:	bd10      	pop	{r4, pc}

08001130 <_realloc_r>:
 8001130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001134:	4680      	mov	r8, r0
 8001136:	4615      	mov	r5, r2
 8001138:	460c      	mov	r4, r1
 800113a:	b921      	cbnz	r1, 8001146 <_realloc_r+0x16>
 800113c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001140:	4611      	mov	r1, r2
 8001142:	f7ff bc4b 	b.w	80009dc <_malloc_r>
 8001146:	b92a      	cbnz	r2, 8001154 <_realloc_r+0x24>
 8001148:	f7ff fbdc 	bl	8000904 <_free_r>
 800114c:	2400      	movs	r4, #0
 800114e:	4620      	mov	r0, r4
 8001150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001154:	f000 f81a 	bl	800118c <_malloc_usable_size_r>
 8001158:	4285      	cmp	r5, r0
 800115a:	4606      	mov	r6, r0
 800115c:	d802      	bhi.n	8001164 <_realloc_r+0x34>
 800115e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001162:	d8f4      	bhi.n	800114e <_realloc_r+0x1e>
 8001164:	4629      	mov	r1, r5
 8001166:	4640      	mov	r0, r8
 8001168:	f7ff fc38 	bl	80009dc <_malloc_r>
 800116c:	4607      	mov	r7, r0
 800116e:	2800      	cmp	r0, #0
 8001170:	d0ec      	beq.n	800114c <_realloc_r+0x1c>
 8001172:	42b5      	cmp	r5, r6
 8001174:	462a      	mov	r2, r5
 8001176:	4621      	mov	r1, r4
 8001178:	bf28      	it	cs
 800117a:	4632      	movcs	r2, r6
 800117c:	f7ff ffca 	bl	8001114 <memcpy>
 8001180:	4621      	mov	r1, r4
 8001182:	4640      	mov	r0, r8
 8001184:	f7ff fbbe 	bl	8000904 <_free_r>
 8001188:	463c      	mov	r4, r7
 800118a:	e7e0      	b.n	800114e <_realloc_r+0x1e>

0800118c <_malloc_usable_size_r>:
 800118c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001190:	1f18      	subs	r0, r3, #4
 8001192:	2b00      	cmp	r3, #0
 8001194:	bfbc      	itt	lt
 8001196:	580b      	ldrlt	r3, [r1, r0]
 8001198:	18c0      	addlt	r0, r0, r3
 800119a:	4770      	bx	lr

0800119c <_sbrk>:
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <_sbrk+0x14>)
 800119e:	6811      	ldr	r1, [r2, #0]
 80011a0:	4603      	mov	r3, r0
 80011a2:	b909      	cbnz	r1, 80011a8 <_sbrk+0xc>
 80011a4:	4903      	ldr	r1, [pc, #12]	@ (80011b4 <_sbrk+0x18>)
 80011a6:	6011      	str	r1, [r2, #0]
 80011a8:	6810      	ldr	r0, [r2, #0]
 80011aa:	4403      	add	r3, r0
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4770      	bx	lr
 80011b0:	200001b4 	.word	0x200001b4
 80011b4:	200001b8 	.word	0x200001b8

080011b8 <_init>:
 80011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ba:	bf00      	nop
 80011bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011be:	bc08      	pop	{r3}
 80011c0:	469e      	mov	lr, r3
 80011c2:	4770      	bx	lr

080011c4 <_fini>:
 80011c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c6:	bf00      	nop
 80011c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ca:	bc08      	pop	{r3}
 80011cc:	469e      	mov	lr, r3
 80011ce:	4770      	bx	lr
