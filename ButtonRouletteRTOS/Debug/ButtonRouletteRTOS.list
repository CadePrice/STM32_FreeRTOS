
ButtonRouletteRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800556c  0800556c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  0800556c  0800556c  0000656c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005574  08005574  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005574  08005574  00006574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005578  08005578  00006578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800557c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba4  2000006c  080055e8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c10  080055e8  00007c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d965  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002142  00000000  00000000  00014a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00016b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a9  00000000  00000000  000176a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002361  00000000  00000000  00017f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba92  00000000  00000000  0001a2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093c79  00000000  00000000  00025d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b99b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b2c  00000000  00000000  000b99f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000bd524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005358 	.word	0x08005358

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005358 	.word	0x08005358

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
TaskHandle_t roundTaskHandle = NULL;
TaskHandle_t gameTaskHandle = NULL;
TaskHandle_t endTaskHandle = NULL;

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
	// PHASE 0: GPIO Configurations, LCD Configurations, Variable Initialization
	HAL_Init();
 8000286:	f000 fc57 	bl	8000b38 <HAL_Init>
	SystemClock_Config();
 800028a:	f000 fa55 	bl	8000738 <SystemClock_Config>

	GPIO_Config();
 800028e:	f000 faa9 	bl	80007e4 <GPIO_Config>
	LCD_Init();
 8000292:	f000 fb0d 	bl	80008b0 <LCD_Init>
	srand(time(NULL));     															// Generates Round Seed
 8000296:	2000      	movs	r0, #0
 8000298:	f003 fff6 	bl	8004288 <time>
 800029c:	4602      	mov	r2, r0
 800029e:	460b      	mov	r3, r1
 80002a0:	4613      	mov	r3, r2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 fe56 	bl	8003f54 <srand>

	xTaskCreate(MainMenuTask, "MainMenuTask", 128, NULL, 4, &mainMenuTaskHandle);	// Main Menu Where Program Begins
 80002a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <main+0xa0>)
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	2304      	movs	r3, #4
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2300      	movs	r3, #0
 80002b2:	2280      	movs	r2, #128	@ 0x80
 80002b4:	491b      	ldr	r1, [pc, #108]	@ (8000324 <main+0xa4>)
 80002b6:	481c      	ldr	r0, [pc, #112]	@ (8000328 <main+0xa8>)
 80002b8:	f001 fda0 	bl	8001dfc <xTaskCreate>
	xTaskCreate(RoundTask, "RoundTask", 128, NULL, 3, &roundTaskHandle);			// Round Screen. Generates Seed
 80002bc:	4b1b      	ldr	r3, [pc, #108]	@ (800032c <main+0xac>)
 80002be:	9301      	str	r3, [sp, #4]
 80002c0:	2303      	movs	r3, #3
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	2300      	movs	r3, #0
 80002c6:	2280      	movs	r2, #128	@ 0x80
 80002c8:	4919      	ldr	r1, [pc, #100]	@ (8000330 <main+0xb0>)
 80002ca:	481a      	ldr	r0, [pc, #104]	@ (8000334 <main+0xb4>)
 80002cc:	f001 fd96 	bl	8001dfc <xTaskCreate>
	xTaskCreate(GameTask, "GameTask", 128, NULL, 2, &gameTaskHandle);				// Where Each Round is Played Out
 80002d0:	4b19      	ldr	r3, [pc, #100]	@ (8000338 <main+0xb8>)
 80002d2:	9301      	str	r3, [sp, #4]
 80002d4:	2302      	movs	r3, #2
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	2300      	movs	r3, #0
 80002da:	2280      	movs	r2, #128	@ 0x80
 80002dc:	4917      	ldr	r1, [pc, #92]	@ (800033c <main+0xbc>)
 80002de:	4818      	ldr	r0, [pc, #96]	@ (8000340 <main+0xc0>)
 80002e0:	f001 fd8c 	bl	8001dfc <xTaskCreate>
	xTaskCreate(EndTask, "EndTask", 128, NULL, 1, &endTaskHandle);					// Display Winner
 80002e4:	4b17      	ldr	r3, [pc, #92]	@ (8000344 <main+0xc4>)
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	2280      	movs	r2, #128	@ 0x80
 80002f0:	4915      	ldr	r1, [pc, #84]	@ (8000348 <main+0xc8>)
 80002f2:	4816      	ldr	r0, [pc, #88]	@ (800034c <main+0xcc>)
 80002f4:	f001 fd82 	bl	8001dfc <xTaskCreate>

	vTaskSuspend(roundTaskHandle);
 80002f8:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <main+0xac>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f001 ff85 	bl	800220c <vTaskSuspend>
	vTaskSuspend(gameTaskHandle);
 8000302:	4b0d      	ldr	r3, [pc, #52]	@ (8000338 <main+0xb8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f001 ff80 	bl	800220c <vTaskSuspend>
	vTaskSuspend(endTaskHandle);
 800030c:	4b0d      	ldr	r3, [pc, #52]	@ (8000344 <main+0xc4>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4618      	mov	r0, r3
 8000312:	f001 ff7b 	bl	800220c <vTaskSuspend>
	vTaskStartScheduler();
 8000316:	f002 f881 	bl	800241c <vTaskStartScheduler>
	while(1);
 800031a:	bf00      	nop
 800031c:	e7fd      	b.n	800031a <main+0x9a>
 800031e:	bf00      	nop
 8000320:	200000cc 	.word	0x200000cc
 8000324:	08005370 	.word	0x08005370
 8000328:	08000351 	.word	0x08000351
 800032c:	200000d0 	.word	0x200000d0
 8000330:	08005380 	.word	0x08005380
 8000334:	0800041d 	.word	0x0800041d
 8000338:	200000d4 	.word	0x200000d4
 800033c:	0800538c 	.word	0x0800538c
 8000340:	080004b5 	.word	0x080004b5
 8000344:	200000d8 	.word	0x200000d8
 8000348:	08005398 	.word	0x08005398
 800034c:	080006f1 	.word	0x080006f1

08000350 <MainMenuTask>:
}

void MainMenuTask(void *params)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af02      	add	r7, sp, #8
 8000356:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		sprintf(LCDOutput, "-BUTTONROULETTE-PRESS BU TO STRT");
 8000358:	4927      	ldr	r1, [pc, #156]	@ (80003f8 <MainMenuTask+0xa8>)
 800035a:	4828      	ldr	r0, [pc, #160]	@ (80003fc <MainMenuTask+0xac>)
 800035c:	f003 ff28 	bl	80041b0 <siprintf>
		LCD_Print(LCDOutput);
 8000360:	4826      	ldr	r0, [pc, #152]	@ (80003fc <MainMenuTask+0xac>)
 8000362:	f000 fb11 	bl	8000988 <LCD_Print>
		if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) || (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0))
 8000366:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800036a:	4825      	ldr	r0, [pc, #148]	@ (8000400 <MainMenuTask+0xb0>)
 800036c:	f000 fea8 	bl	80010c0 <HAL_GPIO_ReadPin>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d007      	beq.n	8000386 <MainMenuTask+0x36>
 8000376:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800037a:	4821      	ldr	r0, [pc, #132]	@ (8000400 <MainMenuTask+0xb0>)
 800037c:	f000 fea0 	bl	80010c0 <HAL_GPIO_ReadPin>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d133      	bne.n	80003ee <MainMenuTask+0x9e>
		{
			vTaskDelete(roundTaskHandle);
 8000386:	4b1f      	ldr	r3, [pc, #124]	@ (8000404 <MainMenuTask+0xb4>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fe94 	bl	80020b8 <vTaskDelete>
			roundTaskHandle = NULL;  // Clear the old handle
 8000390:	4b1c      	ldr	r3, [pc, #112]	@ (8000404 <MainMenuTask+0xb4>)
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
			xTaskCreate(RoundTask, "RoundTask", 128, NULL, 3, &roundTaskHandle);
 8000396:	4b1b      	ldr	r3, [pc, #108]	@ (8000404 <MainMenuTask+0xb4>)
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	2303      	movs	r3, #3
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2300      	movs	r3, #0
 80003a0:	2280      	movs	r2, #128	@ 0x80
 80003a2:	4919      	ldr	r1, [pc, #100]	@ (8000408 <MainMenuTask+0xb8>)
 80003a4:	4819      	ldr	r0, [pc, #100]	@ (800040c <MainMenuTask+0xbc>)
 80003a6:	f001 fd29 	bl	8001dfc <xTaskCreate>
	        vTaskDelay(pdMS_TO_TICKS(2));
 80003aa:	2002      	movs	r0, #2
 80003ac:	f001 fef8 	bl	80021a0 <vTaskDelay>

			vTaskDelete(gameTaskHandle);
 80003b0:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MainMenuTask+0xc0>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fe7f 	bl	80020b8 <vTaskDelete>
			gameTaskHandle = NULL;  // Clear the old handle
 80003ba:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <MainMenuTask+0xc0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
			xTaskCreate(GameTask, "GameTask", 128, NULL, 2, &gameTaskHandle);
 80003c0:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <MainMenuTask+0xc0>)
 80003c2:	9301      	str	r3, [sp, #4]
 80003c4:	2302      	movs	r3, #2
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	2300      	movs	r3, #0
 80003ca:	2280      	movs	r2, #128	@ 0x80
 80003cc:	4911      	ldr	r1, [pc, #68]	@ (8000414 <MainMenuTask+0xc4>)
 80003ce:	4812      	ldr	r0, [pc, #72]	@ (8000418 <MainMenuTask+0xc8>)
 80003d0:	f001 fd14 	bl	8001dfc <xTaskCreate>
			vTaskSuspend(gameTaskHandle);
 80003d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MainMenuTask+0xc0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 ff17 	bl	800220c <vTaskSuspend>

			vTaskResume(roundTaskHandle);
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <MainMenuTask+0xb4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 ffba 	bl	800235c <vTaskResume>
			vTaskSuspend(NULL);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f001 ff0f 	bl	800220c <vTaskSuspend>
		}
        vTaskDelay(pdMS_TO_TICKS(2));
 80003ee:	2002      	movs	r0, #2
 80003f0:	f001 fed6 	bl	80021a0 <vTaskDelay>
		sprintf(LCDOutput, "-BUTTONROULETTE-PRESS BU TO STRT");
 80003f4:	e7b0      	b.n	8000358 <MainMenuTask+0x8>
 80003f6:	bf00      	nop
 80003f8:	080053a0 	.word	0x080053a0
 80003fc:	20000098 	.word	0x20000098
 8000400:	40020800 	.word	0x40020800
 8000404:	200000d0 	.word	0x200000d0
 8000408:	08005380 	.word	0x08005380
 800040c:	0800041d 	.word	0x0800041d
 8000410:	200000d4 	.word	0x200000d4
 8000414:	0800538c 	.word	0x0800538c
 8000418:	080004b5 	.word	0x080004b5

0800041c <RoundTask>:
	}
}

void RoundTask (void *params)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b089      	sub	sp, #36	@ 0x24
 8000420:	af02      	add	r7, sp, #8
 8000422:	6178      	str	r0, [r7, #20]
	// PHASE 2A: Initialize Game Variables
	roundCount = 0;
 8000424:	4b1b      	ldr	r3, [pc, #108]	@ (8000494 <RoundTask+0x78>)
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
	turn  = 0;
 800042a:	4b1b      	ldr	r3, [pc, #108]	@ (8000498 <RoundTask+0x7c>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
	life1 = 3;
 8000430:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <RoundTask+0x80>)
 8000432:	2203      	movs	r2, #3
 8000434:	601a      	str	r2, [r3, #0]
	life2 = 3;
 8000436:	4b1a      	ldr	r3, [pc, #104]	@ (80004a0 <RoundTask+0x84>)
 8000438:	2203      	movs	r2, #3
 800043a:	601a      	str	r2, [r3, #0]
	for(;;)
	{
		// PHASE 2B: Round Screen
		roundCount++;
 800043c:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <RoundTask+0x78>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <RoundTask+0x78>)
 8000444:	6013      	str	r3, [r2, #0]
		roundSeed = getSeed();
 8000446:	4c17      	ldr	r4, [pc, #92]	@ (80004a4 <RoundTask+0x88>)
 8000448:	463b      	mov	r3, r7
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fac2 	bl	80009d4 <getSeed>
 8000450:	463b      	mov	r3, r7
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		sprintf(LCDOutput, "    ROUND  %d    SAFE:%d |DANGER:%d", roundCount, roundSeed.safeCount, roundSeed.dangerCount);
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <RoundTask+0x78>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <RoundTask+0x88>)
 800045e:	6899      	ldr	r1, [r3, #8]
 8000460:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <RoundTask+0x88>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	460b      	mov	r3, r1
 8000468:	490f      	ldr	r1, [pc, #60]	@ (80004a8 <RoundTask+0x8c>)
 800046a:	4810      	ldr	r0, [pc, #64]	@ (80004ac <RoundTask+0x90>)
 800046c:	f003 fea0 	bl	80041b0 <siprintf>
		LCD_Print(LCDOutput);
 8000470:	480e      	ldr	r0, [pc, #56]	@ (80004ac <RoundTask+0x90>)
 8000472:	f000 fa89 	bl	8000988 <LCD_Print>
        vTaskDelay(pdMS_TO_TICKS(4000));
 8000476:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800047a:	f001 fe91 	bl	80021a0 <vTaskDelay>

        vTaskResume(gameTaskHandle);
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <RoundTask+0x94>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4618      	mov	r0, r3
 8000484:	f001 ff6a 	bl	800235c <vTaskResume>
        vTaskSuspend(NULL);
 8000488:	2000      	movs	r0, #0
 800048a:	f001 febf 	bl	800220c <vTaskSuspend>
		roundCount++;
 800048e:	bf00      	nop
 8000490:	e7d4      	b.n	800043c <RoundTask+0x20>
 8000492:	bf00      	nop
 8000494:	20000088 	.word	0x20000088
 8000498:	2000008c 	.word	0x2000008c
 800049c:	20000090 	.word	0x20000090
 80004a0:	20000094 	.word	0x20000094
 80004a4:	200000bc 	.word	0x200000bc
 80004a8:	080053c4 	.word	0x080053c4
 80004ac:	20000098 	.word	0x20000098
 80004b0:	200000d4 	.word	0x200000d4

080004b4 <GameTask>:
	}
}

void GameTask (void *params)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		for(int i=0; i < roundSeed.length; i++)
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	e0d6      	b.n	8000670 <GameTask+0x1bc>
		{
			// Update Game Screen
			if(turn % 2 == 0)
 80004c2:	4b7f      	ldr	r3, [pc, #508]	@ (80006c0 <GameTask+0x20c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10b      	bne.n	80004e6 <GameTask+0x32>
			{
				sprintf(LCDOutput, "PLR1<-      PLR2<3:%d        <3:%d", life1, life2);
 80004ce:	4b7d      	ldr	r3, [pc, #500]	@ (80006c4 <GameTask+0x210>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4b7d      	ldr	r3, [pc, #500]	@ (80006c8 <GameTask+0x214>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	497d      	ldr	r1, [pc, #500]	@ (80006cc <GameTask+0x218>)
 80004d8:	487d      	ldr	r0, [pc, #500]	@ (80006d0 <GameTask+0x21c>)
 80004da:	f003 fe69 	bl	80041b0 <siprintf>
				LCD_Print(LCDOutput);
 80004de:	487c      	ldr	r0, [pc, #496]	@ (80006d0 <GameTask+0x21c>)
 80004e0:	f000 fa52 	bl	8000988 <LCD_Print>
 80004e4:	e00a      	b.n	80004fc <GameTask+0x48>
			}
			else
			{
				sprintf(LCDOutput, "PLR1      ->PLR2<3:%d        <3:%d", life1, life2);
 80004e6:	4b77      	ldr	r3, [pc, #476]	@ (80006c4 <GameTask+0x210>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	4b77      	ldr	r3, [pc, #476]	@ (80006c8 <GameTask+0x214>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4979      	ldr	r1, [pc, #484]	@ (80006d4 <GameTask+0x220>)
 80004f0:	4877      	ldr	r0, [pc, #476]	@ (80006d0 <GameTask+0x21c>)
 80004f2:	f003 fe5d 	bl	80041b0 <siprintf>
				LCD_Print(LCDOutput);
 80004f6:	4876      	ldr	r0, [pc, #472]	@ (80006d0 <GameTask+0x21c>)
 80004f8:	f000 fa46 	bl	8000988 <LCD_Print>
			}
			while(1)
			{
				// Offense (White Button)
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0)
 80004fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000500:	4875      	ldr	r0, [pc, #468]	@ (80006d8 <GameTask+0x224>)
 8000502:	f000 fddd 	bl	80010c0 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d142      	bne.n	8000592 <GameTask+0xde>
				{
					vTaskDelay(pdMS_TO_TICKS(1000));
 800050c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000510:	f001 fe46 	bl	80021a0 <vTaskDelay>
					if(roundSeed.array[i] == 0)
 8000514:	4b71      	ldr	r3, [pc, #452]	@ (80006dc <GameTask+0x228>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	4413      	add	r3, r2
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d112      	bne.n	800054a <GameTask+0x96>
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000524:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000528:	486b      	ldr	r0, [pc, #428]	@ (80006d8 <GameTask+0x224>)
 800052a:	f000 fdfa 	bl	8001122 <HAL_GPIO_TogglePin>
						vTaskDelay(pdMS_TO_TICKS(1000));
 800052e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000532:	f001 fe35 	bl	80021a0 <vTaskDelay>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000536:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800053a:	4867      	ldr	r0, [pc, #412]	@ (80006d8 <GameTask+0x224>)
 800053c:	f000 fdf1 	bl	8001122 <HAL_GPIO_TogglePin>
						vTaskDelay(pdMS_TO_TICKS(1000));
 8000540:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000544:	f001 fe2c 	bl	80021a0 <vTaskDelay>
						break;
 8000548:	e072      	b.n	8000630 <GameTask+0x17c>
					}
					else
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800054a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800054e:	4862      	ldr	r0, [pc, #392]	@ (80006d8 <GameTask+0x224>)
 8000550:	f000 fde7 	bl	8001122 <HAL_GPIO_TogglePin>
						vTaskDelay(pdMS_TO_TICKS(1000));
 8000554:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000558:	f001 fe22 	bl	80021a0 <vTaskDelay>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800055c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000560:	485d      	ldr	r0, [pc, #372]	@ (80006d8 <GameTask+0x224>)
 8000562:	f000 fdde 	bl	8001122 <HAL_GPIO_TogglePin>
						vTaskDelay(pdMS_TO_TICKS(1000));
 8000566:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800056a:	f001 fe19 	bl	80021a0 <vTaskDelay>
						if(turn % 2 == 0)
 800056e:	4b54      	ldr	r3, [pc, #336]	@ (80006c0 <GameTask+0x20c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	2b00      	cmp	r3, #0
 8000578:	d105      	bne.n	8000586 <GameTask+0xd2>
						{
							life2--;
 800057a:	4b53      	ldr	r3, [pc, #332]	@ (80006c8 <GameTask+0x214>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3b01      	subs	r3, #1
 8000580:	4a51      	ldr	r2, [pc, #324]	@ (80006c8 <GameTask+0x214>)
 8000582:	6013      	str	r3, [r2, #0]
						}
						else
						{
							life1--;
						}
						break;
 8000584:	e054      	b.n	8000630 <GameTask+0x17c>
							life1--;
 8000586:	4b4f      	ldr	r3, [pc, #316]	@ (80006c4 <GameTask+0x210>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3b01      	subs	r3, #1
 800058c:	4a4d      	ldr	r2, [pc, #308]	@ (80006c4 <GameTask+0x210>)
 800058e:	6013      	str	r3, [r2, #0]
						break;
 8000590:	e04e      	b.n	8000630 <GameTask+0x17c>
					}
				}

				// Defense (Red Button)
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0)
 8000592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000596:	4850      	ldr	r0, [pc, #320]	@ (80006d8 <GameTask+0x224>)
 8000598:	f000 fd92 	bl	80010c0 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1ac      	bne.n	80004fc <GameTask+0x48>
				{
					vTaskDelay(pdMS_TO_TICKS(1000));
 80005a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a6:	f001 fdfb 	bl	80021a0 <vTaskDelay>
					if(roundSeed.array[i] == 0)
 80005aa:	4b4c      	ldr	r3, [pc, #304]	@ (80006dc <GameTask+0x228>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4413      	add	r3, r2
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d117      	bne.n	80005ea <GameTask+0x136>
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80005ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005be:	4846      	ldr	r0, [pc, #280]	@ (80006d8 <GameTask+0x224>)
 80005c0:	f000 fdaf 	bl	8001122 <HAL_GPIO_TogglePin>
						vTaskDelay(pdMS_TO_TICKS(1000));
 80005c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c8:	f001 fdea 	bl	80021a0 <vTaskDelay>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80005cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d0:	4841      	ldr	r0, [pc, #260]	@ (80006d8 <GameTask+0x224>)
 80005d2:	f000 fda6 	bl	8001122 <HAL_GPIO_TogglePin>
						vTaskDelay(pdMS_TO_TICKS(1000));
 80005d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005da:	f001 fde1 	bl	80021a0 <vTaskDelay>
						turn--;
 80005de:	4b38      	ldr	r3, [pc, #224]	@ (80006c0 <GameTask+0x20c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4a36      	ldr	r2, [pc, #216]	@ (80006c0 <GameTask+0x20c>)
 80005e6:	6013      	str	r3, [r2, #0]
						break;
 80005e8:	e022      	b.n	8000630 <GameTask+0x17c>
					}
					else
					{
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80005ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005ee:	483a      	ldr	r0, [pc, #232]	@ (80006d8 <GameTask+0x224>)
 80005f0:	f000 fd97 	bl	8001122 <HAL_GPIO_TogglePin>
						vTaskDelay(pdMS_TO_TICKS(1000));
 80005f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f8:	f001 fdd2 	bl	80021a0 <vTaskDelay>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80005fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000600:	4835      	ldr	r0, [pc, #212]	@ (80006d8 <GameTask+0x224>)
 8000602:	f000 fd8e 	bl	8001122 <HAL_GPIO_TogglePin>
						vTaskDelay(pdMS_TO_TICKS(1000));
 8000606:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800060a:	f001 fdc9 	bl	80021a0 <vTaskDelay>
						if(turn % 2 == 0)
 800060e:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <GameTask+0x20c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	2b00      	cmp	r3, #0
 8000618:	d105      	bne.n	8000626 <GameTask+0x172>
						{
							life1--;
 800061a:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <GameTask+0x210>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a28      	ldr	r2, [pc, #160]	@ (80006c4 <GameTask+0x210>)
 8000622:	6013      	str	r3, [r2, #0]
						}
						else
						{
							life2--;
						}
						break;
 8000624:	e004      	b.n	8000630 <GameTask+0x17c>
							life2--;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <GameTask+0x214>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	3b01      	subs	r3, #1
 800062c:	4a26      	ldr	r2, [pc, #152]	@ (80006c8 <GameTask+0x214>)
 800062e:	6013      	str	r3, [r2, #0]
					}
				}
			}

			// Check for game end
			if(life1 == 0)
 8000630:	4b24      	ldr	r3, [pc, #144]	@ (80006c4 <GameTask+0x210>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d107      	bne.n	8000648 <GameTask+0x194>
			{
				sprintf(LCDOutput, "-PLAYER 2 WINS!-PRESS BU TO STRT");
 8000638:	4929      	ldr	r1, [pc, #164]	@ (80006e0 <GameTask+0x22c>)
 800063a:	4825      	ldr	r0, [pc, #148]	@ (80006d0 <GameTask+0x21c>)
 800063c:	f003 fdb8 	bl	80041b0 <siprintf>
				LCD_Print(LCDOutput);
 8000640:	4823      	ldr	r0, [pc, #140]	@ (80006d0 <GameTask+0x21c>)
 8000642:	f000 f9a1 	bl	8000988 <LCD_Print>
				break;
 8000646:	e019      	b.n	800067c <GameTask+0x1c8>
			}
			else if(life2 == 0)
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <GameTask+0x214>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d107      	bne.n	8000660 <GameTask+0x1ac>
			{
				sprintf(LCDOutput, "-PLAYER 1 WINS!-PRESS BU TO STRT");
 8000650:	4924      	ldr	r1, [pc, #144]	@ (80006e4 <GameTask+0x230>)
 8000652:	481f      	ldr	r0, [pc, #124]	@ (80006d0 <GameTask+0x21c>)
 8000654:	f003 fdac 	bl	80041b0 <siprintf>
				LCD_Print(LCDOutput);
 8000658:	481d      	ldr	r0, [pc, #116]	@ (80006d0 <GameTask+0x21c>)
 800065a:	f000 f995 	bl	8000988 <LCD_Print>
				break;
 800065e:	e00d      	b.n	800067c <GameTask+0x1c8>
			}
			turn++;
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <GameTask+0x20c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a16      	ldr	r2, [pc, #88]	@ (80006c0 <GameTask+0x20c>)
 8000668:	6013      	str	r3, [r2, #0]
		for(int i=0; i < roundSeed.length; i++)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	3301      	adds	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <GameTask+0x228>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	429a      	cmp	r2, r3
 8000678:	f6ff af23 	blt.w	80004c2 <GameTask+0xe>
		}
		free(roundSeed.array);
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <GameTask+0x228>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f003 fbb1 	bl	8003de8 <free>

		// Check if games still happening
		if((life1 == 0) || (life2 == 0))
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <GameTask+0x210>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <GameTask+0x1e2>
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <GameTask+0x214>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d10a      	bne.n	80006ac <GameTask+0x1f8>
		{
			LCD_Print(LCDOutput);
 8000696:	480e      	ldr	r0, [pc, #56]	@ (80006d0 <GameTask+0x21c>)
 8000698:	f000 f976 	bl	8000988 <LCD_Print>
			vTaskResume(endTaskHandle);
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <GameTask+0x234>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fe5b 	bl	800235c <vTaskResume>
			vTaskSuspend(NULL);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f001 fdb0 	bl	800220c <vTaskSuspend>
		}
		vTaskResume(roundTaskHandle);
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <GameTask+0x238>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fe53 	bl	800235c <vTaskResume>
		vTaskSuspend(NULL);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f001 fda8 	bl	800220c <vTaskSuspend>
		for(int i=0; i < roundSeed.length; i++)
 80006bc:	e6fe      	b.n	80004bc <GameTask+0x8>
 80006be:	bf00      	nop
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	20000090 	.word	0x20000090
 80006c8:	20000094 	.word	0x20000094
 80006cc:	080053e8 	.word	0x080053e8
 80006d0:	20000098 	.word	0x20000098
 80006d4:	0800540c 	.word	0x0800540c
 80006d8:	40020800 	.word	0x40020800
 80006dc:	200000bc 	.word	0x200000bc
 80006e0:	08005430 	.word	0x08005430
 80006e4:	08005454 	.word	0x08005454
 80006e8:	200000d8 	.word	0x200000d8
 80006ec:	200000d0 	.word	0x200000d0

080006f0 <EndTask>:
	}
}

void EndTask (void *params)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) || (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0))
 80006f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <EndTask+0x40>)
 80006fe:	f000 fcdf 	bl	80010c0 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d007      	beq.n	8000718 <EndTask+0x28>
 8000708:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800070c:	4808      	ldr	r0, [pc, #32]	@ (8000730 <EndTask+0x40>)
 800070e:	f000 fcd7 	bl	80010c0 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d107      	bne.n	8000728 <EndTask+0x38>
		{
			vTaskResume(mainMenuTaskHandle);
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <EndTask+0x44>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fe1d 	bl	800235c <vTaskResume>
			vTaskSuspend(NULL);
 8000722:	2000      	movs	r0, #0
 8000724:	f001 fd72 	bl	800220c <vTaskSuspend>
		}
        vTaskDelay(pdMS_TO_TICKS(2));
 8000728:	2002      	movs	r0, #2
 800072a:	f001 fd39 	bl	80021a0 <vTaskDelay>
		if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) || (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0))
 800072e:	e7e3      	b.n	80006f8 <EndTask+0x8>
 8000730:	40020800 	.word	0x40020800
 8000734:	200000cc 	.word	0x200000cc

08000738 <SystemClock_Config>:
	}
}

void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	@ 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fd95 	bl	8004276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <SystemClock_Config+0xa4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a1d      	ldr	r2, [pc, #116]	@ (80007dc <SystemClock_Config+0xa4>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <SystemClock_Config+0xa4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <SystemClock_Config+0xa8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000784:	4a16      	ldr	r2, [pc, #88]	@ (80007e0 <SystemClock_Config+0xa8>)
 8000786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <SystemClock_Config+0xa8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007ac:	2310      	movs	r3, #16
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	@ 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <GPIO_Config>:

// Configure all GPIO Ports
void GPIO_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	@ 0x30
 80007e8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <GPIO_Config+0xc0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	@ (80008a4 <GPIO_Config+0xc0>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b2a      	ldr	r3, [pc, #168]	@ (80008a4 <GPIO_Config+0xc0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <GPIO_Config+0xc0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a25      	ldr	r2, [pc, #148]	@ (80008a4 <GPIO_Config+0xc0>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b23      	ldr	r3, [pc, #140]	@ (80008a4 <GPIO_Config+0xc0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIOA_Init = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIOC_Init = {0};
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

	// LCD PA
	GPIOA_Init.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000842:	23e0      	movs	r3, #224	@ 0xe0
 8000844:	61fb      	str	r3, [r7, #28]
	GPIOA_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
	GPIOA_Init.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIOA_Init.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA,&GPIOA_Init);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4813      	ldr	r0, [pc, #76]	@ (80008a8 <GPIO_Config+0xc4>)
 800085a:	f000 faad 	bl	8000db8 <HAL_GPIO_Init>

	// Output PC (LCD, LED)
	GPIOC_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11;
 800085e:	f640 43ff 	movw	r3, #3327	@ 0xcff
 8000862:	60bb      	str	r3, [r7, #8]
	GPIOC_Init.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
	GPIOC_Init.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
	GPIOC_Init.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&GPIOC_Init);
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	@ (80008ac <GPIO_Config+0xc8>)
 8000878:	f000 fa9e 	bl	8000db8 <HAL_GPIO_Init>

	// Input PC (Button)
	GPIOC_Init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800087c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000880:	60bb      	str	r3, [r7, #8]
	GPIOC_Init.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	GPIOC_Init.Pull = GPIO_PULLUP;
 8000886:	2301      	movs	r3, #1
 8000888:	613b      	str	r3, [r7, #16]
	GPIOC_Init.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC,&GPIOC_Init);
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <GPIO_Config+0xc8>)
 8000896:	f000 fa8f 	bl	8000db8 <HAL_GPIO_Init>
}
 800089a:	bf00      	nop
 800089c:	3730      	adds	r7, #48	@ 0x30
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020800 	.word	0x40020800

080008b0 <LCD_Init>:

// Initialize the LCD to Display Information
void LCD_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	delay(150000);
 80008b4:	4817      	ldr	r0, [pc, #92]	@ (8000914 <LCD_Init+0x64>)
 80008b6:	f000 f8ed 	bl	8000a94 <delay>
	LCD_Send(0x30, 0);     							// Function set
 80008ba:	2100      	movs	r1, #0
 80008bc:	2030      	movs	r0, #48	@ 0x30
 80008be:	f000 f82d 	bl	800091c <LCD_Send>
	delay(50000);
 80008c2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80008c6:	f000 f8e5 	bl	8000a94 <delay>
	LCD_Send(0x30, 0);     							// Function set again
 80008ca:	2100      	movs	r1, #0
 80008cc:	2030      	movs	r0, #48	@ 0x30
 80008ce:	f000 f825 	bl	800091c <LCD_Send>
	delay(50000);
 80008d2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80008d6:	f000 f8dd 	bl	8000a94 <delay>
	LCD_Send(0x30, 0);     							// Function set again
 80008da:	2100      	movs	r1, #0
 80008dc:	2030      	movs	r0, #48	@ 0x30
 80008de:	f000 f81d 	bl	800091c <LCD_Send>
	delay(50000);
 80008e2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80008e6:	f000 f8d5 	bl	8000a94 <delay>
	LCD_Send(0x38, 0);     							// Set 8-bit mode, 2-line display, 5x8 font
 80008ea:	2100      	movs	r1, #0
 80008ec:	2038      	movs	r0, #56	@ 0x38
 80008ee:	f000 f815 	bl	800091c <LCD_Send>
	LCD_Send(0x0C, 0);     							// Display ON, cursor OFF
 80008f2:	2100      	movs	r1, #0
 80008f4:	200c      	movs	r0, #12
 80008f6:	f000 f811 	bl	800091c <LCD_Send>
	LCD_Send(0x01, 0);     							// Clear display
 80008fa:	2100      	movs	r1, #0
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 f80d 	bl	800091c <LCD_Send>
	delay(100000);
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <LCD_Init+0x68>)
 8000904:	f000 f8c6 	bl	8000a94 <delay>
	LCD_Send(0x06, 0);     							// Increment cursor after each character
 8000908:	2100      	movs	r1, #0
 800090a:	2006      	movs	r0, #6
 800090c:	f000 f806 	bl	800091c <LCD_Send>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	000249f0 	.word	0x000249f0
 8000918:	000186a0 	.word	0x000186a0

0800091c <LCD_Send>:

// LCD Send Information
// cd = 0 -> command | cd = 1 -> data
void LCD_Send(uint8_t data, uint8_t cd)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	4613      	mov	r3, r2
 800092a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, cd ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf14      	ite	ne
 8000932:	2301      	movne	r3, #1
 8000934:	2300      	moveq	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	2120      	movs	r1, #32
 800093c:	4810      	ldr	r0, [pc, #64]	@ (8000980 <LCD_Send+0x64>)
 800093e:	f000 fbd7 	bl	80010f0 <HAL_GPIO_WritePin>

	GPIOC->ODR = (GPIOC->ODR & 0xFFFFFF00) | data;
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <LCD_Send+0x68>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	490d      	ldr	r1, [pc, #52]	@ (8000984 <LCD_Send+0x68>)
 800094e:	4313      	orrs	r3, r2
 8000950:	614b      	str	r3, [r1, #20]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	480a      	ldr	r0, [pc, #40]	@ (8000980 <LCD_Send+0x64>)
 8000958:	f000 fbca 	bl	80010f0 <HAL_GPIO_WritePin>
	delay(10000);
 800095c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000960:	f000 f898 	bl	8000a94 <delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	@ 0x80
 8000968:	4805      	ldr	r0, [pc, #20]	@ (8000980 <LCD_Send+0x64>)
 800096a:	f000 fbc1 	bl	80010f0 <HAL_GPIO_WritePin>
	delay(10000);
 800096e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000972:	f000 f88f 	bl	8000a94 <delay>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40020000 	.word	0x40020000
 8000984:	40020800 	.word	0x40020800

08000988 <LCD_Print>:

// Print Screen to LCD
void LCD_Print(const char *str)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
	LCD_Send(0x80, 0);
 8000994:	2100      	movs	r1, #0
 8000996:	2080      	movs	r0, #128	@ 0x80
 8000998:	f7ff ffc0 	bl	800091c <LCD_Send>
	while(*str)
 800099c:	e011      	b.n	80009c2 <LCD_Print+0x3a>
	{
		if(i==16)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b10      	cmp	r3, #16
 80009a2:	d103      	bne.n	80009ac <LCD_Print+0x24>
		{
			LCD_Send(0xC0, 0);
 80009a4:	2100      	movs	r1, #0
 80009a6:	20c0      	movs	r0, #192	@ 0xc0
 80009a8:	f7ff ffb8 	bl	800091c <LCD_Send>
		}
		LCD_Send(*str++, 1);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ffb0 	bl	800091c <LCD_Send>
		i++;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3301      	adds	r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
	while(*str)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1e9      	bne.n	800099e <LCD_Print+0x16>
	}
}
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <getSeed>:

// Create a Random Round Seed
RandomSeed getSeed(void)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b08d      	sub	sp, #52	@ 0x34
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		int safe = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int danger = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		// Create array length
		int length = (rand()%9) + 2;				// Create array length
 80009e4:	f003 fae4 	bl	8003fb0 <rand>
 80009e8:	4601      	mov	r1, r0
 80009ea:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <getSeed+0xbc>)
 80009ec:	fb83 2301 	smull	r2, r3, r3, r1
 80009f0:	105a      	asrs	r2, r3, #1
 80009f2:	17cb      	asrs	r3, r1, #31
 80009f4:	1ad2      	subs	r2, r2, r3
 80009f6:	4613      	mov	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4413      	add	r3, r2
 80009fc:	1aca      	subs	r2, r1, r3
 80009fe:	1c93      	adds	r3, r2, #2
 8000a00:	623b      	str	r3, [r7, #32]

		int *array = malloc(length * sizeof(int));	// Allocate memory and point to first array element
 8000a02:	6a3b      	ldr	r3, [r7, #32]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 f9e6 	bl	8003dd8 <malloc>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	61fb      	str	r3, [r7, #28]

		for (int i = 0; i < length; i++)			// Fill the array with 1s and 0s
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a14:	e01d      	b.n	8000a52 <getSeed+0x7e>
		{
			array[i] = rand() % 2;
 8000a16:	f003 facb 	bl	8003fb0 <rand>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	69f9      	ldr	r1, [r7, #28]
 8000a22:	440a      	add	r2, r1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	bfb8      	it	lt
 8000a2c:	425b      	neglt	r3, r3
 8000a2e:	6013      	str	r3, [r2, #0]
			if(array[i] == 0) {safe++;}
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	4413      	add	r3, r2
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <getSeed+0x72>
 8000a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a40:	3301      	adds	r3, #1
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a44:	e002      	b.n	8000a4c <getSeed+0x78>
			else {danger++;}
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	3301      	adds	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (int i = 0; i < length; i++)			// Fill the array with 1s and 0s
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4e:	3301      	adds	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	dbdd      	blt.n	8000a16 <getSeed+0x42>
		}
		if((safe == 0) || (danger == 0)) {continue;}
 8000a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0bd      	beq.n	80009dc <getSeed+0x8>
 8000a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d100      	bne.n	8000a68 <getSeed+0x94>
	{
 8000a66:	e7b9      	b.n	80009dc <getSeed+0x8>

		RandomSeed result = {array, length, safe, danger};
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a76:	61bb      	str	r3, [r7, #24]
		return result;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	461c      	mov	r4, r3
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
}
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	3734      	adds	r7, #52	@ 0x34
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	38e38e39 	.word	0x38e38e39

08000a94 <delay>:

// For Loop Creates Soft Delay in Program
void delay(uint32_t delayVal)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i=0;i < delayVal; i++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e002      	b.n	8000aa8 <delay+0x14>
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3f8      	bcc.n	8000aa2 <delay+0xe>
	{
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f003 fc93 	bl	800443c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fbb3 	bl	8000280 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b28:	0800557c 	.word	0x0800557c
  ldr r2, =_sbss
 8000b2c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b30:	20004c10 	.word	0x20004c10

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f8f5 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f810 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f000 f806 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f8f7 	bl	8000d9e <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f8cd 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff47 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff5c 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffb0 	bl	8000d0c <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e159      	b.n	8001088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8148 	bne.w	8001082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d017      	beq.n	8000ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a2 	beq.w	8001082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b57      	ldr	r3, [pc, #348]	@ (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a56      	ldr	r2, [pc, #344]	@ (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b54      	ldr	r3, [pc, #336]	@ (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a52      	ldr	r2, [pc, #328]	@ (80010a4 <HAL_GPIO_Init+0x2ec>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	@ (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x202>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a48      	ldr	r2, [pc, #288]	@ (80010ac <HAL_GPIO_Init+0x2f4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x1fe>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a47      	ldr	r2, [pc, #284]	@ (80010b0 <HAL_GPIO_Init+0x2f8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x1fa>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a46      	ldr	r2, [pc, #280]	@ (80010b4 <HAL_GPIO_Init+0x2fc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x1f6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a45      	ldr	r2, [pc, #276]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x1f2>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000faa:	2307      	movs	r3, #7
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	@ (80010a4 <HAL_GPIO_Init+0x2ec>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a24      	ldr	r2, [pc, #144]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1a      	ldr	r2, [pc, #104]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f aea2 	bls.w	8000dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	619a      	str	r2, [r3, #24]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001134:	887a      	ldrh	r2, [r7, #2]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	041a      	lsls	r2, r3, #16
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43d9      	mvns	r1, r3
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	400b      	ands	r3, r1
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <SysTick_Handler+0x1c>)
 800115e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001160:	f001 fdc0 	bl	8002ce4 <xTaskGetSchedulerState>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d001      	beq.n	800116e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800116a:	f002 fbb5 	bl	80038d8 <xPortSysTickHandler>
  }
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001188:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <vApplicationGetIdleTaskMemory+0x30>)
 800118e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2280      	movs	r2, #128	@ 0x80
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200000dc 	.word	0x200000dc
 80011a8:	20000184 	.word	0x20000184

080011ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80011bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <vApplicationGetTimerTaskMemory+0x30>)
 80011c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000384 	.word	0x20000384
 80011dc:	2000042c 	.word	0x2000042c

080011e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f103 0208 	add.w	r2, r3, #8
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f103 0208 	add.w	r2, r3, #8
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f103 0208 	add.w	r2, r3, #8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800123a:	b480      	push	{r7}
 800123c:	b085      	sub	sp, #20
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001298:	d103      	bne.n	80012a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e00c      	b.n	80012bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3308      	adds	r3, #8
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e002      	b.n	80012b0 <vListInsert+0x2e>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d2f6      	bcs.n	80012aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6892      	ldr	r2, [r2, #8]
 800130a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6852      	ldr	r2, [r2, #4]
 8001314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	d103      	bne.n	8001328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1e5a      	subs	r2, r3, #1
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10b      	bne.n	8001374 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800135c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001360:	f383 8811 	msr	BASEPRI, r3
 8001364:	f3bf 8f6f 	isb	sy
 8001368:	f3bf 8f4f 	dsb	sy
 800136c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001374:	f002 fa20 	bl	80037b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001380:	68f9      	ldr	r1, [r7, #12]
 8001382:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001384:	fb01 f303 	mul.w	r3, r1, r3
 8001388:	441a      	add	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a4:	3b01      	subs	r3, #1
 80013a6:	68f9      	ldr	r1, [r7, #12]
 80013a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	441a      	add	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	22ff      	movs	r2, #255	@ 0xff
 80013b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	22ff      	movs	r2, #255	@ 0xff
 80013c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d114      	bne.n	80013f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d01a      	beq.n	8001408 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3310      	adds	r3, #16
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 fabe 	bl	8002958 <xTaskRemoveFromEventList>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d012      	beq.n	8001408 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <xQueueGenericReset+0xd0>)
 80013e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f3bf 8f4f 	dsb	sy
 80013ee:	f3bf 8f6f 	isb	sy
 80013f2:	e009      	b.n	8001408 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3310      	adds	r3, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fef1 	bl	80011e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3324      	adds	r3, #36	@ 0x24
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff feec 	bl	80011e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001408:	f002 fa08 	bl	800381c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000ed04 	.word	0xe000ed04

0800141c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	@ 0x38
 8001420:	af02      	add	r7, sp, #8
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10b      	bne.n	8001448 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001434:	f383 8811 	msr	BASEPRI, r3
 8001438:	f3bf 8f6f 	isb	sy
 800143c:	f3bf 8f4f 	dsb	sy
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10b      	bne.n	8001466 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800144e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001452:	f383 8811 	msr	BASEPRI, r3
 8001456:	f3bf 8f6f 	isb	sy
 800145a:	f3bf 8f4f 	dsb	sy
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	e7fd      	b.n	8001462 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <xQueueGenericCreateStatic+0x56>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <xQueueGenericCreateStatic+0x5a>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <xQueueGenericCreateStatic+0x5c>
 8001476:	2300      	movs	r3, #0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10b      	bne.n	8001494 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800147c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001480:	f383 8811 	msr	BASEPRI, r3
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	f3bf 8f4f 	dsb	sy
 800148c:	623b      	str	r3, [r7, #32]
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <xQueueGenericCreateStatic+0x84>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <xQueueGenericCreateStatic+0x88>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <xQueueGenericCreateStatic+0x8a>
 80014a4:	2300      	movs	r3, #0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10b      	bne.n	80014c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80014aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014ae:	f383 8811 	msr	BASEPRI, r3
 80014b2:	f3bf 8f6f 	isb	sy
 80014b6:	f3bf 8f4f 	dsb	sy
 80014ba:	61fb      	str	r3, [r7, #28]
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	e7fd      	b.n	80014be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80014c2:	2350      	movs	r3, #80	@ 0x50
 80014c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b50      	cmp	r3, #80	@ 0x50
 80014ca:	d00b      	beq.n	80014e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80014cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014d0:	f383 8811 	msr	BASEPRI, r3
 80014d4:	f3bf 8f6f 	isb	sy
 80014d8:	f3bf 8f4f 	dsb	sy
 80014dc:	61bb      	str	r3, [r7, #24]
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80014e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80014ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00d      	beq.n	800150c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80014f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80014f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80014fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	4613      	mov	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f805 	bl	8001516 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800150c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800150e:	4618      	mov	r0, r3
 8001510:	3730      	adds	r7, #48	@ 0x30
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e002      	b.n	8001538 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001544:	2101      	movs	r1, #1
 8001546:	69b8      	ldr	r0, [r7, #24]
 8001548:	f7ff fefe 	bl	8001348 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10b      	bne.n	8001590 <xQueueGenericSend+0x34>
	__asm volatile
 8001578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800157c:	f383 8811 	msr	BASEPRI, r3
 8001580:	f3bf 8f6f 	isb	sy
 8001584:	f3bf 8f4f 	dsb	sy
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d103      	bne.n	800159e <xQueueGenericSend+0x42>
 8001596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <xQueueGenericSend+0x46>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <xQueueGenericSend+0x48>
 80015a2:	2300      	movs	r3, #0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10b      	bne.n	80015c0 <xQueueGenericSend+0x64>
	__asm volatile
 80015a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015ac:	f383 8811 	msr	BASEPRI, r3
 80015b0:	f3bf 8f6f 	isb	sy
 80015b4:	f3bf 8f4f 	dsb	sy
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80015ba:	bf00      	nop
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d103      	bne.n	80015ce <xQueueGenericSend+0x72>
 80015c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <xQueueGenericSend+0x76>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <xQueueGenericSend+0x78>
 80015d2:	2300      	movs	r3, #0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10b      	bne.n	80015f0 <xQueueGenericSend+0x94>
	__asm volatile
 80015d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015dc:	f383 8811 	msr	BASEPRI, r3
 80015e0:	f3bf 8f6f 	isb	sy
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	623b      	str	r3, [r7, #32]
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015f0:	f001 fb78 	bl	8002ce4 <xTaskGetSchedulerState>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <xQueueGenericSend+0xa4>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <xQueueGenericSend+0xa8>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <xQueueGenericSend+0xaa>
 8001604:	2300      	movs	r3, #0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10b      	bne.n	8001622 <xQueueGenericSend+0xc6>
	__asm volatile
 800160a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800160e:	f383 8811 	msr	BASEPRI, r3
 8001612:	f3bf 8f6f 	isb	sy
 8001616:	f3bf 8f4f 	dsb	sy
 800161a:	61fb      	str	r3, [r7, #28]
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	e7fd      	b.n	800161e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001622:	f002 f8c9 	bl	80037b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800162a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800162c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162e:	429a      	cmp	r2, r3
 8001630:	d302      	bcc.n	8001638 <xQueueGenericSend+0xdc>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d129      	bne.n	800168c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800163e:	f000 fa0f 	bl	8001a60 <prvCopyDataToQueue>
 8001642:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	2b00      	cmp	r3, #0
 800164a:	d010      	beq.n	800166e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800164c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800164e:	3324      	adds	r3, #36	@ 0x24
 8001650:	4618      	mov	r0, r3
 8001652:	f001 f981 	bl	8002958 <xTaskRemoveFromEventList>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800165c:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <xQueueGenericSend+0x200>)
 800165e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f3bf 8f4f 	dsb	sy
 8001668:	f3bf 8f6f 	isb	sy
 800166c:	e00a      	b.n	8001684 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800166e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001674:	4b39      	ldr	r3, [pc, #228]	@ (800175c <xQueueGenericSend+0x200>)
 8001676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	f3bf 8f4f 	dsb	sy
 8001680:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001684:	f002 f8ca 	bl	800381c <vPortExitCritical>
				return pdPASS;
 8001688:	2301      	movs	r3, #1
 800168a:	e063      	b.n	8001754 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001692:	f002 f8c3 	bl	800381c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001696:	2300      	movs	r3, #0
 8001698:	e05c      	b.n	8001754 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800169a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800169c:	2b00      	cmp	r3, #0
 800169e:	d106      	bne.n	80016ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 f9bb 	bl	8002a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80016ae:	f002 f8b5 	bl	800381c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80016b2:	f000 ff23 	bl	80024fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80016b6:	f002 f87f 	bl	80037b8 <vPortEnterCritical>
 80016ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c6:	d103      	bne.n	80016d0 <xQueueGenericSend+0x174>
 80016c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d103      	bne.n	80016e6 <xQueueGenericSend+0x18a>
 80016de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80016e6:	f002 f899 	bl	800381c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016ea:	1d3a      	adds	r2, r7, #4
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 f9aa 	bl	8002a4c <xTaskCheckForTimeOut>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d124      	bne.n	8001748 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80016fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001700:	f000 faa6 	bl	8001c50 <prvIsQueueFull>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d018      	beq.n	800173c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800170a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170c:	3310      	adds	r3, #16
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f8ce 	bl	80028b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800171a:	f000 fa31 	bl	8001b80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800171e:	f000 fefb 	bl	8002518 <xTaskResumeAll>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f af7c 	bne.w	8001622 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <xQueueGenericSend+0x200>)
 800172c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	f3bf 8f4f 	dsb	sy
 8001736:	f3bf 8f6f 	isb	sy
 800173a:	e772      	b.n	8001622 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800173c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800173e:	f000 fa1f 	bl	8001b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001742:	f000 fee9 	bl	8002518 <xTaskResumeAll>
 8001746:	e76c      	b.n	8001622 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800174a:	f000 fa19 	bl	8001b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800174e:	f000 fee3 	bl	8002518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001752:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001754:	4618      	mov	r0, r3
 8001756:	3738      	adds	r7, #56	@ 0x38
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	e000ed04 	.word	0xe000ed04

08001760 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b090      	sub	sp, #64	@ 0x40
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10b      	bne.n	8001790 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800177c:	f383 8811 	msr	BASEPRI, r3
 8001780:	f3bf 8f6f 	isb	sy
 8001784:	f3bf 8f4f 	dsb	sy
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800178a:	bf00      	nop
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <xQueueGenericSendFromISR+0x3e>
 8001796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <xQueueGenericSendFromISR+0x42>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <xQueueGenericSendFromISR+0x44>
 80017a2:	2300      	movs	r3, #0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10b      	bne.n	80017c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80017a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017ac:	f383 8811 	msr	BASEPRI, r3
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d103      	bne.n	80017ce <xQueueGenericSendFromISR+0x6e>
 80017c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <xQueueGenericSendFromISR+0x72>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <xQueueGenericSendFromISR+0x74>
 80017d2:	2300      	movs	r3, #0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10b      	bne.n	80017f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80017d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017dc:	f383 8811 	msr	BASEPRI, r3
 80017e0:	f3bf 8f6f 	isb	sy
 80017e4:	f3bf 8f4f 	dsb	sy
 80017e8:	623b      	str	r3, [r7, #32]
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80017f0:	f002 f8c2 	bl	8003978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80017f4:	f3ef 8211 	mrs	r2, BASEPRI
 80017f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	61fa      	str	r2, [r7, #28]
 800180a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800180c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800180e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001812:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001818:	429a      	cmp	r2, r3
 800181a:	d302      	bcc.n	8001822 <xQueueGenericSendFromISR+0xc2>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d12f      	bne.n	8001882 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001824:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001828:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800182c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800182e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001838:	f000 f912 	bl	8001a60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800183c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d112      	bne.n	800186c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	2b00      	cmp	r3, #0
 800184c:	d016      	beq.n	800187c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001850:	3324      	adds	r3, #36	@ 0x24
 8001852:	4618      	mov	r0, r3
 8001854:	f001 f880 	bl	8002958 <xTaskRemoveFromEventList>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00e      	beq.n	800187c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00b      	beq.n	800187c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e007      	b.n	800187c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800186c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001870:	3301      	adds	r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	b25a      	sxtb	r2, r3
 8001876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800187c:	2301      	movs	r3, #1
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001880:	e001      	b.n	8001886 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001882:	2300      	movs	r3, #0
 8001884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001888:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001890:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001894:	4618      	mov	r0, r3
 8001896:	3740      	adds	r7, #64	@ 0x40
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	@ 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80018b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10b      	bne.n	80018ce <xQueueReceive+0x32>
	__asm volatile
 80018b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ba:	f383 8811 	msr	BASEPRI, r3
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	623b      	str	r3, [r7, #32]
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	e7fd      	b.n	80018ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <xQueueReceive+0x40>
 80018d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <xQueueReceive+0x44>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <xQueueReceive+0x46>
 80018e0:	2300      	movs	r3, #0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10b      	bne.n	80018fe <xQueueReceive+0x62>
	__asm volatile
 80018e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ea:	f383 8811 	msr	BASEPRI, r3
 80018ee:	f3bf 8f6f 	isb	sy
 80018f2:	f3bf 8f4f 	dsb	sy
 80018f6:	61fb      	str	r3, [r7, #28]
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	e7fd      	b.n	80018fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018fe:	f001 f9f1 	bl	8002ce4 <xTaskGetSchedulerState>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <xQueueReceive+0x72>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <xQueueReceive+0x76>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <xQueueReceive+0x78>
 8001912:	2300      	movs	r3, #0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10b      	bne.n	8001930 <xQueueReceive+0x94>
	__asm volatile
 8001918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800191c:	f383 8811 	msr	BASEPRI, r3
 8001920:	f3bf 8f6f 	isb	sy
 8001924:	f3bf 8f4f 	dsb	sy
 8001928:	61bb      	str	r3, [r7, #24]
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001930:	f001 ff42 	bl	80037b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01f      	beq.n	8001980 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001944:	f000 f8f6 	bl	8001b34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00f      	beq.n	8001978 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195a:	3310      	adds	r3, #16
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fffb 	bl	8002958 <xTaskRemoveFromEventList>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001968:	4b3c      	ldr	r3, [pc, #240]	@ (8001a5c <xQueueReceive+0x1c0>)
 800196a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001978:	f001 ff50 	bl	800381c <vPortExitCritical>
				return pdPASS;
 800197c:	2301      	movs	r3, #1
 800197e:	e069      	b.n	8001a54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001986:	f001 ff49 	bl	800381c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800198a:	2300      	movs	r3, #0
 800198c:	e062      	b.n	8001a54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800198e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d106      	bne.n	80019a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	4618      	mov	r0, r3
 800199a:	f001 f841 	bl	8002a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800199e:	2301      	movs	r3, #1
 80019a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80019a2:	f001 ff3b 	bl	800381c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80019a6:	f000 fda9 	bl	80024fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80019aa:	f001 ff05 	bl	80037b8 <vPortEnterCritical>
 80019ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ba:	d103      	bne.n	80019c4 <xQueueReceive+0x128>
 80019bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d103      	bne.n	80019da <xQueueReceive+0x13e>
 80019d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80019da:	f001 ff1f 	bl	800381c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019de:	1d3a      	adds	r2, r7, #4
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f001 f830 	bl	8002a4c <xTaskCheckForTimeOut>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d123      	bne.n	8001a3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80019f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019f4:	f000 f916 	bl	8001c24 <prvIsQueueEmpty>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d017      	beq.n	8001a2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80019fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a00:	3324      	adds	r3, #36	@ 0x24
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 ff54 	bl	80028b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001a0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a0e:	f000 f8b7 	bl	8001b80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001a12:	f000 fd81 	bl	8002518 <xTaskResumeAll>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d189      	bne.n	8001930 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <xQueueReceive+0x1c0>)
 8001a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f3bf 8f4f 	dsb	sy
 8001a28:	f3bf 8f6f 	isb	sy
 8001a2c:	e780      	b.n	8001930 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a30:	f000 f8a6 	bl	8001b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a34:	f000 fd70 	bl	8002518 <xTaskResumeAll>
 8001a38:	e77a      	b.n	8001930 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a3c:	f000 f8a0 	bl	8001b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a40:	f000 fd6a 	bl	8002518 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a46:	f000 f8ed 	bl	8001c24 <prvIsQueueEmpty>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f43f af6f 	beq.w	8001930 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001a52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	e000ed04 	.word	0xe000ed04

08001a60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10d      	bne.n	8001a9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d14d      	bne.n	8001b22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 f948 	bl	8002d20 <xTaskPriorityDisinherit>
 8001a90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	e043      	b.n	8001b22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d119      	bne.n	8001ad4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6858      	ldr	r0, [r3, #4]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	f002 fced 	bl	800448a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	441a      	add	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d32b      	bcc.n	8001b22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	e026      	b.n	8001b22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68d8      	ldr	r0, [r3, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	461a      	mov	r2, r3
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	f002 fcd3 	bl	800448a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	425b      	negs	r3, r3
 8001aee:	441a      	add	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	425b      	negs	r3, r3
 8001b0a:	441a      	add	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d105      	bne.n	8001b22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001b2a:	697b      	ldr	r3, [r7, #20]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d018      	beq.n	8001b78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	441a      	add	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d303      	bcc.n	8001b68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68d9      	ldr	r1, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	461a      	mov	r2, r3
 8001b72:	6838      	ldr	r0, [r7, #0]
 8001b74:	f002 fc89 	bl	800448a <memcpy>
	}
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001b88:	f001 fe16 	bl	80037b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b94:	e011      	b.n	8001bba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d012      	beq.n	8001bc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3324      	adds	r3, #36	@ 0x24
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fed8 	bl	8002958 <xTaskRemoveFromEventList>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001bae:	f000 ffb1 	bl	8002b14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	dce9      	bgt.n	8001b96 <prvUnlockQueue+0x16>
 8001bc2:	e000      	b.n	8001bc6 <prvUnlockQueue+0x46>
					break;
 8001bc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	22ff      	movs	r2, #255	@ 0xff
 8001bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8001bce:	f001 fe25 	bl	800381c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001bd2:	f001 fdf1 	bl	80037b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001bdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bde:	e011      	b.n	8001c04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3310      	adds	r3, #16
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 feb3 	bl	8002958 <xTaskRemoveFromEventList>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001bf8:	f000 ff8c 	bl	8002b14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001bfc:	7bbb      	ldrb	r3, [r7, #14]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	dce9      	bgt.n	8001be0 <prvUnlockQueue+0x60>
 8001c0c:	e000      	b.n	8001c10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001c0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	22ff      	movs	r2, #255	@ 0xff
 8001c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001c18:	f001 fe00 	bl	800381c <vPortExitCritical>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001c2c:	f001 fdc4 	bl	80037b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e001      	b.n	8001c42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001c42:	f001 fdeb 	bl	800381c <vPortExitCritical>

	return xReturn;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001c58:	f001 fdae 	bl	80037b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d102      	bne.n	8001c6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e001      	b.n	8001c72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001c72:	f001 fdd3 	bl	800381c <vPortExitCritical>

	return xReturn;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	e014      	b.n	8001cba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001c90:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd0 <vQueueAddToRegistry+0x50>)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10b      	bne.n	8001cb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001c9c:	490c      	ldr	r1, [pc, #48]	@ (8001cd0 <vQueueAddToRegistry+0x50>)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <vQueueAddToRegistry+0x50>)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001cb2:	e006      	b.n	8001cc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b07      	cmp	r3, #7
 8001cbe:	d9e7      	bls.n	8001c90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2000082c 	.word	0x2000082c

08001cd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001ce4:	f001 fd68 	bl	80037b8 <vPortEnterCritical>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d103      	bne.n	8001cfe <vQueueWaitForMessageRestricted+0x2a>
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0a:	d103      	bne.n	8001d14 <vQueueWaitForMessageRestricted+0x40>
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d14:	f001 fd82 	bl	800381c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d106      	bne.n	8001d2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3324      	adds	r3, #36	@ 0x24
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fde9 	bl	8002900 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001d2e:	6978      	ldr	r0, [r7, #20]
 8001d30:	f7ff ff26 	bl	8001b80 <prvUnlockQueue>
	}
 8001d34:	bf00      	nop
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	@ 0x38
 8001d40:	af04      	add	r7, sp, #16
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10b      	bne.n	8001d68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	623b      	str	r3, [r7, #32]
}
 8001d62:	bf00      	nop
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10b      	bne.n	8001d86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d72:	f383 8811 	msr	BASEPRI, r3
 8001d76:	f3bf 8f6f 	isb	sy
 8001d7a:	f3bf 8f4f 	dsb	sy
 8001d7e:	61fb      	str	r3, [r7, #28]
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	e7fd      	b.n	8001d82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001d86:	23a8      	movs	r3, #168	@ 0xa8
 8001d88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2ba8      	cmp	r3, #168	@ 0xa8
 8001d8e:	d00b      	beq.n	8001da8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	61bb      	str	r3, [r7, #24]
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001da8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01e      	beq.n	8001dee <xTaskCreateStatic+0xb2>
 8001db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01b      	beq.n	8001dee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9303      	str	r3, [sp, #12]
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f851 	bl	8001e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001de6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001de8:	f000 f8f6 	bl	8001fd8 <prvAddNewTaskToReadyList>
 8001dec:	e001      	b.n	8001df2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001df2:	697b      	ldr	r3, [r7, #20]
	}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3728      	adds	r7, #40	@ 0x28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	@ 0x30
 8001e00:	af04      	add	r7, sp, #16
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 fdf3 	bl	80039fc <pvPortMalloc>
 8001e16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00e      	beq.n	8001e3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001e1e:	20a8      	movs	r0, #168	@ 0xa8
 8001e20:	f001 fdec 	bl	80039fc <pvPortMalloc>
 8001e24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e32:	e005      	b.n	8001e40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e34:	6978      	ldr	r0, [r7, #20]
 8001e36:	f001 feaf 	bl	8003b98 <vPortFree>
 8001e3a:	e001      	b.n	8001e40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d017      	beq.n	8001e76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e4e:	88fa      	ldrh	r2, [r7, #6]
 8001e50:	2300      	movs	r3, #0
 8001e52:	9303      	str	r3, [sp, #12]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f80f 	bl	8001e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e6a:	69f8      	ldr	r0, [r7, #28]
 8001e6c:	f000 f8b4 	bl	8001fd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001e70:	2301      	movs	r3, #1
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	e002      	b.n	8001e7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
	}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3720      	adds	r7, #32
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	21a5      	movs	r1, #165	@ 0xa5
 8001ea2:	f002 f9e8 	bl	8004276 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8001eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ece:	f383 8811 	msr	BASEPRI, r3
 8001ed2:	f3bf 8f6f 	isb	sy
 8001ed6:	f3bf 8f4f 	dsb	sy
 8001eda:	617b      	str	r3, [r7, #20]
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	e7fd      	b.n	8001ede <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01f      	beq.n	8001f28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	e012      	b.n	8001f14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	7819      	ldrb	r1, [r3, #0]
 8001ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4413      	add	r3, r2
 8001efc:	3334      	adds	r3, #52	@ 0x34
 8001efe:	460a      	mov	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	d9e9      	bls.n	8001eee <prvInitialiseNewTask+0x66>
 8001f1a:	e000      	b.n	8001f1e <prvInitialiseNewTask+0x96>
			{
				break;
 8001f1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f26:	e003      	b.n	8001f30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f32:	2b37      	cmp	r3, #55	@ 0x37
 8001f34:	d901      	bls.n	8001f3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f36:	2337      	movs	r3, #55	@ 0x37
 8001f38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f48:	2200      	movs	r2, #0
 8001f4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f965 	bl	8001220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f58:	3318      	adds	r3, #24
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f960 	bl	8001220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f88:	3354      	adds	r3, #84	@ 0x54
 8001f8a:	224c      	movs	r2, #76	@ 0x4c
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 f971 	bl	8004276 <memset>
 8001f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f96:	4a0d      	ldr	r2, [pc, #52]	@ (8001fcc <prvInitialiseNewTask+0x144>)
 8001f98:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd0 <prvInitialiseNewTask+0x148>)
 8001f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd4 <prvInitialiseNewTask+0x14c>)
 8001fa4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	69b8      	ldr	r0, [r7, #24]
 8001fac:	f001 fad6 	bl	800355c <pxPortInitialiseStack>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20004ac8 	.word	0x20004ac8
 8001fd0:	20004b30 	.word	0x20004b30
 8001fd4:	20004b98 	.word	0x20004b98

08001fd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001fe0:	f001 fbea 	bl	80037b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800209c <prvAddNewTaskToReadyList+0xc4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a2c      	ldr	r2, [pc, #176]	@ (800209c <prvAddNewTaskToReadyList+0xc4>)
 8001fec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001fee:	4b2c      	ldr	r3, [pc, #176]	@ (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <prvAddNewTaskToReadyList+0xc4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d110      	bne.n	8002026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002004:	f000 fdaa 	bl	8002b5c <prvInitialiseTaskLists>
 8002008:	e00d      	b.n	8002026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800200a:	4b26      	ldr	r3, [pc, #152]	@ (80020a4 <prvAddNewTaskToReadyList+0xcc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002012:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	429a      	cmp	r2, r3
 800201e:	d802      	bhi.n	8002026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002020:	4a1f      	ldr	r2, [pc, #124]	@ (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002026:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <prvAddNewTaskToReadyList+0xd0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	4a1e      	ldr	r2, [pc, #120]	@ (80020a8 <prvAddNewTaskToReadyList+0xd0>)
 800202e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002030:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <prvAddNewTaskToReadyList+0xd0>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <prvAddNewTaskToReadyList+0xd4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d903      	bls.n	800204c <prvAddNewTaskToReadyList+0x74>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	4a18      	ldr	r2, [pc, #96]	@ (80020ac <prvAddNewTaskToReadyList+0xd4>)
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4a15      	ldr	r2, [pc, #84]	@ (80020b0 <prvAddNewTaskToReadyList+0xd8>)
 800205a:	441a      	add	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f7ff f8e9 	bl	800123a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002068:	f001 fbd8 	bl	800381c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800206c:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <prvAddNewTaskToReadyList+0xcc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00e      	beq.n	8002092 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002074:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <prvAddNewTaskToReadyList+0xc8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207e:	429a      	cmp	r2, r3
 8002080:	d207      	bcs.n	8002092 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002082:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <prvAddNewTaskToReadyList+0xdc>)
 8002084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000d40 	.word	0x20000d40
 80020a0:	2000086c 	.word	0x2000086c
 80020a4:	20000d4c 	.word	0x20000d4c
 80020a8:	20000d5c 	.word	0x20000d5c
 80020ac:	20000d48 	.word	0x20000d48
 80020b0:	20000870 	.word	0x20000870
 80020b4:	e000ed04 	.word	0xe000ed04

080020b8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80020c0:	f001 fb7a 	bl	80037b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <vTaskDelete+0x18>
 80020ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002180 <vTaskDelete+0xc8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	e000      	b.n	80020d2 <vTaskDelete+0x1a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3304      	adds	r3, #4
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f90b 	bl	80012f4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3318      	adds	r3, #24
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f902 	bl	80012f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80020f0:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <vTaskDelete+0xcc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	4a23      	ldr	r2, [pc, #140]	@ (8002184 <vTaskDelete+0xcc>)
 80020f8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80020fa:	4b21      	ldr	r3, [pc, #132]	@ (8002180 <vTaskDelete+0xc8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d10b      	bne.n	800211c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3304      	adds	r3, #4
 8002108:	4619      	mov	r1, r3
 800210a:	481f      	ldr	r0, [pc, #124]	@ (8002188 <vTaskDelete+0xd0>)
 800210c:	f7ff f895 	bl	800123a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002110:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <vTaskDelete+0xd4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	4a1d      	ldr	r2, [pc, #116]	@ (800218c <vTaskDelete+0xd4>)
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e009      	b.n	8002130 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800211c:	4b1c      	ldr	r3, [pc, #112]	@ (8002190 <vTaskDelete+0xd8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3b01      	subs	r3, #1
 8002122:	4a1b      	ldr	r2, [pc, #108]	@ (8002190 <vTaskDelete+0xd8>)
 8002124:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 fd86 	bl	8002c38 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800212c:	f000 fdba 	bl	8002ca4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8002130:	f001 fb74 	bl	800381c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002134:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <vTaskDelete+0xdc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01c      	beq.n	8002176 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800213c:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <vTaskDelete+0xc8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	429a      	cmp	r2, r3
 8002144:	d117      	bne.n	8002176 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002146:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <vTaskDelete+0xe0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <vTaskDelete+0xae>
	__asm volatile
 800214e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002152:	f383 8811 	msr	BASEPRI, r3
 8002156:	f3bf 8f6f 	isb	sy
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	60bb      	str	r3, [r7, #8]
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	e7fd      	b.n	8002162 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8002166:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <vTaskDelete+0xe4>)
 8002168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f3bf 8f4f 	dsb	sy
 8002172:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000086c 	.word	0x2000086c
 8002184:	20000d5c 	.word	0x20000d5c
 8002188:	20000d14 	.word	0x20000d14
 800218c:	20000d28 	.word	0x20000d28
 8002190:	20000d40 	.word	0x20000d40
 8002194:	20000d4c 	.word	0x20000d4c
 8002198:	20000d68 	.word	0x20000d68
 800219c:	e000ed04 	.word	0xe000ed04

080021a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d018      	beq.n	80021e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80021b2:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <vTaskDelay+0x64>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <vTaskDelay+0x32>
	__asm volatile
 80021ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	60bb      	str	r3, [r7, #8]
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	e7fd      	b.n	80021ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80021d2:	f000 f993 	bl	80024fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021d6:	2100      	movs	r1, #0
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fe11 	bl	8002e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80021de:	f000 f99b 	bl	8002518 <xTaskResumeAll>
 80021e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <vTaskDelay+0x68>)
 80021ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000d68 	.word	0x20000d68
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002214:	f001 fad0 	bl	80037b8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <vTaskSuspend+0x18>
 800221e:	4b30      	ldr	r3, [pc, #192]	@ (80022e0 <vTaskSuspend+0xd4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	e000      	b.n	8002226 <vTaskSuspend+0x1a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3304      	adds	r3, #4
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff f861 	bl	80012f4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	2b00      	cmp	r3, #0
 8002238:	d004      	beq.n	8002244 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3318      	adds	r3, #24
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff f858 	bl	80012f4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4826      	ldr	r0, [pc, #152]	@ (80022e4 <vTaskSuspend+0xd8>)
 800224c:	f7fe fff5 	bl	800123a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d103      	bne.n	8002264 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8002264:	f001 fada 	bl	800381c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8002268:	4b1f      	ldr	r3, [pc, #124]	@ (80022e8 <vTaskSuspend+0xdc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002270:	f001 faa2 	bl	80037b8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002274:	f000 fd16 	bl	8002ca4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8002278:	f001 fad0 	bl	800381c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800227c:	4b18      	ldr	r3, [pc, #96]	@ (80022e0 <vTaskSuspend+0xd4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	429a      	cmp	r2, r3
 8002284:	d128      	bne.n	80022d8 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8002286:	4b18      	ldr	r3, [pc, #96]	@ (80022e8 <vTaskSuspend+0xdc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d018      	beq.n	80022c0 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800228e:	4b17      	ldr	r3, [pc, #92]	@ (80022ec <vTaskSuspend+0xe0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <vTaskSuspend+0xa2>
	__asm volatile
 8002296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	60bb      	str	r3, [r7, #8]
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	e7fd      	b.n	80022aa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <vTaskSuspend+0xe4>)
 80022b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f3bf 8f4f 	dsb	sy
 80022ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022be:	e00b      	b.n	80022d8 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <vTaskSuspend+0xd8>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <vTaskSuspend+0xe8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d103      	bne.n	80022d4 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <vTaskSuspend+0xd4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
	}
 80022d2:	e001      	b.n	80022d8 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 80022d4:	f000 fa88 	bl	80027e8 <vTaskSwitchContext>
	}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000086c 	.word	0x2000086c
 80022e4:	20000d2c 	.word	0x20000d2c
 80022e8:	20000d4c 	.word	0x20000d4c
 80022ec:	20000d68 	.word	0x20000d68
 80022f0:	e000ed04 	.word	0xe000ed04
 80022f4:	20000d40 	.word	0x20000d40

080022f8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10b      	bne.n	8002326 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800230e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	60fb      	str	r3, [r7, #12]
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	e7fd      	b.n	8002322 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <prvTaskIsTaskSuspended+0x5c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d10a      	bne.n	8002346 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <prvTaskIsTaskSuspended+0x60>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d005      	beq.n	8002346 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8002342:	2301      	movs	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002346:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	20000d2c 	.word	0x20000d2c
 8002358:	20000d00 	.word	0x20000d00

0800235c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10b      	bne.n	8002386 <vTaskResume+0x2a>
	__asm volatile
 800236e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002372:	f383 8811 	msr	BASEPRI, r3
 8002376:	f3bf 8f6f 	isb	sy
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	60bb      	str	r3, [r7, #8]
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	e7fd      	b.n	8002382 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <vTaskResume+0xb0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d038      	beq.n	8002402 <vTaskResume+0xa6>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d035      	beq.n	8002402 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8002396:	f001 fa0f 	bl	80037b8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff ffac 	bl	80022f8 <prvTaskIsTaskSuspended>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d02b      	beq.n	80023fe <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3304      	adds	r3, #4
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe ffa2 	bl	80012f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b4:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <vTaskResume+0xb4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d903      	bls.n	80023c4 <vTaskResume+0x68>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	4a13      	ldr	r2, [pc, #76]	@ (8002410 <vTaskResume+0xb4>)
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4a10      	ldr	r2, [pc, #64]	@ (8002414 <vTaskResume+0xb8>)
 80023d2:	441a      	add	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f7fe ff2d 	bl	800123a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023e4:	4b09      	ldr	r3, [pc, #36]	@ (800240c <vTaskResume+0xb0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d307      	bcc.n	80023fe <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <vTaskResume+0xbc>)
 80023f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80023fe:	f001 fa0d 	bl	800381c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000086c 	.word	0x2000086c
 8002410:	20000d48 	.word	0x20000d48
 8002414:	20000870 	.word	0x20000870
 8002418:	e000ed04 	.word	0xe000ed04

0800241c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	@ 0x28
 8002420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800242a:	463a      	mov	r2, r7
 800242c:	1d39      	adds	r1, r7, #4
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fea0 	bl	8001178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002438:	6839      	ldr	r1, [r7, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	9202      	str	r2, [sp, #8]
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2300      	movs	r3, #0
 8002448:	460a      	mov	r2, r1
 800244a:	4924      	ldr	r1, [pc, #144]	@ (80024dc <vTaskStartScheduler+0xc0>)
 800244c:	4824      	ldr	r0, [pc, #144]	@ (80024e0 <vTaskStartScheduler+0xc4>)
 800244e:	f7ff fc75 	bl	8001d3c <xTaskCreateStatic>
 8002452:	4603      	mov	r3, r0
 8002454:	4a23      	ldr	r2, [pc, #140]	@ (80024e4 <vTaskStartScheduler+0xc8>)
 8002456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002458:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <vTaskStartScheduler+0xc8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002460:	2301      	movs	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e001      	b.n	800246a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d102      	bne.n	8002476 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002470:	f000 fd1a 	bl	8002ea8 <xTimerCreateTimerTask>
 8002474:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d11b      	bne.n	80024b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	613b      	str	r3, [r7, #16]
}
 800248e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002490:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <vTaskStartScheduler+0xcc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3354      	adds	r3, #84	@ 0x54
 8002496:	4a15      	ldr	r2, [pc, #84]	@ (80024ec <vTaskStartScheduler+0xd0>)
 8002498:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <vTaskStartScheduler+0xd4>)
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80024a2:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <vTaskStartScheduler+0xd8>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024a8:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <vTaskStartScheduler+0xdc>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80024ae:	f001 f8df 	bl	8003670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80024b2:	e00f      	b.n	80024d4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ba:	d10b      	bne.n	80024d4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	60fb      	str	r3, [r7, #12]
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <vTaskStartScheduler+0xb4>
}
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	08005478 	.word	0x08005478
 80024e0:	08002b2d 	.word	0x08002b2d
 80024e4:	20000d64 	.word	0x20000d64
 80024e8:	2000086c 	.word	0x2000086c
 80024ec:	2000001c 	.word	0x2000001c
 80024f0:	20000d60 	.word	0x20000d60
 80024f4:	20000d4c 	.word	0x20000d4c
 80024f8:	20000d44 	.word	0x20000d44

080024fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <vTaskSuspendAll+0x18>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	4a03      	ldr	r2, [pc, #12]	@ (8002514 <vTaskSuspendAll+0x18>)
 8002508:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	20000d68 	.word	0x20000d68

08002518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002526:	4b42      	ldr	r3, [pc, #264]	@ (8002630 <xTaskResumeAll+0x118>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10b      	bne.n	8002546 <xTaskResumeAll+0x2e>
	__asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	603b      	str	r3, [r7, #0]
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	e7fd      	b.n	8002542 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002546:	f001 f937 	bl	80037b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800254a:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <xTaskResumeAll+0x118>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3b01      	subs	r3, #1
 8002550:	4a37      	ldr	r2, [pc, #220]	@ (8002630 <xTaskResumeAll+0x118>)
 8002552:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002554:	4b36      	ldr	r3, [pc, #216]	@ (8002630 <xTaskResumeAll+0x118>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d162      	bne.n	8002622 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800255c:	4b35      	ldr	r3, [pc, #212]	@ (8002634 <xTaskResumeAll+0x11c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d05e      	beq.n	8002622 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002564:	e02f      	b.n	80025c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002566:	4b34      	ldr	r3, [pc, #208]	@ (8002638 <xTaskResumeAll+0x120>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3318      	adds	r3, #24
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe febe 	bl	80012f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3304      	adds	r3, #4
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe feb9 	bl	80012f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002586:	4b2d      	ldr	r3, [pc, #180]	@ (800263c <xTaskResumeAll+0x124>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d903      	bls.n	8002596 <xTaskResumeAll+0x7e>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002592:	4a2a      	ldr	r2, [pc, #168]	@ (800263c <xTaskResumeAll+0x124>)
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4a27      	ldr	r2, [pc, #156]	@ (8002640 <xTaskResumeAll+0x128>)
 80025a4:	441a      	add	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3304      	adds	r3, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4610      	mov	r0, r2
 80025ae:	f7fe fe44 	bl	800123a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b6:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <xTaskResumeAll+0x12c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025bc:	429a      	cmp	r2, r3
 80025be:	d302      	bcc.n	80025c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80025c0:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <xTaskResumeAll+0x130>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <xTaskResumeAll+0x120>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1cb      	bne.n	8002566 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80025d4:	f000 fb66 	bl	8002ca4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025d8:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <xTaskResumeAll+0x134>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d010      	beq.n	8002606 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025e4:	f000 f846 	bl	8002674 <xTaskIncrementTick>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80025ee:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <xTaskResumeAll+0x130>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f1      	bne.n	80025e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002600:	4b12      	ldr	r3, [pc, #72]	@ (800264c <xTaskResumeAll+0x134>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <xTaskResumeAll+0x130>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800260e:	2301      	movs	r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <xTaskResumeAll+0x138>)
 8002614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002622:	f001 f8fb 	bl	800381c <vPortExitCritical>

	return xAlreadyYielded;
 8002626:	68bb      	ldr	r3, [r7, #8]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000d68 	.word	0x20000d68
 8002634:	20000d40 	.word	0x20000d40
 8002638:	20000d00 	.word	0x20000d00
 800263c:	20000d48 	.word	0x20000d48
 8002640:	20000870 	.word	0x20000870
 8002644:	2000086c 	.word	0x2000086c
 8002648:	20000d54 	.word	0x20000d54
 800264c:	20000d50 	.word	0x20000d50
 8002650:	e000ed04 	.word	0xe000ed04

08002654 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800265a:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <xTaskGetTickCount+0x1c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000d44 	.word	0x20000d44

08002674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800267e:	4b4f      	ldr	r3, [pc, #316]	@ (80027bc <xTaskIncrementTick+0x148>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 8090 	bne.w	80027a8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002688:	4b4d      	ldr	r3, [pc, #308]	@ (80027c0 <xTaskIncrementTick+0x14c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002690:	4a4b      	ldr	r2, [pc, #300]	@ (80027c0 <xTaskIncrementTick+0x14c>)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d121      	bne.n	80026e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800269c:	4b49      	ldr	r3, [pc, #292]	@ (80027c4 <xTaskIncrementTick+0x150>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <xTaskIncrementTick+0x4a>
	__asm volatile
 80026a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	603b      	str	r3, [r7, #0]
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <xTaskIncrementTick+0x46>
 80026be:	4b41      	ldr	r3, [pc, #260]	@ (80027c4 <xTaskIncrementTick+0x150>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	4b40      	ldr	r3, [pc, #256]	@ (80027c8 <xTaskIncrementTick+0x154>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a3e      	ldr	r2, [pc, #248]	@ (80027c4 <xTaskIncrementTick+0x150>)
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4a3e      	ldr	r2, [pc, #248]	@ (80027c8 <xTaskIncrementTick+0x154>)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b3e      	ldr	r3, [pc, #248]	@ (80027cc <xTaskIncrementTick+0x158>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	4a3c      	ldr	r2, [pc, #240]	@ (80027cc <xTaskIncrementTick+0x158>)
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	f000 fae2 	bl	8002ca4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026e0:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <xTaskIncrementTick+0x15c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d349      	bcc.n	800277e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ea:	4b36      	ldr	r3, [pc, #216]	@ (80027c4 <xTaskIncrementTick+0x150>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d104      	bne.n	80026fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f4:	4b36      	ldr	r3, [pc, #216]	@ (80027d0 <xTaskIncrementTick+0x15c>)
 80026f6:	f04f 32ff 	mov.w	r2, #4294967295
 80026fa:	601a      	str	r2, [r3, #0]
					break;
 80026fc:	e03f      	b.n	800277e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026fe:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <xTaskIncrementTick+0x150>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	d203      	bcs.n	800271e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002716:	4a2e      	ldr	r2, [pc, #184]	@ (80027d0 <xTaskIncrementTick+0x15c>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800271c:	e02f      	b.n	800277e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3304      	adds	r3, #4
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fde6 	bl	80012f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d004      	beq.n	800273a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	3318      	adds	r3, #24
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fddd 	bl	80012f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800273e:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <xTaskIncrementTick+0x160>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d903      	bls.n	800274e <xTaskIncrementTick+0xda>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	4a22      	ldr	r2, [pc, #136]	@ (80027d4 <xTaskIncrementTick+0x160>)
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4a1f      	ldr	r2, [pc, #124]	@ (80027d8 <xTaskIncrementTick+0x164>)
 800275c:	441a      	add	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3304      	adds	r3, #4
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f7fe fd68 	bl	800123a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800276e:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <xTaskIncrementTick+0x168>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	429a      	cmp	r2, r3
 8002776:	d3b8      	bcc.n	80026ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002778:	2301      	movs	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800277c:	e7b5      	b.n	80026ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800277e:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <xTaskIncrementTick+0x168>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002784:	4914      	ldr	r1, [pc, #80]	@ (80027d8 <xTaskIncrementTick+0x164>)
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d901      	bls.n	800279a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002796:	2301      	movs	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800279a:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <xTaskIncrementTick+0x16c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e004      	b.n	80027b2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <xTaskIncrementTick+0x170>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	4a0d      	ldr	r2, [pc, #52]	@ (80027e4 <xTaskIncrementTick+0x170>)
 80027b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80027b2:	697b      	ldr	r3, [r7, #20]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000d68 	.word	0x20000d68
 80027c0:	20000d44 	.word	0x20000d44
 80027c4:	20000cf8 	.word	0x20000cf8
 80027c8:	20000cfc 	.word	0x20000cfc
 80027cc:	20000d58 	.word	0x20000d58
 80027d0:	20000d60 	.word	0x20000d60
 80027d4:	20000d48 	.word	0x20000d48
 80027d8:	20000870 	.word	0x20000870
 80027dc:	2000086c 	.word	0x2000086c
 80027e0:	20000d54 	.word	0x20000d54
 80027e4:	20000d50 	.word	0x20000d50

080027e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027ee:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <vTaskSwitchContext+0xb4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027f6:	4b2a      	ldr	r3, [pc, #168]	@ (80028a0 <vTaskSwitchContext+0xb8>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80027fc:	e047      	b.n	800288e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80027fe:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <vTaskSwitchContext+0xb8>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002804:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <vTaskSwitchContext+0xbc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e011      	b.n	8002830 <vTaskSwitchContext+0x48>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10b      	bne.n	800282a <vTaskSwitchContext+0x42>
	__asm volatile
 8002812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002816:	f383 8811 	msr	BASEPRI, r3
 800281a:	f3bf 8f6f 	isb	sy
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	607b      	str	r3, [r7, #4]
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	e7fd      	b.n	8002826 <vTaskSwitchContext+0x3e>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b01      	subs	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	491d      	ldr	r1, [pc, #116]	@ (80028a8 <vTaskSwitchContext+0xc0>)
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0e3      	beq.n	800280c <vTaskSwitchContext+0x24>
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <vTaskSwitchContext+0xc0>)
 8002850:	4413      	add	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3308      	adds	r3, #8
 8002866:	429a      	cmp	r2, r3
 8002868:	d104      	bne.n	8002874 <vTaskSwitchContext+0x8c>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <vTaskSwitchContext+0xc4>)
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <vTaskSwitchContext+0xbc>)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <vTaskSwitchContext+0xc4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3354      	adds	r3, #84	@ 0x54
 800288a:	4a09      	ldr	r2, [pc, #36]	@ (80028b0 <vTaskSwitchContext+0xc8>)
 800288c:	6013      	str	r3, [r2, #0]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000d68 	.word	0x20000d68
 80028a0:	20000d54 	.word	0x20000d54
 80028a4:	20000d48 	.word	0x20000d48
 80028a8:	20000870 	.word	0x20000870
 80028ac:	2000086c 	.word	0x2000086c
 80028b0:	2000001c 	.word	0x2000001c

080028b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	60fb      	str	r3, [r7, #12]
}
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028dc:	4b07      	ldr	r3, [pc, #28]	@ (80028fc <vTaskPlaceOnEventList+0x48>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3318      	adds	r3, #24
 80028e2:	4619      	mov	r1, r3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe fccc 	bl	8001282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80028ea:	2101      	movs	r1, #1
 80028ec:	6838      	ldr	r0, [r7, #0]
 80028ee:	f000 fa87 	bl	8002e00 <prvAddCurrentTaskToDelayedList>
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000086c 	.word	0x2000086c

08002900 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10b      	bne.n	800292a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	617b      	str	r3, [r7, #20]
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	e7fd      	b.n	8002926 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <vTaskPlaceOnEventListRestricted+0x54>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3318      	adds	r3, #24
 8002930:	4619      	mov	r1, r3
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f7fe fc81 	bl	800123a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68b8      	ldr	r0, [r7, #8]
 8002948:	f000 fa5a 	bl	8002e00 <prvAddCurrentTaskToDelayedList>
	}
 800294c:	bf00      	nop
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	2000086c 	.word	0x2000086c

08002958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10b      	bne.n	8002986 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800296e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	60fb      	str	r3, [r7, #12]
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	e7fd      	b.n	8002982 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	3318      	adds	r3, #24
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fcb2 	bl	80012f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002990:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <xTaskRemoveFromEventList+0xb0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d11d      	bne.n	80029d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3304      	adds	r3, #4
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fca9 	bl	80012f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <xTaskRemoveFromEventList+0xb4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d903      	bls.n	80029b6 <xTaskRemoveFromEventList+0x5e>
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	4a16      	ldr	r2, [pc, #88]	@ (8002a0c <xTaskRemoveFromEventList+0xb4>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <xTaskRemoveFromEventList+0xb8>)
 80029c4:	441a      	add	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	3304      	adds	r3, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4610      	mov	r0, r2
 80029ce:	f7fe fc34 	bl	800123a <vListInsertEnd>
 80029d2:	e005      	b.n	80029e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	3318      	adds	r3, #24
 80029d8:	4619      	mov	r1, r3
 80029da:	480e      	ldr	r0, [pc, #56]	@ (8002a14 <xTaskRemoveFromEventList+0xbc>)
 80029dc:	f7fe fc2d 	bl	800123a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <xTaskRemoveFromEventList+0xc0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d905      	bls.n	80029fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80029ee:	2301      	movs	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <xTaskRemoveFromEventList+0xc4>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e001      	b.n	80029fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80029fe:	697b      	ldr	r3, [r7, #20]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000d68 	.word	0x20000d68
 8002a0c:	20000d48 	.word	0x20000d48
 8002a10:	20000870 	.word	0x20000870
 8002a14:	20000d00 	.word	0x20000d00
 8002a18:	2000086c 	.word	0x2000086c
 8002a1c:	20000d54 	.word	0x20000d54

08002a20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <vTaskInternalSetTimeOutState+0x24>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <vTaskInternalSetTimeOutState+0x28>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	605a      	str	r2, [r3, #4]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	20000d58 	.word	0x20000d58
 8002a48:	20000d44 	.word	0x20000d44

08002a4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	613b      	str	r3, [r7, #16]
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10b      	bne.n	8002a92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	60fb      	str	r3, [r7, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	e7fd      	b.n	8002a8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002a92:	f000 fe91 	bl	80037b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a96:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <xTaskCheckForTimeOut+0xc0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d102      	bne.n	8002ab6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	e023      	b.n	8002afe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <xTaskCheckForTimeOut+0xc4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d007      	beq.n	8002ad2 <xTaskCheckForTimeOut+0x86>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002acc:	2301      	movs	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	e015      	b.n	8002afe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d20b      	bcs.n	8002af4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad2      	subs	r2, r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff99 	bl	8002a20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e004      	b.n	8002afe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002afe:	f000 fe8d 	bl	800381c <vPortExitCritical>

	return xReturn;
 8002b02:	69fb      	ldr	r3, [r7, #28]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000d44 	.word	0x20000d44
 8002b10:	20000d58 	.word	0x20000d58

08002b14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002b18:	4b03      	ldr	r3, [pc, #12]	@ (8002b28 <vTaskMissedYield+0x14>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	20000d54 	.word	0x20000d54

08002b2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b34:	f000 f852 	bl	8002bdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <prvIdleTask+0x28>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d9f9      	bls.n	8002b34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <prvIdleTask+0x2c>)
 8002b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b50:	e7f0      	b.n	8002b34 <prvIdleTask+0x8>
 8002b52:	bf00      	nop
 8002b54:	20000870 	.word	0x20000870
 8002b58:	e000ed04 	.word	0xe000ed04

08002b5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	e00c      	b.n	8002b82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4a12      	ldr	r2, [pc, #72]	@ (8002bbc <prvInitialiseTaskLists+0x60>)
 8002b74:	4413      	add	r3, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fb32 	bl	80011e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b37      	cmp	r3, #55	@ 0x37
 8002b86:	d9ef      	bls.n	8002b68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b88:	480d      	ldr	r0, [pc, #52]	@ (8002bc0 <prvInitialiseTaskLists+0x64>)
 8002b8a:	f7fe fb29 	bl	80011e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b8e:	480d      	ldr	r0, [pc, #52]	@ (8002bc4 <prvInitialiseTaskLists+0x68>)
 8002b90:	f7fe fb26 	bl	80011e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b94:	480c      	ldr	r0, [pc, #48]	@ (8002bc8 <prvInitialiseTaskLists+0x6c>)
 8002b96:	f7fe fb23 	bl	80011e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b9a:	480c      	ldr	r0, [pc, #48]	@ (8002bcc <prvInitialiseTaskLists+0x70>)
 8002b9c:	f7fe fb20 	bl	80011e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ba0:	480b      	ldr	r0, [pc, #44]	@ (8002bd0 <prvInitialiseTaskLists+0x74>)
 8002ba2:	f7fe fb1d 	bl	80011e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <prvInitialiseTaskLists+0x78>)
 8002ba8:	4a05      	ldr	r2, [pc, #20]	@ (8002bc0 <prvInitialiseTaskLists+0x64>)
 8002baa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bac:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <prvInitialiseTaskLists+0x7c>)
 8002bae:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <prvInitialiseTaskLists+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000870 	.word	0x20000870
 8002bc0:	20000cd0 	.word	0x20000cd0
 8002bc4:	20000ce4 	.word	0x20000ce4
 8002bc8:	20000d00 	.word	0x20000d00
 8002bcc:	20000d14 	.word	0x20000d14
 8002bd0:	20000d2c 	.word	0x20000d2c
 8002bd4:	20000cf8 	.word	0x20000cf8
 8002bd8:	20000cfc 	.word	0x20000cfc

08002bdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002be2:	e019      	b.n	8002c18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002be4:	f000 fde8 	bl	80037b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002be8:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <prvCheckTasksWaitingTermination+0x50>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fb7d 	bl	80012f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002c30 <prvCheckTasksWaitingTermination+0x54>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	4a0b      	ldr	r2, [pc, #44]	@ (8002c30 <prvCheckTasksWaitingTermination+0x54>)
 8002c02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <prvCheckTasksWaitingTermination+0x58>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <prvCheckTasksWaitingTermination+0x58>)
 8002c0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c0e:	f000 fe05 	bl	800381c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f810 	bl	8002c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <prvCheckTasksWaitingTermination+0x58>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e1      	bne.n	8002be4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000d14 	.word	0x20000d14
 8002c30:	20000d40 	.word	0x20000d40
 8002c34:	20000d28 	.word	0x20000d28

08002c38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3354      	adds	r3, #84	@ 0x54
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 fb4b 	bl	80042e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d108      	bne.n	8002c66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 ff9d 	bl	8003b98 <vPortFree>
				vPortFree( pxTCB );
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 ff9a 	bl	8003b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c64:	e019      	b.n	8002c9a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d103      	bne.n	8002c78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 ff91 	bl	8003b98 <vPortFree>
	}
 8002c76:	e010      	b.n	8002c9a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d00b      	beq.n	8002c9a <prvDeleteTCB+0x62>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	60fb      	str	r3, [r7, #12]
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	e7fd      	b.n	8002c96 <prvDeleteTCB+0x5e>
	}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002caa:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <prvResetNextTaskUnblockTime+0x38>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d104      	bne.n	8002cbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8002cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002cbc:	e008      	b.n	8002cd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cbe:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <prvResetNextTaskUnblockTime+0x38>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <prvResetNextTaskUnblockTime+0x3c>)
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	20000cf8 	.word	0x20000cf8
 8002ce0:	20000d60 	.word	0x20000d60

08002ce4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002cea:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <xTaskGetSchedulerState+0x34>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	e008      	b.n	8002d0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cf8:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <xTaskGetSchedulerState+0x38>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d00:	2302      	movs	r3, #2
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	e001      	b.n	8002d0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002d0a:	687b      	ldr	r3, [r7, #4]
	}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20000d4c 	.word	0x20000d4c
 8002d1c:	20000d68 	.word	0x20000d68

08002d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d058      	beq.n	8002de8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002d36:	4b2f      	ldr	r3, [pc, #188]	@ (8002df4 <xTaskPriorityDisinherit+0xd4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d00b      	beq.n	8002d58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	60fb      	str	r3, [r7, #12]
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	60bb      	str	r3, [r7, #8]
}
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7c:	1e5a      	subs	r2, r3, #1
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d02c      	beq.n	8002de8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d128      	bne.n	8002de8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe faaa 	bl	80012f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db8:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <xTaskPriorityDisinherit+0xd8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d903      	bls.n	8002dc8 <xTaskPriorityDisinherit+0xa8>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <xTaskPriorityDisinherit+0xd8>)
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4a09      	ldr	r2, [pc, #36]	@ (8002dfc <xTaskPriorityDisinherit+0xdc>)
 8002dd6:	441a      	add	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7fe fa2b 	bl	800123a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002de4:	2301      	movs	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002de8:	697b      	ldr	r3, [r7, #20]
	}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2000086c 	.word	0x2000086c
 8002df8:	20000d48 	.word	0x20000d48
 8002dfc:	20000870 	.word	0x20000870

08002e00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002e0a:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <prvAddCurrentTaskToDelayedList+0x90>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e10:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fa6c 	bl	80012f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e22:	d10a      	bne.n	8002e3a <prvAddCurrentTaskToDelayedList+0x3a>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4819      	ldr	r0, [pc, #100]	@ (8002e98 <prvAddCurrentTaskToDelayedList+0x98>)
 8002e34:	f7fe fa01 	bl	800123a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e38:	e026      	b.n	8002e88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e42:	4b14      	ldr	r3, [pc, #80]	@ (8002e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d209      	bcs.n	8002e66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e52:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7fe fa0f 	bl	8001282 <vListInsert>
}
 8002e64:	e010      	b.n	8002e88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <prvAddCurrentTaskToDelayedList+0x94>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f7fe fa05 	bl	8001282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d202      	bcs.n	8002e88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002e82:	4a08      	ldr	r2, [pc, #32]	@ (8002ea4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000d44 	.word	0x20000d44
 8002e94:	2000086c 	.word	0x2000086c
 8002e98:	20000d2c 	.word	0x20000d2c
 8002e9c:	20000cfc 	.word	0x20000cfc
 8002ea0:	20000cf8 	.word	0x20000cf8
 8002ea4:	20000d60 	.word	0x20000d60

08002ea8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	@ 0x28
 8002eac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002eb2:	f000 fb13 	bl	80034dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <xTimerCreateTimerTask+0x84>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d021      	beq.n	8002f02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002ec6:	1d3a      	adds	r2, r7, #4
 8002ec8:	f107 0108 	add.w	r1, r7, #8
 8002ecc:	f107 030c 	add.w	r3, r7, #12
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe f96b 	bl	80011ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	9202      	str	r2, [sp, #8]
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	4911      	ldr	r1, [pc, #68]	@ (8002f30 <xTimerCreateTimerTask+0x88>)
 8002eea:	4812      	ldr	r0, [pc, #72]	@ (8002f34 <xTimerCreateTimerTask+0x8c>)
 8002eec:	f7fe ff26 	bl	8001d3c <xTaskCreateStatic>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4a11      	ldr	r2, [pc, #68]	@ (8002f38 <xTimerCreateTimerTask+0x90>)
 8002ef4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002ef6:	4b10      	ldr	r3, [pc, #64]	@ (8002f38 <xTimerCreateTimerTask+0x90>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002efe:	2301      	movs	r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	613b      	str	r3, [r7, #16]
}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002f20:	697b      	ldr	r3, [r7, #20]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000d9c 	.word	0x20000d9c
 8002f30:	08005480 	.word	0x08005480
 8002f34:	08003075 	.word	0x08003075
 8002f38:	20000da0 	.word	0x20000da0

08002f3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	@ 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <xTimerGenericCommand+0x30>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	623b      	str	r3, [r7, #32]
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002f6c:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <xTimerGenericCommand+0x98>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d02a      	beq.n	8002fca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	dc18      	bgt.n	8002fb8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f86:	f7ff fead 	bl	8002ce4 <xTaskGetSchedulerState>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d109      	bne.n	8002fa4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002f90:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <xTimerGenericCommand+0x98>)
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	f107 0110 	add.w	r1, r7, #16
 8002f98:	2300      	movs	r3, #0
 8002f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f9c:	f7fe fade 	bl	800155c <xQueueGenericSend>
 8002fa0:	6278      	str	r0, [r7, #36]	@ 0x24
 8002fa2:	e012      	b.n	8002fca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <xTimerGenericCommand+0x98>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	f107 0110 	add.w	r1, r7, #16
 8002fac:	2300      	movs	r3, #0
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f7fe fad4 	bl	800155c <xQueueGenericSend>
 8002fb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8002fb6:	e008      	b.n	8002fca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <xTimerGenericCommand+0x98>)
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	f107 0110 	add.w	r1, r7, #16
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	f7fe fbcc 	bl	8001760 <xQueueGenericSendFromISR>
 8002fc8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3728      	adds	r7, #40	@ 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000d9c 	.word	0x20000d9c

08002fd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe2:	4b23      	ldr	r3, [pc, #140]	@ (8003070 <prvProcessExpiredTimer+0x98>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe f97f 	bl	80012f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d023      	beq.n	800304c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	18d1      	adds	r1, r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	6978      	ldr	r0, [r7, #20]
 8003012:	f000 f8d5 	bl	80031c0 <prvInsertTimerInActiveList>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800301c:	2300      	movs	r3, #0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	2100      	movs	r1, #0
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f7ff ff88 	bl	8002f3c <xTimerGenericCommand>
 800302c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d114      	bne.n	800305e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	60fb      	str	r3, [r7, #12]
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	b2da      	uxtb	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	4798      	blx	r3
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000d94 	.word	0x20000d94

08003074 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800307c:	f107 0308 	add.w	r3, r7, #8
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f859 	bl	8003138 <prvGetNextExpireTime>
 8003086:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4619      	mov	r1, r3
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f805 	bl	800309c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003092:	f000 f8d7 	bl	8003244 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003096:	bf00      	nop
 8003098:	e7f0      	b.n	800307c <prvTimerTask+0x8>
	...

0800309c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80030a6:	f7ff fa29 	bl	80024fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80030aa:	f107 0308 	add.w	r3, r7, #8
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f866 	bl	8003180 <prvSampleTimeNow>
 80030b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d130      	bne.n	800311e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <prvProcessTimerOrBlockTask+0x3c>
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d806      	bhi.n	80030d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80030ca:	f7ff fa25 	bl	8002518 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80030ce:	68f9      	ldr	r1, [r7, #12]
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff81 	bl	8002fd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80030d6:	e024      	b.n	8003122 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80030de:	4b13      	ldr	r3, [pc, #76]	@ (800312c <prvProcessTimerOrBlockTask+0x90>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <prvProcessTimerOrBlockTask+0x50>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <prvProcessTimerOrBlockTask+0x52>
 80030ec:	2300      	movs	r3, #0
 80030ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80030f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003130 <prvProcessTimerOrBlockTask+0x94>)
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	f7fe fde9 	bl	8001cd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003102:	f7ff fa09 	bl	8002518 <xTaskResumeAll>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800310c:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <prvProcessTimerOrBlockTask+0x98>)
 800310e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	f3bf 8f6f 	isb	sy
}
 800311c:	e001      	b.n	8003122 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800311e:	f7ff f9fb 	bl	8002518 <xTaskResumeAll>
}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000d98 	.word	0x20000d98
 8003130:	20000d9c 	.word	0x20000d9c
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003140:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <prvGetNextExpireTime+0x44>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <prvGetNextExpireTime+0x16>
 800314a:	2201      	movs	r2, #1
 800314c:	e000      	b.n	8003150 <prvGetNextExpireTime+0x18>
 800314e:	2200      	movs	r2, #0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800315c:	4b07      	ldr	r3, [pc, #28]	@ (800317c <prvGetNextExpireTime+0x44>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e001      	b.n	800316c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800316c:	68fb      	ldr	r3, [r7, #12]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000d94 	.word	0x20000d94

08003180 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003188:	f7ff fa64 	bl	8002654 <xTaskGetTickCount>
 800318c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800318e:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <prvSampleTimeNow+0x3c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d205      	bcs.n	80031a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003198:	f000 f93a 	bl	8003410 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e002      	b.n	80031aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80031aa:	4a04      	ldr	r2, [pc, #16]	@ (80031bc <prvSampleTimeNow+0x3c>)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80031b0:	68fb      	ldr	r3, [r7, #12]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000da4 	.word	0x20000da4

080031c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d812      	bhi.n	800320c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	1ad2      	subs	r2, r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e01b      	b.n	8003232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <prvInsertTimerInActiveList+0x7c>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3304      	adds	r3, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f7fe f83c 	bl	8001282 <vListInsert>
 800320a:	e012      	b.n	8003232 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d206      	bcs.n	8003222 <prvInsertTimerInActiveList+0x62>
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d302      	bcc.n	8003222 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e007      	b.n	8003232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003222:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <prvInsertTimerInActiveList+0x80>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3304      	adds	r3, #4
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f7fe f828 	bl	8001282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003232:	697b      	ldr	r3, [r7, #20]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000d98 	.word	0x20000d98
 8003240:	20000d94 	.word	0x20000d94

08003244 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08e      	sub	sp, #56	@ 0x38
 8003248:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800324a:	e0ce      	b.n	80033ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	da19      	bge.n	8003286 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	3304      	adds	r3, #4
 8003256:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	61fb      	str	r3, [r7, #28]
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	e7fd      	b.n	8003272 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800327c:	6850      	ldr	r0, [r2, #4]
 800327e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003280:	6892      	ldr	r2, [r2, #8]
 8003282:	4611      	mov	r1, r2
 8003284:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f2c0 80ae 	blt.w	80033ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800329a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329c:	3304      	adds	r3, #4
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe f828 	bl	80012f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032a4:	463b      	mov	r3, r7
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff6a 	bl	8003180 <prvSampleTimeNow>
 80032ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	f200 8097 	bhi.w	80033e4 <prvProcessReceivedCommands+0x1a0>
 80032b6:	a201      	add	r2, pc, #4	@ (adr r2, 80032bc <prvProcessReceivedCommands+0x78>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	080032e5 	.word	0x080032e5
 80032c8:	0800335b 	.word	0x0800335b
 80032cc:	0800336f 	.word	0x0800336f
 80032d0:	080033bb 	.word	0x080033bb
 80032d4:	080032e5 	.word	0x080032e5
 80032d8:	080032e5 	.word	0x080032e5
 80032dc:	0800335b 	.word	0x0800335b
 80032e0:	0800336f 	.word	0x0800336f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80032e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	18d1      	adds	r1, r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003304:	f7ff ff5c 	bl	80031c0 <prvInsertTimerInActiveList>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d06c      	beq.n	80033e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003314:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d061      	beq.n	80033e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	441a      	add	r2, r3
 800332c:	2300      	movs	r3, #0
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2300      	movs	r3, #0
 8003332:	2100      	movs	r1, #0
 8003334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003336:	f7ff fe01 	bl	8002f3c <xTimerGenericCommand>
 800333a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d152      	bne.n	80033e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	61bb      	str	r3, [r7, #24]
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	e7fd      	b.n	8003356 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	b2da      	uxtb	r2, r3
 8003366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003368:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800336c:	e03d      	b.n	80033ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	b2da      	uxtb	r2, r3
 800337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003384:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	617b      	str	r3, [r7, #20]
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	e7fd      	b.n	80033a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	18d1      	adds	r1, r2, r3
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b4:	f7ff ff04 	bl	80031c0 <prvInsertTimerInActiveList>
					break;
 80033b8:	e017      	b.n	80033ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80033c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033ca:	f000 fbe5 	bl	8003b98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80033ce:	e00c      	b.n	80033ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80033e2:	e002      	b.n	80033ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80033e4:	bf00      	nop
 80033e6:	e000      	b.n	80033ea <prvProcessReceivedCommands+0x1a6>
					break;
 80033e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80033ea:	4b08      	ldr	r3, [pc, #32]	@ (800340c <prvProcessReceivedCommands+0x1c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	1d39      	adds	r1, r7, #4
 80033f0:	2200      	movs	r2, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fa52 	bl	800189c <xQueueReceive>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f47f af26 	bne.w	800324c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3730      	adds	r7, #48	@ 0x30
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000d9c 	.word	0x20000d9c

08003410 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003416:	e049      	b.n	80034ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003418:	4b2e      	ldr	r3, [pc, #184]	@ (80034d4 <prvSwitchTimerLists+0xc4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003422:	4b2c      	ldr	r3, [pc, #176]	@ (80034d4 <prvSwitchTimerLists+0xc4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3304      	adds	r3, #4
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd ff5f 	bl	80012f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02f      	beq.n	80034ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	429a      	cmp	r2, r3
 800345c:	d90e      	bls.n	800347c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800346a:	4b1a      	ldr	r3, [pc, #104]	@ (80034d4 <prvSwitchTimerLists+0xc4>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3304      	adds	r3, #4
 8003472:	4619      	mov	r1, r3
 8003474:	4610      	mov	r0, r2
 8003476:	f7fd ff04 	bl	8001282 <vListInsert>
 800347a:	e017      	b.n	80034ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800347c:	2300      	movs	r3, #0
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	2100      	movs	r1, #0
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff fd58 	bl	8002f3c <xTimerGenericCommand>
 800348c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	603b      	str	r3, [r7, #0]
}
 80034a6:	bf00      	nop
 80034a8:	bf00      	nop
 80034aa:	e7fd      	b.n	80034a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <prvSwitchTimerLists+0xc4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1b0      	bne.n	8003418 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80034b6:	4b07      	ldr	r3, [pc, #28]	@ (80034d4 <prvSwitchTimerLists+0xc4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <prvSwitchTimerLists+0xc8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a04      	ldr	r2, [pc, #16]	@ (80034d4 <prvSwitchTimerLists+0xc4>)
 80034c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80034c4:	4a04      	ldr	r2, [pc, #16]	@ (80034d8 <prvSwitchTimerLists+0xc8>)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	6013      	str	r3, [r2, #0]
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000d94 	.word	0x20000d94
 80034d8:	20000d98 	.word	0x20000d98

080034dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80034e2:	f000 f969 	bl	80037b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80034e6:	4b15      	ldr	r3, [pc, #84]	@ (800353c <prvCheckForValidListAndQueue+0x60>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d120      	bne.n	8003530 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80034ee:	4814      	ldr	r0, [pc, #80]	@ (8003540 <prvCheckForValidListAndQueue+0x64>)
 80034f0:	f7fd fe76 	bl	80011e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80034f4:	4813      	ldr	r0, [pc, #76]	@ (8003544 <prvCheckForValidListAndQueue+0x68>)
 80034f6:	f7fd fe73 	bl	80011e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80034fa:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <prvCheckForValidListAndQueue+0x6c>)
 80034fc:	4a10      	ldr	r2, [pc, #64]	@ (8003540 <prvCheckForValidListAndQueue+0x64>)
 80034fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003500:	4b12      	ldr	r3, [pc, #72]	@ (800354c <prvCheckForValidListAndQueue+0x70>)
 8003502:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <prvCheckForValidListAndQueue+0x68>)
 8003504:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003506:	2300      	movs	r3, #0
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <prvCheckForValidListAndQueue+0x74>)
 800350c:	4a11      	ldr	r2, [pc, #68]	@ (8003554 <prvCheckForValidListAndQueue+0x78>)
 800350e:	2110      	movs	r1, #16
 8003510:	200a      	movs	r0, #10
 8003512:	f7fd ff83 	bl	800141c <xQueueGenericCreateStatic>
 8003516:	4603      	mov	r3, r0
 8003518:	4a08      	ldr	r2, [pc, #32]	@ (800353c <prvCheckForValidListAndQueue+0x60>)
 800351a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800351c:	4b07      	ldr	r3, [pc, #28]	@ (800353c <prvCheckForValidListAndQueue+0x60>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <prvCheckForValidListAndQueue+0x60>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	490b      	ldr	r1, [pc, #44]	@ (8003558 <prvCheckForValidListAndQueue+0x7c>)
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fba8 	bl	8001c80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003530:	f000 f974 	bl	800381c <vPortExitCritical>
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000d9c 	.word	0x20000d9c
 8003540:	20000d6c 	.word	0x20000d6c
 8003544:	20000d80 	.word	0x20000d80
 8003548:	20000d94 	.word	0x20000d94
 800354c:	20000d98 	.word	0x20000d98
 8003550:	20000e48 	.word	0x20000e48
 8003554:	20000da8 	.word	0x20000da8
 8003558:	08005488 	.word	0x08005488

0800355c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	3b04      	subs	r3, #4
 800356c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b04      	subs	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f023 0201 	bic.w	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3b04      	subs	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800358c:	4a0c      	ldr	r2, [pc, #48]	@ (80035c0 <pxPortInitialiseStack+0x64>)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b14      	subs	r3, #20
 8003596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3b04      	subs	r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f06f 0202 	mvn.w	r2, #2
 80035aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3b20      	subs	r3, #32
 80035b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035b2:	68fb      	ldr	r3, [r7, #12]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	080035c5 	.word	0x080035c5

080035c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035ce:	4b13      	ldr	r3, [pc, #76]	@ (800361c <prvTaskExitError+0x58>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d00b      	beq.n	80035f0 <prvTaskExitError+0x2c>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60fb      	str	r3, [r7, #12]
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <prvTaskExitError+0x28>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	60bb      	str	r3, [r7, #8]
}
 8003602:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003604:	bf00      	nop
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0fc      	beq.n	8003606 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	2000000c 	.word	0x2000000c

08003620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003620:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <pxCurrentTCBConst2>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	6808      	ldr	r0, [r1, #0]
 8003626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362a:	f380 8809 	msr	PSP, r0
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8811 	msr	BASEPRI, r0
 800363a:	4770      	bx	lr
 800363c:	f3af 8000 	nop.w

08003640 <pxCurrentTCBConst2>:
 8003640:	2000086c 	.word	0x2000086c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop

08003648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003648:	4808      	ldr	r0, [pc, #32]	@ (800366c <prvPortStartFirstTask+0x24>)
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	f380 8808 	msr	MSP, r0
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f380 8814 	msr	CONTROL, r0
 800365a:	b662      	cpsie	i
 800365c:	b661      	cpsie	f
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	df00      	svc	0
 8003668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800366a:	bf00      	nop
 800366c:	e000ed08 	.word	0xe000ed08

08003670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003676:	4b47      	ldr	r3, [pc, #284]	@ (8003794 <xPortStartScheduler+0x124>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a47      	ldr	r2, [pc, #284]	@ (8003798 <xPortStartScheduler+0x128>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10b      	bne.n	8003698 <xPortStartScheduler+0x28>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	613b      	str	r3, [r7, #16]
}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003698:	4b3e      	ldr	r3, [pc, #248]	@ (8003794 <xPortStartScheduler+0x124>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a3f      	ldr	r2, [pc, #252]	@ (800379c <xPortStartScheduler+0x12c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10b      	bne.n	80036ba <xPortStartScheduler+0x4a>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	60fb      	str	r3, [r7, #12]
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	e7fd      	b.n	80036b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036ba:	4b39      	ldr	r3, [pc, #228]	@ (80037a0 <xPortStartScheduler+0x130>)
 80036bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	22ff      	movs	r2, #255	@ 0xff
 80036ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b31      	ldr	r3, [pc, #196]	@ (80037a4 <xPortStartScheduler+0x134>)
 80036e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036e2:	4b31      	ldr	r3, [pc, #196]	@ (80037a8 <xPortStartScheduler+0x138>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036e8:	e009      	b.n	80036fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80036ea:	4b2f      	ldr	r3, [pc, #188]	@ (80037a8 <xPortStartScheduler+0x138>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	4a2d      	ldr	r2, [pc, #180]	@ (80037a8 <xPortStartScheduler+0x138>)
 80036f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003706:	2b80      	cmp	r3, #128	@ 0x80
 8003708:	d0ef      	beq.n	80036ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800370a:	4b27      	ldr	r3, [pc, #156]	@ (80037a8 <xPortStartScheduler+0x138>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1c3 0307 	rsb	r3, r3, #7
 8003712:	2b04      	cmp	r3, #4
 8003714:	d00b      	beq.n	800372e <xPortStartScheduler+0xbe>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	60bb      	str	r3, [r7, #8]
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	e7fd      	b.n	800372a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800372e:	4b1e      	ldr	r3, [pc, #120]	@ (80037a8 <xPortStartScheduler+0x138>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <xPortStartScheduler+0x138>)
 8003736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003738:	4b1b      	ldr	r3, [pc, #108]	@ (80037a8 <xPortStartScheduler+0x138>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003740:	4a19      	ldr	r2, [pc, #100]	@ (80037a8 <xPortStartScheduler+0x138>)
 8003742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800374c:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <xPortStartScheduler+0x13c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a16      	ldr	r2, [pc, #88]	@ (80037ac <xPortStartScheduler+0x13c>)
 8003752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003758:	4b14      	ldr	r3, [pc, #80]	@ (80037ac <xPortStartScheduler+0x13c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a13      	ldr	r2, [pc, #76]	@ (80037ac <xPortStartScheduler+0x13c>)
 800375e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003764:	f000 f8da 	bl	800391c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003768:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <xPortStartScheduler+0x140>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800376e:	f000 f8f9 	bl	8003964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003772:	4b10      	ldr	r3, [pc, #64]	@ (80037b4 <xPortStartScheduler+0x144>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a0f      	ldr	r2, [pc, #60]	@ (80037b4 <xPortStartScheduler+0x144>)
 8003778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800377c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800377e:	f7ff ff63 	bl	8003648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003782:	f7ff f831 	bl	80027e8 <vTaskSwitchContext>
	prvTaskExitError();
 8003786:	f7ff ff1d 	bl	80035c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	e000ed00 	.word	0xe000ed00
 8003798:	410fc271 	.word	0x410fc271
 800379c:	410fc270 	.word	0x410fc270
 80037a0:	e000e400 	.word	0xe000e400
 80037a4:	20000e98 	.word	0x20000e98
 80037a8:	20000e9c 	.word	0x20000e9c
 80037ac:	e000ed20 	.word	0xe000ed20
 80037b0:	2000000c 	.word	0x2000000c
 80037b4:	e000ef34 	.word	0xe000ef34

080037b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	607b      	str	r3, [r7, #4]
}
 80037d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037d2:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <vPortEnterCritical+0x5c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003814 <vPortEnterCritical+0x5c>)
 80037da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <vPortEnterCritical+0x5c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d110      	bne.n	8003806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <vPortEnterCritical+0x60>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <vPortEnterCritical+0x4e>
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	603b      	str	r3, [r7, #0]
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	e7fd      	b.n	8003802 <vPortEnterCritical+0x4a>
	}
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	2000000c 	.word	0x2000000c
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <vPortExitCritical+0x50>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <vPortExitCritical+0x26>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	607b      	str	r3, [r7, #4]
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	e7fd      	b.n	800383e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003842:	4b0a      	ldr	r3, [pc, #40]	@ (800386c <vPortExitCritical+0x50>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3b01      	subs	r3, #1
 8003848:	4a08      	ldr	r2, [pc, #32]	@ (800386c <vPortExitCritical+0x50>)
 800384a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800384c:	4b07      	ldr	r3, [pc, #28]	@ (800386c <vPortExitCritical+0x50>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <vPortExitCritical+0x44>
 8003854:	2300      	movs	r3, #0
 8003856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f383 8811 	msr	BASEPRI, r3
}
 800385e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	2000000c 	.word	0x2000000c

08003870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003870:	f3ef 8009 	mrs	r0, PSP
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <pxCurrentTCBConst>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	f01e 0f10 	tst.w	lr, #16
 8003880:	bf08      	it	eq
 8003882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388a:	6010      	str	r0, [r2, #0]
 800388c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003894:	f380 8811 	msr	BASEPRI, r0
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f7fe ffa2 	bl	80027e8 <vTaskSwitchContext>
 80038a4:	f04f 0000 	mov.w	r0, #0
 80038a8:	f380 8811 	msr	BASEPRI, r0
 80038ac:	bc09      	pop	{r0, r3}
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b6:	f01e 0f10 	tst.w	lr, #16
 80038ba:	bf08      	it	eq
 80038bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038c0:	f380 8809 	msr	PSP, r0
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w

080038d0 <pxCurrentTCBConst>:
 80038d0:	2000086c 	.word	0x2000086c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop

080038d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	607b      	str	r3, [r7, #4]
}
 80038f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038f2:	f7fe febf 	bl	8002674 <xTaskIncrementTick>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <xPortSysTickHandler+0x40>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	2300      	movs	r3, #0
 8003906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f383 8811 	msr	BASEPRI, r3
}
 800390e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003926:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <vPortSetupTimerInterrupt+0x38>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800392c:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <vPortSetupTimerInterrupt+0x3c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <vPortSetupTimerInterrupt+0x40>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	4a09      	ldr	r2, [pc, #36]	@ (8003960 <vPortSetupTimerInterrupt+0x44>)
 800393a:	3b01      	subs	r3, #1
 800393c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800393e:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <vPortSetupTimerInterrupt+0x34>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010
 8003954:	e000e018 	.word	0xe000e018
 8003958:	20000000 	.word	0x20000000
 800395c:	10624dd3 	.word	0x10624dd3
 8003960:	e000e014 	.word	0xe000e014

08003964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003974 <vPortEnableVFP+0x10>
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800396e:	6001      	str	r1, [r0, #0]
 8003970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003972:	bf00      	nop
 8003974:	e000ed88 	.word	0xe000ed88

08003978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800397e:	f3ef 8305 	mrs	r3, IPSR
 8003982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b0f      	cmp	r3, #15
 8003988:	d915      	bls.n	80039b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800398a:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <vPortValidateInterruptPriority+0x74>)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003994:	4b16      	ldr	r3, [pc, #88]	@ (80039f0 <vPortValidateInterruptPriority+0x78>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	7afa      	ldrb	r2, [r7, #11]
 800399a:	429a      	cmp	r2, r3
 800399c:	d20b      	bcs.n	80039b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	607b      	str	r3, [r7, #4]
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	e7fd      	b.n	80039b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039b6:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <vPortValidateInterruptPriority+0x7c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80039be:	4b0e      	ldr	r3, [pc, #56]	@ (80039f8 <vPortValidateInterruptPriority+0x80>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d90b      	bls.n	80039de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	603b      	str	r3, [r7, #0]
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	e7fd      	b.n	80039da <vPortValidateInterruptPriority+0x62>
	}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000e3f0 	.word	0xe000e3f0
 80039f0:	20000e98 	.word	0x20000e98
 80039f4:	e000ed0c 	.word	0xe000ed0c
 80039f8:	20000e9c 	.word	0x20000e9c

080039fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	@ 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a08:	f7fe fd78 	bl	80024fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8003b80 <pvPortMalloc+0x184>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a14:	f000 f924 	bl	8003c60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a18:	4b5a      	ldr	r3, [pc, #360]	@ (8003b84 <pvPortMalloc+0x188>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f040 8095 	bne.w	8003b50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01e      	beq.n	8003a6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d015      	beq.n	8003a6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f023 0307 	bic.w	r3, r3, #7
 8003a44:	3308      	adds	r3, #8
 8003a46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <pvPortMalloc+0x6e>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	617b      	str	r3, [r7, #20]
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	e7fd      	b.n	8003a66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d06f      	beq.n	8003b50 <pvPortMalloc+0x154>
 8003a70:	4b45      	ldr	r3, [pc, #276]	@ (8003b88 <pvPortMalloc+0x18c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d86a      	bhi.n	8003b50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a7a:	4b44      	ldr	r3, [pc, #272]	@ (8003b8c <pvPortMalloc+0x190>)
 8003a7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a7e:	4b43      	ldr	r3, [pc, #268]	@ (8003b8c <pvPortMalloc+0x190>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a84:	e004      	b.n	8003a90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d903      	bls.n	8003aa2 <pvPortMalloc+0xa6>
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f1      	bne.n	8003a86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003aa2:	4b37      	ldr	r3, [pc, #220]	@ (8003b80 <pvPortMalloc+0x184>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d051      	beq.n	8003b50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	4413      	add	r3, r2
 8003ab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1ad2      	subs	r2, r2, r3
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d920      	bls.n	8003b10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <pvPortMalloc+0xfc>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	613b      	str	r3, [r7, #16]
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	e7fd      	b.n	8003af4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1ad2      	subs	r2, r2, r3
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b0a:	69b8      	ldr	r0, [r7, #24]
 8003b0c:	f000 f90a 	bl	8003d24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b10:	4b1d      	ldr	r3, [pc, #116]	@ (8003b88 <pvPortMalloc+0x18c>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b88 <pvPortMalloc+0x18c>)
 8003b1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b88 <pvPortMalloc+0x18c>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <pvPortMalloc+0x194>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d203      	bcs.n	8003b32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b2a:	4b17      	ldr	r3, [pc, #92]	@ (8003b88 <pvPortMalloc+0x18c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <pvPortMalloc+0x194>)
 8003b30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <pvPortMalloc+0x188>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003b46:	4b13      	ldr	r3, [pc, #76]	@ (8003b94 <pvPortMalloc+0x198>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	4a11      	ldr	r2, [pc, #68]	@ (8003b94 <pvPortMalloc+0x198>)
 8003b4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b50:	f7fe fce2 	bl	8002518 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <pvPortMalloc+0x17a>
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	60fb      	str	r3, [r7, #12]
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	e7fd      	b.n	8003b72 <pvPortMalloc+0x176>
	return pvReturn;
 8003b76:	69fb      	ldr	r3, [r7, #28]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3728      	adds	r7, #40	@ 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20004aa8 	.word	0x20004aa8
 8003b84:	20004abc 	.word	0x20004abc
 8003b88:	20004aac 	.word	0x20004aac
 8003b8c:	20004aa0 	.word	0x20004aa0
 8003b90:	20004ab0 	.word	0x20004ab0
 8003b94:	20004ab4 	.word	0x20004ab4

08003b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04f      	beq.n	8003c4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003baa:	2308      	movs	r3, #8
 8003bac:	425b      	negs	r3, r3
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4b25      	ldr	r3, [pc, #148]	@ (8003c54 <vPortFree+0xbc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <vPortFree+0x46>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	60fb      	str	r3, [r7, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	e7fd      	b.n	8003bda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <vPortFree+0x66>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	60bb      	str	r3, [r7, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	e7fd      	b.n	8003bfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	4b14      	ldr	r3, [pc, #80]	@ (8003c54 <vPortFree+0xbc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01e      	beq.n	8003c4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d11a      	bne.n	8003c4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4b0e      	ldr	r3, [pc, #56]	@ (8003c54 <vPortFree+0xbc>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	401a      	ands	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c24:	f7fe fc6a 	bl	80024fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <vPortFree+0xc0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4413      	add	r3, r2
 8003c32:	4a09      	ldr	r2, [pc, #36]	@ (8003c58 <vPortFree+0xc0>)
 8003c34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c36:	6938      	ldr	r0, [r7, #16]
 8003c38:	f000 f874 	bl	8003d24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003c3c:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <vPortFree+0xc4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	4a06      	ldr	r2, [pc, #24]	@ (8003c5c <vPortFree+0xc4>)
 8003c44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003c46:	f7fe fc67 	bl	8002518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20004abc 	.word	0x20004abc
 8003c58:	20004aac 	.word	0x20004aac
 8003c5c:	20004ab8 	.word	0x20004ab8

08003c60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003c6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c6c:	4b27      	ldr	r3, [pc, #156]	@ (8003d0c <prvHeapInit+0xac>)
 8003c6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00c      	beq.n	8003c94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3307      	adds	r3, #7
 8003c7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0307 	bic.w	r3, r3, #7
 8003c86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003d0c <prvHeapInit+0xac>)
 8003c90:	4413      	add	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c98:	4a1d      	ldr	r2, [pc, #116]	@ (8003d10 <prvHeapInit+0xb0>)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d10 <prvHeapInit+0xb0>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4413      	add	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003cac:	2208      	movs	r2, #8
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0307 	bic.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <prvHeapInit+0xb4>)
 8003cc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003cc2:	4b14      	ldr	r3, [pc, #80]	@ (8003d14 <prvHeapInit+0xb4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003cca:	4b12      	ldr	r3, [pc, #72]	@ (8003d14 <prvHeapInit+0xb4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	1ad2      	subs	r2, r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <prvHeapInit+0xb4>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <prvHeapInit+0xb8>)
 8003cee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4a09      	ldr	r2, [pc, #36]	@ (8003d1c <prvHeapInit+0xbc>)
 8003cf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003cf8:	4b09      	ldr	r3, [pc, #36]	@ (8003d20 <prvHeapInit+0xc0>)
 8003cfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	20000ea0 	.word	0x20000ea0
 8003d10:	20004aa0 	.word	0x20004aa0
 8003d14:	20004aa8 	.word	0x20004aa8
 8003d18:	20004ab0 	.word	0x20004ab0
 8003d1c:	20004aac 	.word	0x20004aac
 8003d20:	20004abc 	.word	0x20004abc

08003d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d2c:	4b28      	ldr	r3, [pc, #160]	@ (8003dd0 <prvInsertBlockIntoFreeList+0xac>)
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e002      	b.n	8003d38 <prvInsertBlockIntoFreeList+0x14>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d8f7      	bhi.n	8003d32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d108      	bne.n	8003d66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	441a      	add	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d118      	bne.n	8003dac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d00d      	beq.n	8003da2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	441a      	add	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	e008      	b.n	8003db4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003da2:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e003      	b.n	8003db4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d002      	beq.n	8003dc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20004aa0 	.word	0x20004aa0
 8003dd4:	20004aa8 	.word	0x20004aa8

08003dd8 <malloc>:
 8003dd8:	4b02      	ldr	r3, [pc, #8]	@ (8003de4 <malloc+0xc>)
 8003dda:	4601      	mov	r1, r0
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	f000 b82d 	b.w	8003e3c <_malloc_r>
 8003de2:	bf00      	nop
 8003de4:	2000001c 	.word	0x2000001c

08003de8 <free>:
 8003de8:	4b02      	ldr	r3, [pc, #8]	@ (8003df4 <free+0xc>)
 8003dea:	4601      	mov	r1, r0
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	f000 bb79 	b.w	80044e4 <_free_r>
 8003df2:	bf00      	nop
 8003df4:	2000001c 	.word	0x2000001c

08003df8 <sbrk_aligned>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8003e38 <sbrk_aligned+0x40>)
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	6831      	ldr	r1, [r6, #0]
 8003e00:	4605      	mov	r5, r0
 8003e02:	b911      	cbnz	r1, 8003e0a <sbrk_aligned+0x12>
 8003e04:	f000 faf8 	bl	80043f8 <_sbrk_r>
 8003e08:	6030      	str	r0, [r6, #0]
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 faf3 	bl	80043f8 <_sbrk_r>
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d103      	bne.n	8003e1e <sbrk_aligned+0x26>
 8003e16:	f04f 34ff 	mov.w	r4, #4294967295
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	bd70      	pop	{r4, r5, r6, pc}
 8003e1e:	1cc4      	adds	r4, r0, #3
 8003e20:	f024 0403 	bic.w	r4, r4, #3
 8003e24:	42a0      	cmp	r0, r4
 8003e26:	d0f8      	beq.n	8003e1a <sbrk_aligned+0x22>
 8003e28:	1a21      	subs	r1, r4, r0
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f000 fae4 	bl	80043f8 <_sbrk_r>
 8003e30:	3001      	adds	r0, #1
 8003e32:	d1f2      	bne.n	8003e1a <sbrk_aligned+0x22>
 8003e34:	e7ef      	b.n	8003e16 <sbrk_aligned+0x1e>
 8003e36:	bf00      	nop
 8003e38:	20004ac0 	.word	0x20004ac0

08003e3c <_malloc_r>:
 8003e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e40:	1ccd      	adds	r5, r1, #3
 8003e42:	f025 0503 	bic.w	r5, r5, #3
 8003e46:	3508      	adds	r5, #8
 8003e48:	2d0c      	cmp	r5, #12
 8003e4a:	bf38      	it	cc
 8003e4c:	250c      	movcc	r5, #12
 8003e4e:	2d00      	cmp	r5, #0
 8003e50:	4606      	mov	r6, r0
 8003e52:	db01      	blt.n	8003e58 <_malloc_r+0x1c>
 8003e54:	42a9      	cmp	r1, r5
 8003e56:	d904      	bls.n	8003e62 <_malloc_r+0x26>
 8003e58:	230c      	movs	r3, #12
 8003e5a:	6033      	str	r3, [r6, #0]
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f38 <_malloc_r+0xfc>
 8003e66:	f000 f869 	bl	8003f3c <__malloc_lock>
 8003e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e6e:	461c      	mov	r4, r3
 8003e70:	bb44      	cbnz	r4, 8003ec4 <_malloc_r+0x88>
 8003e72:	4629      	mov	r1, r5
 8003e74:	4630      	mov	r0, r6
 8003e76:	f7ff ffbf 	bl	8003df8 <sbrk_aligned>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	d158      	bne.n	8003f32 <_malloc_r+0xf6>
 8003e80:	f8d8 4000 	ldr.w	r4, [r8]
 8003e84:	4627      	mov	r7, r4
 8003e86:	2f00      	cmp	r7, #0
 8003e88:	d143      	bne.n	8003f12 <_malloc_r+0xd6>
 8003e8a:	2c00      	cmp	r4, #0
 8003e8c:	d04b      	beq.n	8003f26 <_malloc_r+0xea>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	4639      	mov	r1, r7
 8003e92:	4630      	mov	r0, r6
 8003e94:	eb04 0903 	add.w	r9, r4, r3
 8003e98:	f000 faae 	bl	80043f8 <_sbrk_r>
 8003e9c:	4581      	cmp	r9, r0
 8003e9e:	d142      	bne.n	8003f26 <_malloc_r+0xea>
 8003ea0:	6821      	ldr	r1, [r4, #0]
 8003ea2:	1a6d      	subs	r5, r5, r1
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f7ff ffa6 	bl	8003df8 <sbrk_aligned>
 8003eac:	3001      	adds	r0, #1
 8003eae:	d03a      	beq.n	8003f26 <_malloc_r+0xea>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	442b      	add	r3, r5
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	bb62      	cbnz	r2, 8003f18 <_malloc_r+0xdc>
 8003ebe:	f8c8 7000 	str.w	r7, [r8]
 8003ec2:	e00f      	b.n	8003ee4 <_malloc_r+0xa8>
 8003ec4:	6822      	ldr	r2, [r4, #0]
 8003ec6:	1b52      	subs	r2, r2, r5
 8003ec8:	d420      	bmi.n	8003f0c <_malloc_r+0xd0>
 8003eca:	2a0b      	cmp	r2, #11
 8003ecc:	d917      	bls.n	8003efe <_malloc_r+0xc2>
 8003ece:	1961      	adds	r1, r4, r5
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	6025      	str	r5, [r4, #0]
 8003ed4:	bf18      	it	ne
 8003ed6:	6059      	strne	r1, [r3, #4]
 8003ed8:	6863      	ldr	r3, [r4, #4]
 8003eda:	bf08      	it	eq
 8003edc:	f8c8 1000 	streq.w	r1, [r8]
 8003ee0:	5162      	str	r2, [r4, r5]
 8003ee2:	604b      	str	r3, [r1, #4]
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f000 f82f 	bl	8003f48 <__malloc_unlock>
 8003eea:	f104 000b 	add.w	r0, r4, #11
 8003eee:	1d23      	adds	r3, r4, #4
 8003ef0:	f020 0007 	bic.w	r0, r0, #7
 8003ef4:	1ac2      	subs	r2, r0, r3
 8003ef6:	bf1c      	itt	ne
 8003ef8:	1a1b      	subne	r3, r3, r0
 8003efa:	50a3      	strne	r3, [r4, r2]
 8003efc:	e7af      	b.n	8003e5e <_malloc_r+0x22>
 8003efe:	6862      	ldr	r2, [r4, #4]
 8003f00:	42a3      	cmp	r3, r4
 8003f02:	bf0c      	ite	eq
 8003f04:	f8c8 2000 	streq.w	r2, [r8]
 8003f08:	605a      	strne	r2, [r3, #4]
 8003f0a:	e7eb      	b.n	8003ee4 <_malloc_r+0xa8>
 8003f0c:	4623      	mov	r3, r4
 8003f0e:	6864      	ldr	r4, [r4, #4]
 8003f10:	e7ae      	b.n	8003e70 <_malloc_r+0x34>
 8003f12:	463c      	mov	r4, r7
 8003f14:	687f      	ldr	r7, [r7, #4]
 8003f16:	e7b6      	b.n	8003e86 <_malloc_r+0x4a>
 8003f18:	461a      	mov	r2, r3
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	42a3      	cmp	r3, r4
 8003f1e:	d1fb      	bne.n	8003f18 <_malloc_r+0xdc>
 8003f20:	2300      	movs	r3, #0
 8003f22:	6053      	str	r3, [r2, #4]
 8003f24:	e7de      	b.n	8003ee4 <_malloc_r+0xa8>
 8003f26:	230c      	movs	r3, #12
 8003f28:	6033      	str	r3, [r6, #0]
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	f000 f80c 	bl	8003f48 <__malloc_unlock>
 8003f30:	e794      	b.n	8003e5c <_malloc_r+0x20>
 8003f32:	6005      	str	r5, [r0, #0]
 8003f34:	e7d6      	b.n	8003ee4 <_malloc_r+0xa8>
 8003f36:	bf00      	nop
 8003f38:	20004ac4 	.word	0x20004ac4

08003f3c <__malloc_lock>:
 8003f3c:	4801      	ldr	r0, [pc, #4]	@ (8003f44 <__malloc_lock+0x8>)
 8003f3e:	f000 baa2 	b.w	8004486 <__retarget_lock_acquire_recursive>
 8003f42:	bf00      	nop
 8003f44:	20004c08 	.word	0x20004c08

08003f48 <__malloc_unlock>:
 8003f48:	4801      	ldr	r0, [pc, #4]	@ (8003f50 <__malloc_unlock+0x8>)
 8003f4a:	f000 ba9d 	b.w	8004488 <__retarget_lock_release_recursive>
 8003f4e:	bf00      	nop
 8003f50:	20004c08 	.word	0x20004c08

08003f54 <srand>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4b10      	ldr	r3, [pc, #64]	@ (8003f98 <srand+0x44>)
 8003f58:	681d      	ldr	r5, [r3, #0]
 8003f5a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	b9b3      	cbnz	r3, 8003f8e <srand+0x3a>
 8003f60:	2018      	movs	r0, #24
 8003f62:	f7ff ff39 	bl	8003dd8 <malloc>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6328      	str	r0, [r5, #48]	@ 0x30
 8003f6a:	b920      	cbnz	r0, 8003f76 <srand+0x22>
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <srand+0x48>)
 8003f6e:	480c      	ldr	r0, [pc, #48]	@ (8003fa0 <srand+0x4c>)
 8003f70:	2146      	movs	r1, #70	@ 0x46
 8003f72:	f000 fa99 	bl	80044a8 <__assert_func>
 8003f76:	490b      	ldr	r1, [pc, #44]	@ (8003fa4 <srand+0x50>)
 8003f78:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <srand+0x54>)
 8003f7a:	e9c0 1300 	strd	r1, r3, [r0]
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <srand+0x58>)
 8003f80:	6083      	str	r3, [r0, #8]
 8003f82:	230b      	movs	r3, #11
 8003f84:	8183      	strh	r3, [r0, #12]
 8003f86:	2100      	movs	r1, #0
 8003f88:	2001      	movs	r0, #1
 8003f8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003f8e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003f90:	2200      	movs	r2, #0
 8003f92:	611c      	str	r4, [r3, #16]
 8003f94:	615a      	str	r2, [r3, #20]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	2000001c 	.word	0x2000001c
 8003f9c:	0800548d 	.word	0x0800548d
 8003fa0:	080054a4 	.word	0x080054a4
 8003fa4:	abcd330e 	.word	0xabcd330e
 8003fa8:	e66d1234 	.word	0xe66d1234
 8003fac:	0005deec 	.word	0x0005deec

08003fb0 <rand>:
 8003fb0:	4b16      	ldr	r3, [pc, #88]	@ (800400c <rand+0x5c>)
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	681c      	ldr	r4, [r3, #0]
 8003fb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fb8:	b9b3      	cbnz	r3, 8003fe8 <rand+0x38>
 8003fba:	2018      	movs	r0, #24
 8003fbc:	f7ff ff0c 	bl	8003dd8 <malloc>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6320      	str	r0, [r4, #48]	@ 0x30
 8003fc4:	b920      	cbnz	r0, 8003fd0 <rand+0x20>
 8003fc6:	4b12      	ldr	r3, [pc, #72]	@ (8004010 <rand+0x60>)
 8003fc8:	4812      	ldr	r0, [pc, #72]	@ (8004014 <rand+0x64>)
 8003fca:	2152      	movs	r1, #82	@ 0x52
 8003fcc:	f000 fa6c 	bl	80044a8 <__assert_func>
 8003fd0:	4911      	ldr	r1, [pc, #68]	@ (8004018 <rand+0x68>)
 8003fd2:	4b12      	ldr	r3, [pc, #72]	@ (800401c <rand+0x6c>)
 8003fd4:	e9c0 1300 	strd	r1, r3, [r0]
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <rand+0x70>)
 8003fda:	6083      	str	r3, [r0, #8]
 8003fdc:	230b      	movs	r3, #11
 8003fde:	8183      	strh	r3, [r0, #12]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003fe8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003fea:	480e      	ldr	r0, [pc, #56]	@ (8004024 <rand+0x74>)
 8003fec:	690b      	ldr	r3, [r1, #16]
 8003fee:	694c      	ldr	r4, [r1, #20]
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8004028 <rand+0x78>)
 8003ff2:	4358      	muls	r0, r3
 8003ff4:	fb02 0004 	mla	r0, r2, r4, r0
 8003ff8:	fba3 3202 	umull	r3, r2, r3, r2
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	eb40 0002 	adc.w	r0, r0, r2
 8004002:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004006:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800400a:	bd10      	pop	{r4, pc}
 800400c:	2000001c 	.word	0x2000001c
 8004010:	0800548d 	.word	0x0800548d
 8004014:	080054a4 	.word	0x080054a4
 8004018:	abcd330e 	.word	0xabcd330e
 800401c:	e66d1234 	.word	0xe66d1234
 8004020:	0005deec 	.word	0x0005deec
 8004024:	5851f42d 	.word	0x5851f42d
 8004028:	4c957f2d 	.word	0x4c957f2d

0800402c <std>:
 800402c:	2300      	movs	r3, #0
 800402e:	b510      	push	{r4, lr}
 8004030:	4604      	mov	r4, r0
 8004032:	e9c0 3300 	strd	r3, r3, [r0]
 8004036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800403a:	6083      	str	r3, [r0, #8]
 800403c:	8181      	strh	r1, [r0, #12]
 800403e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004040:	81c2      	strh	r2, [r0, #14]
 8004042:	6183      	str	r3, [r0, #24]
 8004044:	4619      	mov	r1, r3
 8004046:	2208      	movs	r2, #8
 8004048:	305c      	adds	r0, #92	@ 0x5c
 800404a:	f000 f914 	bl	8004276 <memset>
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <std+0x58>)
 8004050:	6263      	str	r3, [r4, #36]	@ 0x24
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <std+0x5c>)
 8004054:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004056:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <std+0x60>)
 8004058:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800405a:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <std+0x64>)
 800405c:	6323      	str	r3, [r4, #48]	@ 0x30
 800405e:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <std+0x68>)
 8004060:	6224      	str	r4, [r4, #32]
 8004062:	429c      	cmp	r4, r3
 8004064:	d006      	beq.n	8004074 <std+0x48>
 8004066:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800406a:	4294      	cmp	r4, r2
 800406c:	d002      	beq.n	8004074 <std+0x48>
 800406e:	33d0      	adds	r3, #208	@ 0xd0
 8004070:	429c      	cmp	r4, r3
 8004072:	d105      	bne.n	8004080 <std+0x54>
 8004074:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407c:	f000 ba02 	b.w	8004484 <__retarget_lock_init_recursive>
 8004080:	bd10      	pop	{r4, pc}
 8004082:	bf00      	nop
 8004084:	080041f1 	.word	0x080041f1
 8004088:	08004213 	.word	0x08004213
 800408c:	0800424b 	.word	0x0800424b
 8004090:	0800426f 	.word	0x0800426f
 8004094:	20004ac8 	.word	0x20004ac8

08004098 <stdio_exit_handler>:
 8004098:	4a02      	ldr	r2, [pc, #8]	@ (80040a4 <stdio_exit_handler+0xc>)
 800409a:	4903      	ldr	r1, [pc, #12]	@ (80040a8 <stdio_exit_handler+0x10>)
 800409c:	4803      	ldr	r0, [pc, #12]	@ (80040ac <stdio_exit_handler+0x14>)
 800409e:	f000 b869 	b.w	8004174 <_fwalk_sglue>
 80040a2:	bf00      	nop
 80040a4:	20000010 	.word	0x20000010
 80040a8:	08004c4d 	.word	0x08004c4d
 80040ac:	20000020 	.word	0x20000020

080040b0 <cleanup_stdio>:
 80040b0:	6841      	ldr	r1, [r0, #4]
 80040b2:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <cleanup_stdio+0x34>)
 80040b4:	4299      	cmp	r1, r3
 80040b6:	b510      	push	{r4, lr}
 80040b8:	4604      	mov	r4, r0
 80040ba:	d001      	beq.n	80040c0 <cleanup_stdio+0x10>
 80040bc:	f000 fdc6 	bl	8004c4c <_fflush_r>
 80040c0:	68a1      	ldr	r1, [r4, #8]
 80040c2:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <cleanup_stdio+0x38>)
 80040c4:	4299      	cmp	r1, r3
 80040c6:	d002      	beq.n	80040ce <cleanup_stdio+0x1e>
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 fdbf 	bl	8004c4c <_fflush_r>
 80040ce:	68e1      	ldr	r1, [r4, #12]
 80040d0:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <cleanup_stdio+0x3c>)
 80040d2:	4299      	cmp	r1, r3
 80040d4:	d004      	beq.n	80040e0 <cleanup_stdio+0x30>
 80040d6:	4620      	mov	r0, r4
 80040d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040dc:	f000 bdb6 	b.w	8004c4c <_fflush_r>
 80040e0:	bd10      	pop	{r4, pc}
 80040e2:	bf00      	nop
 80040e4:	20004ac8 	.word	0x20004ac8
 80040e8:	20004b30 	.word	0x20004b30
 80040ec:	20004b98 	.word	0x20004b98

080040f0 <global_stdio_init.part.0>:
 80040f0:	b510      	push	{r4, lr}
 80040f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <global_stdio_init.part.0+0x30>)
 80040f4:	4c0b      	ldr	r4, [pc, #44]	@ (8004124 <global_stdio_init.part.0+0x34>)
 80040f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004128 <global_stdio_init.part.0+0x38>)
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	4620      	mov	r0, r4
 80040fc:	2200      	movs	r2, #0
 80040fe:	2104      	movs	r1, #4
 8004100:	f7ff ff94 	bl	800402c <std>
 8004104:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004108:	2201      	movs	r2, #1
 800410a:	2109      	movs	r1, #9
 800410c:	f7ff ff8e 	bl	800402c <std>
 8004110:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004114:	2202      	movs	r2, #2
 8004116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800411a:	2112      	movs	r1, #18
 800411c:	f7ff bf86 	b.w	800402c <std>
 8004120:	20004c00 	.word	0x20004c00
 8004124:	20004ac8 	.word	0x20004ac8
 8004128:	08004099 	.word	0x08004099

0800412c <__sfp_lock_acquire>:
 800412c:	4801      	ldr	r0, [pc, #4]	@ (8004134 <__sfp_lock_acquire+0x8>)
 800412e:	f000 b9aa 	b.w	8004486 <__retarget_lock_acquire_recursive>
 8004132:	bf00      	nop
 8004134:	20004c09 	.word	0x20004c09

08004138 <__sfp_lock_release>:
 8004138:	4801      	ldr	r0, [pc, #4]	@ (8004140 <__sfp_lock_release+0x8>)
 800413a:	f000 b9a5 	b.w	8004488 <__retarget_lock_release_recursive>
 800413e:	bf00      	nop
 8004140:	20004c09 	.word	0x20004c09

08004144 <__sinit>:
 8004144:	b510      	push	{r4, lr}
 8004146:	4604      	mov	r4, r0
 8004148:	f7ff fff0 	bl	800412c <__sfp_lock_acquire>
 800414c:	6a23      	ldr	r3, [r4, #32]
 800414e:	b11b      	cbz	r3, 8004158 <__sinit+0x14>
 8004150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004154:	f7ff bff0 	b.w	8004138 <__sfp_lock_release>
 8004158:	4b04      	ldr	r3, [pc, #16]	@ (800416c <__sinit+0x28>)
 800415a:	6223      	str	r3, [r4, #32]
 800415c:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <__sinit+0x2c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f5      	bne.n	8004150 <__sinit+0xc>
 8004164:	f7ff ffc4 	bl	80040f0 <global_stdio_init.part.0>
 8004168:	e7f2      	b.n	8004150 <__sinit+0xc>
 800416a:	bf00      	nop
 800416c:	080040b1 	.word	0x080040b1
 8004170:	20004c00 	.word	0x20004c00

08004174 <_fwalk_sglue>:
 8004174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004178:	4607      	mov	r7, r0
 800417a:	4688      	mov	r8, r1
 800417c:	4614      	mov	r4, r2
 800417e:	2600      	movs	r6, #0
 8004180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004184:	f1b9 0901 	subs.w	r9, r9, #1
 8004188:	d505      	bpl.n	8004196 <_fwalk_sglue+0x22>
 800418a:	6824      	ldr	r4, [r4, #0]
 800418c:	2c00      	cmp	r4, #0
 800418e:	d1f7      	bne.n	8004180 <_fwalk_sglue+0xc>
 8004190:	4630      	mov	r0, r6
 8004192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d907      	bls.n	80041ac <_fwalk_sglue+0x38>
 800419c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041a0:	3301      	adds	r3, #1
 80041a2:	d003      	beq.n	80041ac <_fwalk_sglue+0x38>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4638      	mov	r0, r7
 80041a8:	47c0      	blx	r8
 80041aa:	4306      	orrs	r6, r0
 80041ac:	3568      	adds	r5, #104	@ 0x68
 80041ae:	e7e9      	b.n	8004184 <_fwalk_sglue+0x10>

080041b0 <siprintf>:
 80041b0:	b40e      	push	{r1, r2, r3}
 80041b2:	b500      	push	{lr}
 80041b4:	b09c      	sub	sp, #112	@ 0x70
 80041b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80041b8:	9002      	str	r0, [sp, #8]
 80041ba:	9006      	str	r0, [sp, #24]
 80041bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041c0:	4809      	ldr	r0, [pc, #36]	@ (80041e8 <siprintf+0x38>)
 80041c2:	9107      	str	r1, [sp, #28]
 80041c4:	9104      	str	r1, [sp, #16]
 80041c6:	4909      	ldr	r1, [pc, #36]	@ (80041ec <siprintf+0x3c>)
 80041c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041cc:	9105      	str	r1, [sp, #20]
 80041ce:	6800      	ldr	r0, [r0, #0]
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	a902      	add	r1, sp, #8
 80041d4:	f000 fa2c 	bl	8004630 <_svfiprintf_r>
 80041d8:	9b02      	ldr	r3, [sp, #8]
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	b01c      	add	sp, #112	@ 0x70
 80041e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041e4:	b003      	add	sp, #12
 80041e6:	4770      	bx	lr
 80041e8:	2000001c 	.word	0x2000001c
 80041ec:	ffff0208 	.word	0xffff0208

080041f0 <__sread>:
 80041f0:	b510      	push	{r4, lr}
 80041f2:	460c      	mov	r4, r1
 80041f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f8:	f000 f8ec 	bl	80043d4 <_read_r>
 80041fc:	2800      	cmp	r0, #0
 80041fe:	bfab      	itete	ge
 8004200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004202:	89a3      	ldrhlt	r3, [r4, #12]
 8004204:	181b      	addge	r3, r3, r0
 8004206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800420a:	bfac      	ite	ge
 800420c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800420e:	81a3      	strhlt	r3, [r4, #12]
 8004210:	bd10      	pop	{r4, pc}

08004212 <__swrite>:
 8004212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004216:	461f      	mov	r7, r3
 8004218:	898b      	ldrh	r3, [r1, #12]
 800421a:	05db      	lsls	r3, r3, #23
 800421c:	4605      	mov	r5, r0
 800421e:	460c      	mov	r4, r1
 8004220:	4616      	mov	r6, r2
 8004222:	d505      	bpl.n	8004230 <__swrite+0x1e>
 8004224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004228:	2302      	movs	r3, #2
 800422a:	2200      	movs	r2, #0
 800422c:	f000 f8c0 	bl	80043b0 <_lseek_r>
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	4632      	mov	r2, r6
 800423e:	463b      	mov	r3, r7
 8004240:	4628      	mov	r0, r5
 8004242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004246:	f000 b8e7 	b.w	8004418 <_write_r>

0800424a <__sseek>:
 800424a:	b510      	push	{r4, lr}
 800424c:	460c      	mov	r4, r1
 800424e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004252:	f000 f8ad 	bl	80043b0 <_lseek_r>
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	bf15      	itete	ne
 800425c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800425e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004266:	81a3      	strheq	r3, [r4, #12]
 8004268:	bf18      	it	ne
 800426a:	81a3      	strhne	r3, [r4, #12]
 800426c:	bd10      	pop	{r4, pc}

0800426e <__sclose>:
 800426e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004272:	f000 b825 	b.w	80042c0 <_close_r>

08004276 <memset>:
 8004276:	4402      	add	r2, r0
 8004278:	4603      	mov	r3, r0
 800427a:	4293      	cmp	r3, r2
 800427c:	d100      	bne.n	8004280 <memset+0xa>
 800427e:	4770      	bx	lr
 8004280:	f803 1b01 	strb.w	r1, [r3], #1
 8004284:	e7f9      	b.n	800427a <memset+0x4>
	...

08004288 <time>:
 8004288:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800428a:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <time+0x34>)
 800428c:	f04f 36ff 	mov.w	r6, #4294967295
 8004290:	f04f 37ff 	mov.w	r7, #4294967295
 8004294:	4669      	mov	r1, sp
 8004296:	4604      	mov	r4, r0
 8004298:	2200      	movs	r2, #0
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	e9cd 6700 	strd	r6, r7, [sp]
 80042a0:	f000 f874 	bl	800438c <_gettimeofday_r>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	bfb8      	it	lt
 80042a8:	e9cd 6700 	strdlt	r6, r7, [sp]
 80042ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042b0:	b10c      	cbz	r4, 80042b6 <time+0x2e>
 80042b2:	e9c4 0100 	strd	r0, r1, [r4]
 80042b6:	b004      	add	sp, #16
 80042b8:	bdd0      	pop	{r4, r6, r7, pc}
 80042ba:	bf00      	nop
 80042bc:	2000001c 	.word	0x2000001c

080042c0 <_close_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4d06      	ldr	r5, [pc, #24]	@ (80042dc <_close_r+0x1c>)
 80042c4:	2300      	movs	r3, #0
 80042c6:	4604      	mov	r4, r0
 80042c8:	4608      	mov	r0, r1
 80042ca:	602b      	str	r3, [r5, #0]
 80042cc:	f000 ffec 	bl	80052a8 <_close>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d102      	bne.n	80042da <_close_r+0x1a>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	b103      	cbz	r3, 80042da <_close_r+0x1a>
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	bd38      	pop	{r3, r4, r5, pc}
 80042dc:	20004c04 	.word	0x20004c04

080042e0 <_reclaim_reent>:
 80042e0:	4b29      	ldr	r3, [pc, #164]	@ (8004388 <_reclaim_reent+0xa8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4283      	cmp	r3, r0
 80042e6:	b570      	push	{r4, r5, r6, lr}
 80042e8:	4604      	mov	r4, r0
 80042ea:	d04b      	beq.n	8004384 <_reclaim_reent+0xa4>
 80042ec:	69c3      	ldr	r3, [r0, #28]
 80042ee:	b1ab      	cbz	r3, 800431c <_reclaim_reent+0x3c>
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	b16b      	cbz	r3, 8004310 <_reclaim_reent+0x30>
 80042f4:	2500      	movs	r5, #0
 80042f6:	69e3      	ldr	r3, [r4, #28]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	5959      	ldr	r1, [r3, r5]
 80042fc:	2900      	cmp	r1, #0
 80042fe:	d13b      	bne.n	8004378 <_reclaim_reent+0x98>
 8004300:	3504      	adds	r5, #4
 8004302:	2d80      	cmp	r5, #128	@ 0x80
 8004304:	d1f7      	bne.n	80042f6 <_reclaim_reent+0x16>
 8004306:	69e3      	ldr	r3, [r4, #28]
 8004308:	4620      	mov	r0, r4
 800430a:	68d9      	ldr	r1, [r3, #12]
 800430c:	f000 f8ea 	bl	80044e4 <_free_r>
 8004310:	69e3      	ldr	r3, [r4, #28]
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	b111      	cbz	r1, 800431c <_reclaim_reent+0x3c>
 8004316:	4620      	mov	r0, r4
 8004318:	f000 f8e4 	bl	80044e4 <_free_r>
 800431c:	6961      	ldr	r1, [r4, #20]
 800431e:	b111      	cbz	r1, 8004326 <_reclaim_reent+0x46>
 8004320:	4620      	mov	r0, r4
 8004322:	f000 f8df 	bl	80044e4 <_free_r>
 8004326:	69e1      	ldr	r1, [r4, #28]
 8004328:	b111      	cbz	r1, 8004330 <_reclaim_reent+0x50>
 800432a:	4620      	mov	r0, r4
 800432c:	f000 f8da 	bl	80044e4 <_free_r>
 8004330:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004332:	b111      	cbz	r1, 800433a <_reclaim_reent+0x5a>
 8004334:	4620      	mov	r0, r4
 8004336:	f000 f8d5 	bl	80044e4 <_free_r>
 800433a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800433c:	b111      	cbz	r1, 8004344 <_reclaim_reent+0x64>
 800433e:	4620      	mov	r0, r4
 8004340:	f000 f8d0 	bl	80044e4 <_free_r>
 8004344:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004346:	b111      	cbz	r1, 800434e <_reclaim_reent+0x6e>
 8004348:	4620      	mov	r0, r4
 800434a:	f000 f8cb 	bl	80044e4 <_free_r>
 800434e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004350:	b111      	cbz	r1, 8004358 <_reclaim_reent+0x78>
 8004352:	4620      	mov	r0, r4
 8004354:	f000 f8c6 	bl	80044e4 <_free_r>
 8004358:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800435a:	b111      	cbz	r1, 8004362 <_reclaim_reent+0x82>
 800435c:	4620      	mov	r0, r4
 800435e:	f000 f8c1 	bl	80044e4 <_free_r>
 8004362:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004364:	b111      	cbz	r1, 800436c <_reclaim_reent+0x8c>
 8004366:	4620      	mov	r0, r4
 8004368:	f000 f8bc 	bl	80044e4 <_free_r>
 800436c:	6a23      	ldr	r3, [r4, #32]
 800436e:	b14b      	cbz	r3, 8004384 <_reclaim_reent+0xa4>
 8004370:	4620      	mov	r0, r4
 8004372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004376:	4718      	bx	r3
 8004378:	680e      	ldr	r6, [r1, #0]
 800437a:	4620      	mov	r0, r4
 800437c:	f000 f8b2 	bl	80044e4 <_free_r>
 8004380:	4631      	mov	r1, r6
 8004382:	e7bb      	b.n	80042fc <_reclaim_reent+0x1c>
 8004384:	bd70      	pop	{r4, r5, r6, pc}
 8004386:	bf00      	nop
 8004388:	2000001c 	.word	0x2000001c

0800438c <_gettimeofday_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	4d07      	ldr	r5, [pc, #28]	@ (80043ac <_gettimeofday_r+0x20>)
 8004390:	2300      	movs	r3, #0
 8004392:	4604      	mov	r4, r0
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	602b      	str	r3, [r5, #0]
 800439a:	f000 ff9d 	bl	80052d8 <_gettimeofday>
 800439e:	1c43      	adds	r3, r0, #1
 80043a0:	d102      	bne.n	80043a8 <_gettimeofday_r+0x1c>
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	b103      	cbz	r3, 80043a8 <_gettimeofday_r+0x1c>
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	bd38      	pop	{r3, r4, r5, pc}
 80043aa:	bf00      	nop
 80043ac:	20004c04 	.word	0x20004c04

080043b0 <_lseek_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d07      	ldr	r5, [pc, #28]	@ (80043d0 <_lseek_r+0x20>)
 80043b4:	4604      	mov	r4, r0
 80043b6:	4608      	mov	r0, r1
 80043b8:	4611      	mov	r1, r2
 80043ba:	2200      	movs	r2, #0
 80043bc:	602a      	str	r2, [r5, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 ffa2 	bl	8005308 <_lseek>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d102      	bne.n	80043ce <_lseek_r+0x1e>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	b103      	cbz	r3, 80043ce <_lseek_r+0x1e>
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	20004c04 	.word	0x20004c04

080043d4 <_read_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4d07      	ldr	r5, [pc, #28]	@ (80043f4 <_read_r+0x20>)
 80043d8:	4604      	mov	r4, r0
 80043da:	4608      	mov	r0, r1
 80043dc:	4611      	mov	r1, r2
 80043de:	2200      	movs	r2, #0
 80043e0:	602a      	str	r2, [r5, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	f000 ff98 	bl	8005318 <_read>
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	d102      	bne.n	80043f2 <_read_r+0x1e>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	b103      	cbz	r3, 80043f2 <_read_r+0x1e>
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	20004c04 	.word	0x20004c04

080043f8 <_sbrk_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4d06      	ldr	r5, [pc, #24]	@ (8004414 <_sbrk_r+0x1c>)
 80043fc:	2300      	movs	r3, #0
 80043fe:	4604      	mov	r4, r0
 8004400:	4608      	mov	r0, r1
 8004402:	602b      	str	r3, [r5, #0]
 8004404:	f000 ff90 	bl	8005328 <_sbrk>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d102      	bne.n	8004412 <_sbrk_r+0x1a>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b103      	cbz	r3, 8004412 <_sbrk_r+0x1a>
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	20004c04 	.word	0x20004c04

08004418 <_write_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d07      	ldr	r5, [pc, #28]	@ (8004438 <_write_r+0x20>)
 800441c:	4604      	mov	r4, r0
 800441e:	4608      	mov	r0, r1
 8004420:	4611      	mov	r1, r2
 8004422:	2200      	movs	r2, #0
 8004424:	602a      	str	r2, [r5, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	f000 ff8c 	bl	8005344 <_write>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_write_r+0x1e>
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	b103      	cbz	r3, 8004436 <_write_r+0x1e>
 8004434:	6023      	str	r3, [r4, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	20004c04 	.word	0x20004c04

0800443c <__libc_init_array>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	4d0d      	ldr	r5, [pc, #52]	@ (8004474 <__libc_init_array+0x38>)
 8004440:	4c0d      	ldr	r4, [pc, #52]	@ (8004478 <__libc_init_array+0x3c>)
 8004442:	1b64      	subs	r4, r4, r5
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	2600      	movs	r6, #0
 8004448:	42a6      	cmp	r6, r4
 800444a:	d109      	bne.n	8004460 <__libc_init_array+0x24>
 800444c:	4d0b      	ldr	r5, [pc, #44]	@ (800447c <__libc_init_array+0x40>)
 800444e:	4c0c      	ldr	r4, [pc, #48]	@ (8004480 <__libc_init_array+0x44>)
 8004450:	f000 ff82 	bl	8005358 <_init>
 8004454:	1b64      	subs	r4, r4, r5
 8004456:	10a4      	asrs	r4, r4, #2
 8004458:	2600      	movs	r6, #0
 800445a:	42a6      	cmp	r6, r4
 800445c:	d105      	bne.n	800446a <__libc_init_array+0x2e>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	f855 3b04 	ldr.w	r3, [r5], #4
 8004464:	4798      	blx	r3
 8004466:	3601      	adds	r6, #1
 8004468:	e7ee      	b.n	8004448 <__libc_init_array+0xc>
 800446a:	f855 3b04 	ldr.w	r3, [r5], #4
 800446e:	4798      	blx	r3
 8004470:	3601      	adds	r6, #1
 8004472:	e7f2      	b.n	800445a <__libc_init_array+0x1e>
 8004474:	08005574 	.word	0x08005574
 8004478:	08005574 	.word	0x08005574
 800447c:	08005574 	.word	0x08005574
 8004480:	08005578 	.word	0x08005578

08004484 <__retarget_lock_init_recursive>:
 8004484:	4770      	bx	lr

08004486 <__retarget_lock_acquire_recursive>:
 8004486:	4770      	bx	lr

08004488 <__retarget_lock_release_recursive>:
 8004488:	4770      	bx	lr

0800448a <memcpy>:
 800448a:	440a      	add	r2, r1
 800448c:	4291      	cmp	r1, r2
 800448e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004492:	d100      	bne.n	8004496 <memcpy+0xc>
 8004494:	4770      	bx	lr
 8004496:	b510      	push	{r4, lr}
 8004498:	f811 4b01 	ldrb.w	r4, [r1], #1
 800449c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044a0:	4291      	cmp	r1, r2
 80044a2:	d1f9      	bne.n	8004498 <memcpy+0xe>
 80044a4:	bd10      	pop	{r4, pc}
	...

080044a8 <__assert_func>:
 80044a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044aa:	4614      	mov	r4, r2
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <__assert_func+0x2c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4605      	mov	r5, r0
 80044b4:	68d8      	ldr	r0, [r3, #12]
 80044b6:	b954      	cbnz	r4, 80044ce <__assert_func+0x26>
 80044b8:	4b07      	ldr	r3, [pc, #28]	@ (80044d8 <__assert_func+0x30>)
 80044ba:	461c      	mov	r4, r3
 80044bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044c0:	9100      	str	r1, [sp, #0]
 80044c2:	462b      	mov	r3, r5
 80044c4:	4905      	ldr	r1, [pc, #20]	@ (80044dc <__assert_func+0x34>)
 80044c6:	f000 fbe9 	bl	8004c9c <fiprintf>
 80044ca:	f000 fc13 	bl	8004cf4 <abort>
 80044ce:	4b04      	ldr	r3, [pc, #16]	@ (80044e0 <__assert_func+0x38>)
 80044d0:	e7f4      	b.n	80044bc <__assert_func+0x14>
 80044d2:	bf00      	nop
 80044d4:	2000001c 	.word	0x2000001c
 80044d8:	08005537 	.word	0x08005537
 80044dc:	08005509 	.word	0x08005509
 80044e0:	080054fc 	.word	0x080054fc

080044e4 <_free_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4605      	mov	r5, r0
 80044e8:	2900      	cmp	r1, #0
 80044ea:	d041      	beq.n	8004570 <_free_r+0x8c>
 80044ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f0:	1f0c      	subs	r4, r1, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfb8      	it	lt
 80044f6:	18e4      	addlt	r4, r4, r3
 80044f8:	f7ff fd20 	bl	8003f3c <__malloc_lock>
 80044fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <_free_r+0x90>)
 80044fe:	6813      	ldr	r3, [r2, #0]
 8004500:	b933      	cbnz	r3, 8004510 <_free_r+0x2c>
 8004502:	6063      	str	r3, [r4, #4]
 8004504:	6014      	str	r4, [r2, #0]
 8004506:	4628      	mov	r0, r5
 8004508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800450c:	f7ff bd1c 	b.w	8003f48 <__malloc_unlock>
 8004510:	42a3      	cmp	r3, r4
 8004512:	d908      	bls.n	8004526 <_free_r+0x42>
 8004514:	6820      	ldr	r0, [r4, #0]
 8004516:	1821      	adds	r1, r4, r0
 8004518:	428b      	cmp	r3, r1
 800451a:	bf01      	itttt	eq
 800451c:	6819      	ldreq	r1, [r3, #0]
 800451e:	685b      	ldreq	r3, [r3, #4]
 8004520:	1809      	addeq	r1, r1, r0
 8004522:	6021      	streq	r1, [r4, #0]
 8004524:	e7ed      	b.n	8004502 <_free_r+0x1e>
 8004526:	461a      	mov	r2, r3
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	b10b      	cbz	r3, 8004530 <_free_r+0x4c>
 800452c:	42a3      	cmp	r3, r4
 800452e:	d9fa      	bls.n	8004526 <_free_r+0x42>
 8004530:	6811      	ldr	r1, [r2, #0]
 8004532:	1850      	adds	r0, r2, r1
 8004534:	42a0      	cmp	r0, r4
 8004536:	d10b      	bne.n	8004550 <_free_r+0x6c>
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	4401      	add	r1, r0
 800453c:	1850      	adds	r0, r2, r1
 800453e:	4283      	cmp	r3, r0
 8004540:	6011      	str	r1, [r2, #0]
 8004542:	d1e0      	bne.n	8004506 <_free_r+0x22>
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	6053      	str	r3, [r2, #4]
 800454a:	4408      	add	r0, r1
 800454c:	6010      	str	r0, [r2, #0]
 800454e:	e7da      	b.n	8004506 <_free_r+0x22>
 8004550:	d902      	bls.n	8004558 <_free_r+0x74>
 8004552:	230c      	movs	r3, #12
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	e7d6      	b.n	8004506 <_free_r+0x22>
 8004558:	6820      	ldr	r0, [r4, #0]
 800455a:	1821      	adds	r1, r4, r0
 800455c:	428b      	cmp	r3, r1
 800455e:	bf04      	itt	eq
 8004560:	6819      	ldreq	r1, [r3, #0]
 8004562:	685b      	ldreq	r3, [r3, #4]
 8004564:	6063      	str	r3, [r4, #4]
 8004566:	bf04      	itt	eq
 8004568:	1809      	addeq	r1, r1, r0
 800456a:	6021      	streq	r1, [r4, #0]
 800456c:	6054      	str	r4, [r2, #4]
 800456e:	e7ca      	b.n	8004506 <_free_r+0x22>
 8004570:	bd38      	pop	{r3, r4, r5, pc}
 8004572:	bf00      	nop
 8004574:	20004ac4 	.word	0x20004ac4

08004578 <__ssputs_r>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	688e      	ldr	r6, [r1, #8]
 800457e:	461f      	mov	r7, r3
 8004580:	42be      	cmp	r6, r7
 8004582:	680b      	ldr	r3, [r1, #0]
 8004584:	4682      	mov	sl, r0
 8004586:	460c      	mov	r4, r1
 8004588:	4690      	mov	r8, r2
 800458a:	d82d      	bhi.n	80045e8 <__ssputs_r+0x70>
 800458c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004590:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004594:	d026      	beq.n	80045e4 <__ssputs_r+0x6c>
 8004596:	6965      	ldr	r5, [r4, #20]
 8004598:	6909      	ldr	r1, [r1, #16]
 800459a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800459e:	eba3 0901 	sub.w	r9, r3, r1
 80045a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045a6:	1c7b      	adds	r3, r7, #1
 80045a8:	444b      	add	r3, r9
 80045aa:	106d      	asrs	r5, r5, #1
 80045ac:	429d      	cmp	r5, r3
 80045ae:	bf38      	it	cc
 80045b0:	461d      	movcc	r5, r3
 80045b2:	0553      	lsls	r3, r2, #21
 80045b4:	d527      	bpl.n	8004606 <__ssputs_r+0x8e>
 80045b6:	4629      	mov	r1, r5
 80045b8:	f7ff fc40 	bl	8003e3c <_malloc_r>
 80045bc:	4606      	mov	r6, r0
 80045be:	b360      	cbz	r0, 800461a <__ssputs_r+0xa2>
 80045c0:	6921      	ldr	r1, [r4, #16]
 80045c2:	464a      	mov	r2, r9
 80045c4:	f7ff ff61 	bl	800448a <memcpy>
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	6126      	str	r6, [r4, #16]
 80045d6:	6165      	str	r5, [r4, #20]
 80045d8:	444e      	add	r6, r9
 80045da:	eba5 0509 	sub.w	r5, r5, r9
 80045de:	6026      	str	r6, [r4, #0]
 80045e0:	60a5      	str	r5, [r4, #8]
 80045e2:	463e      	mov	r6, r7
 80045e4:	42be      	cmp	r6, r7
 80045e6:	d900      	bls.n	80045ea <__ssputs_r+0x72>
 80045e8:	463e      	mov	r6, r7
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	4632      	mov	r2, r6
 80045ee:	4641      	mov	r1, r8
 80045f0:	f000 fb66 	bl	8004cc0 <memmove>
 80045f4:	68a3      	ldr	r3, [r4, #8]
 80045f6:	1b9b      	subs	r3, r3, r6
 80045f8:	60a3      	str	r3, [r4, #8]
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	4433      	add	r3, r6
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	2000      	movs	r0, #0
 8004602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004606:	462a      	mov	r2, r5
 8004608:	f000 fb7b 	bl	8004d02 <_realloc_r>
 800460c:	4606      	mov	r6, r0
 800460e:	2800      	cmp	r0, #0
 8004610:	d1e0      	bne.n	80045d4 <__ssputs_r+0x5c>
 8004612:	6921      	ldr	r1, [r4, #16]
 8004614:	4650      	mov	r0, sl
 8004616:	f7ff ff65 	bl	80044e4 <_free_r>
 800461a:	230c      	movs	r3, #12
 800461c:	f8ca 3000 	str.w	r3, [sl]
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004626:	81a3      	strh	r3, [r4, #12]
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	e7e9      	b.n	8004602 <__ssputs_r+0x8a>
	...

08004630 <_svfiprintf_r>:
 8004630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004634:	4698      	mov	r8, r3
 8004636:	898b      	ldrh	r3, [r1, #12]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	b09d      	sub	sp, #116	@ 0x74
 800463c:	4607      	mov	r7, r0
 800463e:	460d      	mov	r5, r1
 8004640:	4614      	mov	r4, r2
 8004642:	d510      	bpl.n	8004666 <_svfiprintf_r+0x36>
 8004644:	690b      	ldr	r3, [r1, #16]
 8004646:	b973      	cbnz	r3, 8004666 <_svfiprintf_r+0x36>
 8004648:	2140      	movs	r1, #64	@ 0x40
 800464a:	f7ff fbf7 	bl	8003e3c <_malloc_r>
 800464e:	6028      	str	r0, [r5, #0]
 8004650:	6128      	str	r0, [r5, #16]
 8004652:	b930      	cbnz	r0, 8004662 <_svfiprintf_r+0x32>
 8004654:	230c      	movs	r3, #12
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	b01d      	add	sp, #116	@ 0x74
 800465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004662:	2340      	movs	r3, #64	@ 0x40
 8004664:	616b      	str	r3, [r5, #20]
 8004666:	2300      	movs	r3, #0
 8004668:	9309      	str	r3, [sp, #36]	@ 0x24
 800466a:	2320      	movs	r3, #32
 800466c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004670:	f8cd 800c 	str.w	r8, [sp, #12]
 8004674:	2330      	movs	r3, #48	@ 0x30
 8004676:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004814 <_svfiprintf_r+0x1e4>
 800467a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800467e:	f04f 0901 	mov.w	r9, #1
 8004682:	4623      	mov	r3, r4
 8004684:	469a      	mov	sl, r3
 8004686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800468a:	b10a      	cbz	r2, 8004690 <_svfiprintf_r+0x60>
 800468c:	2a25      	cmp	r2, #37	@ 0x25
 800468e:	d1f9      	bne.n	8004684 <_svfiprintf_r+0x54>
 8004690:	ebba 0b04 	subs.w	fp, sl, r4
 8004694:	d00b      	beq.n	80046ae <_svfiprintf_r+0x7e>
 8004696:	465b      	mov	r3, fp
 8004698:	4622      	mov	r2, r4
 800469a:	4629      	mov	r1, r5
 800469c:	4638      	mov	r0, r7
 800469e:	f7ff ff6b 	bl	8004578 <__ssputs_r>
 80046a2:	3001      	adds	r0, #1
 80046a4:	f000 80a7 	beq.w	80047f6 <_svfiprintf_r+0x1c6>
 80046a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046aa:	445a      	add	r2, fp
 80046ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80046ae:	f89a 3000 	ldrb.w	r3, [sl]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 809f 	beq.w	80047f6 <_svfiprintf_r+0x1c6>
 80046b8:	2300      	movs	r3, #0
 80046ba:	f04f 32ff 	mov.w	r2, #4294967295
 80046be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046c2:	f10a 0a01 	add.w	sl, sl, #1
 80046c6:	9304      	str	r3, [sp, #16]
 80046c8:	9307      	str	r3, [sp, #28]
 80046ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80046d0:	4654      	mov	r4, sl
 80046d2:	2205      	movs	r2, #5
 80046d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d8:	484e      	ldr	r0, [pc, #312]	@ (8004814 <_svfiprintf_r+0x1e4>)
 80046da:	f7fb fd81 	bl	80001e0 <memchr>
 80046de:	9a04      	ldr	r2, [sp, #16]
 80046e0:	b9d8      	cbnz	r0, 800471a <_svfiprintf_r+0xea>
 80046e2:	06d0      	lsls	r0, r2, #27
 80046e4:	bf44      	itt	mi
 80046e6:	2320      	movmi	r3, #32
 80046e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046ec:	0711      	lsls	r1, r2, #28
 80046ee:	bf44      	itt	mi
 80046f0:	232b      	movmi	r3, #43	@ 0x2b
 80046f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046f6:	f89a 3000 	ldrb.w	r3, [sl]
 80046fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80046fc:	d015      	beq.n	800472a <_svfiprintf_r+0xfa>
 80046fe:	9a07      	ldr	r2, [sp, #28]
 8004700:	4654      	mov	r4, sl
 8004702:	2000      	movs	r0, #0
 8004704:	f04f 0c0a 	mov.w	ip, #10
 8004708:	4621      	mov	r1, r4
 800470a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800470e:	3b30      	subs	r3, #48	@ 0x30
 8004710:	2b09      	cmp	r3, #9
 8004712:	d94b      	bls.n	80047ac <_svfiprintf_r+0x17c>
 8004714:	b1b0      	cbz	r0, 8004744 <_svfiprintf_r+0x114>
 8004716:	9207      	str	r2, [sp, #28]
 8004718:	e014      	b.n	8004744 <_svfiprintf_r+0x114>
 800471a:	eba0 0308 	sub.w	r3, r0, r8
 800471e:	fa09 f303 	lsl.w	r3, r9, r3
 8004722:	4313      	orrs	r3, r2
 8004724:	9304      	str	r3, [sp, #16]
 8004726:	46a2      	mov	sl, r4
 8004728:	e7d2      	b.n	80046d0 <_svfiprintf_r+0xa0>
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	1d19      	adds	r1, r3, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	9103      	str	r1, [sp, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	bfbb      	ittet	lt
 8004736:	425b      	neglt	r3, r3
 8004738:	f042 0202 	orrlt.w	r2, r2, #2
 800473c:	9307      	strge	r3, [sp, #28]
 800473e:	9307      	strlt	r3, [sp, #28]
 8004740:	bfb8      	it	lt
 8004742:	9204      	strlt	r2, [sp, #16]
 8004744:	7823      	ldrb	r3, [r4, #0]
 8004746:	2b2e      	cmp	r3, #46	@ 0x2e
 8004748:	d10a      	bne.n	8004760 <_svfiprintf_r+0x130>
 800474a:	7863      	ldrb	r3, [r4, #1]
 800474c:	2b2a      	cmp	r3, #42	@ 0x2a
 800474e:	d132      	bne.n	80047b6 <_svfiprintf_r+0x186>
 8004750:	9b03      	ldr	r3, [sp, #12]
 8004752:	1d1a      	adds	r2, r3, #4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	9203      	str	r2, [sp, #12]
 8004758:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800475c:	3402      	adds	r4, #2
 800475e:	9305      	str	r3, [sp, #20]
 8004760:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004824 <_svfiprintf_r+0x1f4>
 8004764:	7821      	ldrb	r1, [r4, #0]
 8004766:	2203      	movs	r2, #3
 8004768:	4650      	mov	r0, sl
 800476a:	f7fb fd39 	bl	80001e0 <memchr>
 800476e:	b138      	cbz	r0, 8004780 <_svfiprintf_r+0x150>
 8004770:	9b04      	ldr	r3, [sp, #16]
 8004772:	eba0 000a 	sub.w	r0, r0, sl
 8004776:	2240      	movs	r2, #64	@ 0x40
 8004778:	4082      	lsls	r2, r0
 800477a:	4313      	orrs	r3, r2
 800477c:	3401      	adds	r4, #1
 800477e:	9304      	str	r3, [sp, #16]
 8004780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004784:	4824      	ldr	r0, [pc, #144]	@ (8004818 <_svfiprintf_r+0x1e8>)
 8004786:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800478a:	2206      	movs	r2, #6
 800478c:	f7fb fd28 	bl	80001e0 <memchr>
 8004790:	2800      	cmp	r0, #0
 8004792:	d036      	beq.n	8004802 <_svfiprintf_r+0x1d2>
 8004794:	4b21      	ldr	r3, [pc, #132]	@ (800481c <_svfiprintf_r+0x1ec>)
 8004796:	bb1b      	cbnz	r3, 80047e0 <_svfiprintf_r+0x1b0>
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	3307      	adds	r3, #7
 800479c:	f023 0307 	bic.w	r3, r3, #7
 80047a0:	3308      	adds	r3, #8
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047a6:	4433      	add	r3, r6
 80047a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047aa:	e76a      	b.n	8004682 <_svfiprintf_r+0x52>
 80047ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b0:	460c      	mov	r4, r1
 80047b2:	2001      	movs	r0, #1
 80047b4:	e7a8      	b.n	8004708 <_svfiprintf_r+0xd8>
 80047b6:	2300      	movs	r3, #0
 80047b8:	3401      	adds	r4, #1
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	4619      	mov	r1, r3
 80047be:	f04f 0c0a 	mov.w	ip, #10
 80047c2:	4620      	mov	r0, r4
 80047c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047c8:	3a30      	subs	r2, #48	@ 0x30
 80047ca:	2a09      	cmp	r2, #9
 80047cc:	d903      	bls.n	80047d6 <_svfiprintf_r+0x1a6>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0c6      	beq.n	8004760 <_svfiprintf_r+0x130>
 80047d2:	9105      	str	r1, [sp, #20]
 80047d4:	e7c4      	b.n	8004760 <_svfiprintf_r+0x130>
 80047d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047da:	4604      	mov	r4, r0
 80047dc:	2301      	movs	r3, #1
 80047de:	e7f0      	b.n	80047c2 <_svfiprintf_r+0x192>
 80047e0:	ab03      	add	r3, sp, #12
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	462a      	mov	r2, r5
 80047e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004820 <_svfiprintf_r+0x1f0>)
 80047e8:	a904      	add	r1, sp, #16
 80047ea:	4638      	mov	r0, r7
 80047ec:	f3af 8000 	nop.w
 80047f0:	1c42      	adds	r2, r0, #1
 80047f2:	4606      	mov	r6, r0
 80047f4:	d1d6      	bne.n	80047a4 <_svfiprintf_r+0x174>
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	065b      	lsls	r3, r3, #25
 80047fa:	f53f af2d 	bmi.w	8004658 <_svfiprintf_r+0x28>
 80047fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004800:	e72c      	b.n	800465c <_svfiprintf_r+0x2c>
 8004802:	ab03      	add	r3, sp, #12
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	462a      	mov	r2, r5
 8004808:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <_svfiprintf_r+0x1f0>)
 800480a:	a904      	add	r1, sp, #16
 800480c:	4638      	mov	r0, r7
 800480e:	f000 f879 	bl	8004904 <_printf_i>
 8004812:	e7ed      	b.n	80047f0 <_svfiprintf_r+0x1c0>
 8004814:	08005538 	.word	0x08005538
 8004818:	08005542 	.word	0x08005542
 800481c:	00000000 	.word	0x00000000
 8004820:	08004579 	.word	0x08004579
 8004824:	0800553e 	.word	0x0800553e

08004828 <_printf_common>:
 8004828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	4616      	mov	r6, r2
 800482e:	4698      	mov	r8, r3
 8004830:	688a      	ldr	r2, [r1, #8]
 8004832:	690b      	ldr	r3, [r1, #16]
 8004834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004838:	4293      	cmp	r3, r2
 800483a:	bfb8      	it	lt
 800483c:	4613      	movlt	r3, r2
 800483e:	6033      	str	r3, [r6, #0]
 8004840:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004844:	4607      	mov	r7, r0
 8004846:	460c      	mov	r4, r1
 8004848:	b10a      	cbz	r2, 800484e <_printf_common+0x26>
 800484a:	3301      	adds	r3, #1
 800484c:	6033      	str	r3, [r6, #0]
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	0699      	lsls	r1, r3, #26
 8004852:	bf42      	ittt	mi
 8004854:	6833      	ldrmi	r3, [r6, #0]
 8004856:	3302      	addmi	r3, #2
 8004858:	6033      	strmi	r3, [r6, #0]
 800485a:	6825      	ldr	r5, [r4, #0]
 800485c:	f015 0506 	ands.w	r5, r5, #6
 8004860:	d106      	bne.n	8004870 <_printf_common+0x48>
 8004862:	f104 0a19 	add.w	sl, r4, #25
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	6832      	ldr	r2, [r6, #0]
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	42ab      	cmp	r3, r5
 800486e:	dc26      	bgt.n	80048be <_printf_common+0x96>
 8004870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	3b00      	subs	r3, #0
 8004878:	bf18      	it	ne
 800487a:	2301      	movne	r3, #1
 800487c:	0692      	lsls	r2, r2, #26
 800487e:	d42b      	bmi.n	80048d8 <_printf_common+0xb0>
 8004880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004884:	4641      	mov	r1, r8
 8004886:	4638      	mov	r0, r7
 8004888:	47c8      	blx	r9
 800488a:	3001      	adds	r0, #1
 800488c:	d01e      	beq.n	80048cc <_printf_common+0xa4>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	6922      	ldr	r2, [r4, #16]
 8004892:	f003 0306 	and.w	r3, r3, #6
 8004896:	2b04      	cmp	r3, #4
 8004898:	bf02      	ittt	eq
 800489a:	68e5      	ldreq	r5, [r4, #12]
 800489c:	6833      	ldreq	r3, [r6, #0]
 800489e:	1aed      	subeq	r5, r5, r3
 80048a0:	68a3      	ldr	r3, [r4, #8]
 80048a2:	bf0c      	ite	eq
 80048a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048a8:	2500      	movne	r5, #0
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bfc4      	itt	gt
 80048ae:	1a9b      	subgt	r3, r3, r2
 80048b0:	18ed      	addgt	r5, r5, r3
 80048b2:	2600      	movs	r6, #0
 80048b4:	341a      	adds	r4, #26
 80048b6:	42b5      	cmp	r5, r6
 80048b8:	d11a      	bne.n	80048f0 <_printf_common+0xc8>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e008      	b.n	80048d0 <_printf_common+0xa8>
 80048be:	2301      	movs	r3, #1
 80048c0:	4652      	mov	r2, sl
 80048c2:	4641      	mov	r1, r8
 80048c4:	4638      	mov	r0, r7
 80048c6:	47c8      	blx	r9
 80048c8:	3001      	adds	r0, #1
 80048ca:	d103      	bne.n	80048d4 <_printf_common+0xac>
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	3501      	adds	r5, #1
 80048d6:	e7c6      	b.n	8004866 <_printf_common+0x3e>
 80048d8:	18e1      	adds	r1, r4, r3
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	2030      	movs	r0, #48	@ 0x30
 80048de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048e2:	4422      	add	r2, r4
 80048e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048ec:	3302      	adds	r3, #2
 80048ee:	e7c7      	b.n	8004880 <_printf_common+0x58>
 80048f0:	2301      	movs	r3, #1
 80048f2:	4622      	mov	r2, r4
 80048f4:	4641      	mov	r1, r8
 80048f6:	4638      	mov	r0, r7
 80048f8:	47c8      	blx	r9
 80048fa:	3001      	adds	r0, #1
 80048fc:	d0e6      	beq.n	80048cc <_printf_common+0xa4>
 80048fe:	3601      	adds	r6, #1
 8004900:	e7d9      	b.n	80048b6 <_printf_common+0x8e>
	...

08004904 <_printf_i>:
 8004904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	7e0f      	ldrb	r7, [r1, #24]
 800490a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800490c:	2f78      	cmp	r7, #120	@ 0x78
 800490e:	4691      	mov	r9, r2
 8004910:	4680      	mov	r8, r0
 8004912:	460c      	mov	r4, r1
 8004914:	469a      	mov	sl, r3
 8004916:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800491a:	d807      	bhi.n	800492c <_printf_i+0x28>
 800491c:	2f62      	cmp	r7, #98	@ 0x62
 800491e:	d80a      	bhi.n	8004936 <_printf_i+0x32>
 8004920:	2f00      	cmp	r7, #0
 8004922:	f000 80d2 	beq.w	8004aca <_printf_i+0x1c6>
 8004926:	2f58      	cmp	r7, #88	@ 0x58
 8004928:	f000 80b9 	beq.w	8004a9e <_printf_i+0x19a>
 800492c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004930:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004934:	e03a      	b.n	80049ac <_printf_i+0xa8>
 8004936:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800493a:	2b15      	cmp	r3, #21
 800493c:	d8f6      	bhi.n	800492c <_printf_i+0x28>
 800493e:	a101      	add	r1, pc, #4	@ (adr r1, 8004944 <_printf_i+0x40>)
 8004940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004944:	0800499d 	.word	0x0800499d
 8004948:	080049b1 	.word	0x080049b1
 800494c:	0800492d 	.word	0x0800492d
 8004950:	0800492d 	.word	0x0800492d
 8004954:	0800492d 	.word	0x0800492d
 8004958:	0800492d 	.word	0x0800492d
 800495c:	080049b1 	.word	0x080049b1
 8004960:	0800492d 	.word	0x0800492d
 8004964:	0800492d 	.word	0x0800492d
 8004968:	0800492d 	.word	0x0800492d
 800496c:	0800492d 	.word	0x0800492d
 8004970:	08004ab1 	.word	0x08004ab1
 8004974:	080049db 	.word	0x080049db
 8004978:	08004a6b 	.word	0x08004a6b
 800497c:	0800492d 	.word	0x0800492d
 8004980:	0800492d 	.word	0x0800492d
 8004984:	08004ad3 	.word	0x08004ad3
 8004988:	0800492d 	.word	0x0800492d
 800498c:	080049db 	.word	0x080049db
 8004990:	0800492d 	.word	0x0800492d
 8004994:	0800492d 	.word	0x0800492d
 8004998:	08004a73 	.word	0x08004a73
 800499c:	6833      	ldr	r3, [r6, #0]
 800499e:	1d1a      	adds	r2, r3, #4
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6032      	str	r2, [r6, #0]
 80049a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049ac:	2301      	movs	r3, #1
 80049ae:	e09d      	b.n	8004aec <_printf_i+0x1e8>
 80049b0:	6833      	ldr	r3, [r6, #0]
 80049b2:	6820      	ldr	r0, [r4, #0]
 80049b4:	1d19      	adds	r1, r3, #4
 80049b6:	6031      	str	r1, [r6, #0]
 80049b8:	0606      	lsls	r6, r0, #24
 80049ba:	d501      	bpl.n	80049c0 <_printf_i+0xbc>
 80049bc:	681d      	ldr	r5, [r3, #0]
 80049be:	e003      	b.n	80049c8 <_printf_i+0xc4>
 80049c0:	0645      	lsls	r5, r0, #25
 80049c2:	d5fb      	bpl.n	80049bc <_printf_i+0xb8>
 80049c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049c8:	2d00      	cmp	r5, #0
 80049ca:	da03      	bge.n	80049d4 <_printf_i+0xd0>
 80049cc:	232d      	movs	r3, #45	@ 0x2d
 80049ce:	426d      	negs	r5, r5
 80049d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049d4:	4859      	ldr	r0, [pc, #356]	@ (8004b3c <_printf_i+0x238>)
 80049d6:	230a      	movs	r3, #10
 80049d8:	e011      	b.n	80049fe <_printf_i+0xfa>
 80049da:	6821      	ldr	r1, [r4, #0]
 80049dc:	6833      	ldr	r3, [r6, #0]
 80049de:	0608      	lsls	r0, r1, #24
 80049e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80049e4:	d402      	bmi.n	80049ec <_printf_i+0xe8>
 80049e6:	0649      	lsls	r1, r1, #25
 80049e8:	bf48      	it	mi
 80049ea:	b2ad      	uxthmi	r5, r5
 80049ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80049ee:	4853      	ldr	r0, [pc, #332]	@ (8004b3c <_printf_i+0x238>)
 80049f0:	6033      	str	r3, [r6, #0]
 80049f2:	bf14      	ite	ne
 80049f4:	230a      	movne	r3, #10
 80049f6:	2308      	moveq	r3, #8
 80049f8:	2100      	movs	r1, #0
 80049fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049fe:	6866      	ldr	r6, [r4, #4]
 8004a00:	60a6      	str	r6, [r4, #8]
 8004a02:	2e00      	cmp	r6, #0
 8004a04:	bfa2      	ittt	ge
 8004a06:	6821      	ldrge	r1, [r4, #0]
 8004a08:	f021 0104 	bicge.w	r1, r1, #4
 8004a0c:	6021      	strge	r1, [r4, #0]
 8004a0e:	b90d      	cbnz	r5, 8004a14 <_printf_i+0x110>
 8004a10:	2e00      	cmp	r6, #0
 8004a12:	d04b      	beq.n	8004aac <_printf_i+0x1a8>
 8004a14:	4616      	mov	r6, r2
 8004a16:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a1a:	fb03 5711 	mls	r7, r3, r1, r5
 8004a1e:	5dc7      	ldrb	r7, [r0, r7]
 8004a20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a24:	462f      	mov	r7, r5
 8004a26:	42bb      	cmp	r3, r7
 8004a28:	460d      	mov	r5, r1
 8004a2a:	d9f4      	bls.n	8004a16 <_printf_i+0x112>
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d10b      	bne.n	8004a48 <_printf_i+0x144>
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	07df      	lsls	r7, r3, #31
 8004a34:	d508      	bpl.n	8004a48 <_printf_i+0x144>
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	6861      	ldr	r1, [r4, #4]
 8004a3a:	4299      	cmp	r1, r3
 8004a3c:	bfde      	ittt	le
 8004a3e:	2330      	movle	r3, #48	@ 0x30
 8004a40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a48:	1b92      	subs	r2, r2, r6
 8004a4a:	6122      	str	r2, [r4, #16]
 8004a4c:	f8cd a000 	str.w	sl, [sp]
 8004a50:	464b      	mov	r3, r9
 8004a52:	aa03      	add	r2, sp, #12
 8004a54:	4621      	mov	r1, r4
 8004a56:	4640      	mov	r0, r8
 8004a58:	f7ff fee6 	bl	8004828 <_printf_common>
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d14a      	bne.n	8004af6 <_printf_i+0x1f2>
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	b004      	add	sp, #16
 8004a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	f043 0320 	orr.w	r3, r3, #32
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	4833      	ldr	r0, [pc, #204]	@ (8004b40 <_printf_i+0x23c>)
 8004a74:	2778      	movs	r7, #120	@ 0x78
 8004a76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	6831      	ldr	r1, [r6, #0]
 8004a7e:	061f      	lsls	r7, r3, #24
 8004a80:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a84:	d402      	bmi.n	8004a8c <_printf_i+0x188>
 8004a86:	065f      	lsls	r7, r3, #25
 8004a88:	bf48      	it	mi
 8004a8a:	b2ad      	uxthmi	r5, r5
 8004a8c:	6031      	str	r1, [r6, #0]
 8004a8e:	07d9      	lsls	r1, r3, #31
 8004a90:	bf44      	itt	mi
 8004a92:	f043 0320 	orrmi.w	r3, r3, #32
 8004a96:	6023      	strmi	r3, [r4, #0]
 8004a98:	b11d      	cbz	r5, 8004aa2 <_printf_i+0x19e>
 8004a9a:	2310      	movs	r3, #16
 8004a9c:	e7ac      	b.n	80049f8 <_printf_i+0xf4>
 8004a9e:	4827      	ldr	r0, [pc, #156]	@ (8004b3c <_printf_i+0x238>)
 8004aa0:	e7e9      	b.n	8004a76 <_printf_i+0x172>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	f023 0320 	bic.w	r3, r3, #32
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	e7f6      	b.n	8004a9a <_printf_i+0x196>
 8004aac:	4616      	mov	r6, r2
 8004aae:	e7bd      	b.n	8004a2c <_printf_i+0x128>
 8004ab0:	6833      	ldr	r3, [r6, #0]
 8004ab2:	6825      	ldr	r5, [r4, #0]
 8004ab4:	6961      	ldr	r1, [r4, #20]
 8004ab6:	1d18      	adds	r0, r3, #4
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	062e      	lsls	r6, r5, #24
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	d501      	bpl.n	8004ac4 <_printf_i+0x1c0>
 8004ac0:	6019      	str	r1, [r3, #0]
 8004ac2:	e002      	b.n	8004aca <_printf_i+0x1c6>
 8004ac4:	0668      	lsls	r0, r5, #25
 8004ac6:	d5fb      	bpl.n	8004ac0 <_printf_i+0x1bc>
 8004ac8:	8019      	strh	r1, [r3, #0]
 8004aca:	2300      	movs	r3, #0
 8004acc:	6123      	str	r3, [r4, #16]
 8004ace:	4616      	mov	r6, r2
 8004ad0:	e7bc      	b.n	8004a4c <_printf_i+0x148>
 8004ad2:	6833      	ldr	r3, [r6, #0]
 8004ad4:	1d1a      	adds	r2, r3, #4
 8004ad6:	6032      	str	r2, [r6, #0]
 8004ad8:	681e      	ldr	r6, [r3, #0]
 8004ada:	6862      	ldr	r2, [r4, #4]
 8004adc:	2100      	movs	r1, #0
 8004ade:	4630      	mov	r0, r6
 8004ae0:	f7fb fb7e 	bl	80001e0 <memchr>
 8004ae4:	b108      	cbz	r0, 8004aea <_printf_i+0x1e6>
 8004ae6:	1b80      	subs	r0, r0, r6
 8004ae8:	6060      	str	r0, [r4, #4]
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	6123      	str	r3, [r4, #16]
 8004aee:	2300      	movs	r3, #0
 8004af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004af4:	e7aa      	b.n	8004a4c <_printf_i+0x148>
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	4632      	mov	r2, r6
 8004afa:	4649      	mov	r1, r9
 8004afc:	4640      	mov	r0, r8
 8004afe:	47d0      	blx	sl
 8004b00:	3001      	adds	r0, #1
 8004b02:	d0ad      	beq.n	8004a60 <_printf_i+0x15c>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	079b      	lsls	r3, r3, #30
 8004b08:	d413      	bmi.n	8004b32 <_printf_i+0x22e>
 8004b0a:	68e0      	ldr	r0, [r4, #12]
 8004b0c:	9b03      	ldr	r3, [sp, #12]
 8004b0e:	4298      	cmp	r0, r3
 8004b10:	bfb8      	it	lt
 8004b12:	4618      	movlt	r0, r3
 8004b14:	e7a6      	b.n	8004a64 <_printf_i+0x160>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4632      	mov	r2, r6
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	47d0      	blx	sl
 8004b20:	3001      	adds	r0, #1
 8004b22:	d09d      	beq.n	8004a60 <_printf_i+0x15c>
 8004b24:	3501      	adds	r5, #1
 8004b26:	68e3      	ldr	r3, [r4, #12]
 8004b28:	9903      	ldr	r1, [sp, #12]
 8004b2a:	1a5b      	subs	r3, r3, r1
 8004b2c:	42ab      	cmp	r3, r5
 8004b2e:	dcf2      	bgt.n	8004b16 <_printf_i+0x212>
 8004b30:	e7eb      	b.n	8004b0a <_printf_i+0x206>
 8004b32:	2500      	movs	r5, #0
 8004b34:	f104 0619 	add.w	r6, r4, #25
 8004b38:	e7f5      	b.n	8004b26 <_printf_i+0x222>
 8004b3a:	bf00      	nop
 8004b3c:	08005549 	.word	0x08005549
 8004b40:	0800555a 	.word	0x0800555a

08004b44 <__sflush_r>:
 8004b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4c:	0716      	lsls	r6, r2, #28
 8004b4e:	4605      	mov	r5, r0
 8004b50:	460c      	mov	r4, r1
 8004b52:	d454      	bmi.n	8004bfe <__sflush_r+0xba>
 8004b54:	684b      	ldr	r3, [r1, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	dc02      	bgt.n	8004b60 <__sflush_r+0x1c>
 8004b5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dd48      	ble.n	8004bf2 <__sflush_r+0xae>
 8004b60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b62:	2e00      	cmp	r6, #0
 8004b64:	d045      	beq.n	8004bf2 <__sflush_r+0xae>
 8004b66:	2300      	movs	r3, #0
 8004b68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b6c:	682f      	ldr	r7, [r5, #0]
 8004b6e:	6a21      	ldr	r1, [r4, #32]
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	d030      	beq.n	8004bd6 <__sflush_r+0x92>
 8004b74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	0759      	lsls	r1, r3, #29
 8004b7a:	d505      	bpl.n	8004b88 <__sflush_r+0x44>
 8004b7c:	6863      	ldr	r3, [r4, #4]
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b82:	b10b      	cbz	r3, 8004b88 <__sflush_r+0x44>
 8004b84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b86:	1ad2      	subs	r2, r2, r3
 8004b88:	2300      	movs	r3, #0
 8004b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b8c:	6a21      	ldr	r1, [r4, #32]
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b0      	blx	r6
 8004b92:	1c43      	adds	r3, r0, #1
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	d106      	bne.n	8004ba6 <__sflush_r+0x62>
 8004b98:	6829      	ldr	r1, [r5, #0]
 8004b9a:	291d      	cmp	r1, #29
 8004b9c:	d82b      	bhi.n	8004bf6 <__sflush_r+0xb2>
 8004b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c48 <__sflush_r+0x104>)
 8004ba0:	410a      	asrs	r2, r1
 8004ba2:	07d6      	lsls	r6, r2, #31
 8004ba4:	d427      	bmi.n	8004bf6 <__sflush_r+0xb2>
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	6062      	str	r2, [r4, #4]
 8004baa:	04d9      	lsls	r1, r3, #19
 8004bac:	6922      	ldr	r2, [r4, #16]
 8004bae:	6022      	str	r2, [r4, #0]
 8004bb0:	d504      	bpl.n	8004bbc <__sflush_r+0x78>
 8004bb2:	1c42      	adds	r2, r0, #1
 8004bb4:	d101      	bne.n	8004bba <__sflush_r+0x76>
 8004bb6:	682b      	ldr	r3, [r5, #0]
 8004bb8:	b903      	cbnz	r3, 8004bbc <__sflush_r+0x78>
 8004bba:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bbe:	602f      	str	r7, [r5, #0]
 8004bc0:	b1b9      	cbz	r1, 8004bf2 <__sflush_r+0xae>
 8004bc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bc6:	4299      	cmp	r1, r3
 8004bc8:	d002      	beq.n	8004bd0 <__sflush_r+0x8c>
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f7ff fc8a 	bl	80044e4 <_free_r>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bd4:	e00d      	b.n	8004bf2 <__sflush_r+0xae>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b0      	blx	r6
 8004bdc:	4602      	mov	r2, r0
 8004bde:	1c50      	adds	r0, r2, #1
 8004be0:	d1c9      	bne.n	8004b76 <__sflush_r+0x32>
 8004be2:	682b      	ldr	r3, [r5, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0c6      	beq.n	8004b76 <__sflush_r+0x32>
 8004be8:	2b1d      	cmp	r3, #29
 8004bea:	d001      	beq.n	8004bf0 <__sflush_r+0xac>
 8004bec:	2b16      	cmp	r3, #22
 8004bee:	d11e      	bne.n	8004c2e <__sflush_r+0xea>
 8004bf0:	602f      	str	r7, [r5, #0]
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e022      	b.n	8004c3c <__sflush_r+0xf8>
 8004bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bfa:	b21b      	sxth	r3, r3
 8004bfc:	e01b      	b.n	8004c36 <__sflush_r+0xf2>
 8004bfe:	690f      	ldr	r7, [r1, #16]
 8004c00:	2f00      	cmp	r7, #0
 8004c02:	d0f6      	beq.n	8004bf2 <__sflush_r+0xae>
 8004c04:	0793      	lsls	r3, r2, #30
 8004c06:	680e      	ldr	r6, [r1, #0]
 8004c08:	bf08      	it	eq
 8004c0a:	694b      	ldreq	r3, [r1, #20]
 8004c0c:	600f      	str	r7, [r1, #0]
 8004c0e:	bf18      	it	ne
 8004c10:	2300      	movne	r3, #0
 8004c12:	eba6 0807 	sub.w	r8, r6, r7
 8004c16:	608b      	str	r3, [r1, #8]
 8004c18:	f1b8 0f00 	cmp.w	r8, #0
 8004c1c:	dde9      	ble.n	8004bf2 <__sflush_r+0xae>
 8004c1e:	6a21      	ldr	r1, [r4, #32]
 8004c20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c22:	4643      	mov	r3, r8
 8004c24:	463a      	mov	r2, r7
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b0      	blx	r6
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	dc08      	bgt.n	8004c40 <__sflush_r+0xfc>
 8004c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c36:	81a3      	strh	r3, [r4, #12]
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c40:	4407      	add	r7, r0
 8004c42:	eba8 0800 	sub.w	r8, r8, r0
 8004c46:	e7e7      	b.n	8004c18 <__sflush_r+0xd4>
 8004c48:	dfbffffe 	.word	0xdfbffffe

08004c4c <_fflush_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	690b      	ldr	r3, [r1, #16]
 8004c50:	4605      	mov	r5, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	b913      	cbnz	r3, 8004c5c <_fflush_r+0x10>
 8004c56:	2500      	movs	r5, #0
 8004c58:	4628      	mov	r0, r5
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	b118      	cbz	r0, 8004c66 <_fflush_r+0x1a>
 8004c5e:	6a03      	ldr	r3, [r0, #32]
 8004c60:	b90b      	cbnz	r3, 8004c66 <_fflush_r+0x1a>
 8004c62:	f7ff fa6f 	bl	8004144 <__sinit>
 8004c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f3      	beq.n	8004c56 <_fflush_r+0xa>
 8004c6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c70:	07d0      	lsls	r0, r2, #31
 8004c72:	d404      	bmi.n	8004c7e <_fflush_r+0x32>
 8004c74:	0599      	lsls	r1, r3, #22
 8004c76:	d402      	bmi.n	8004c7e <_fflush_r+0x32>
 8004c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c7a:	f7ff fc04 	bl	8004486 <__retarget_lock_acquire_recursive>
 8004c7e:	4628      	mov	r0, r5
 8004c80:	4621      	mov	r1, r4
 8004c82:	f7ff ff5f 	bl	8004b44 <__sflush_r>
 8004c86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c88:	07da      	lsls	r2, r3, #31
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	d4e4      	bmi.n	8004c58 <_fflush_r+0xc>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	059b      	lsls	r3, r3, #22
 8004c92:	d4e1      	bmi.n	8004c58 <_fflush_r+0xc>
 8004c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c96:	f7ff fbf7 	bl	8004488 <__retarget_lock_release_recursive>
 8004c9a:	e7dd      	b.n	8004c58 <_fflush_r+0xc>

08004c9c <fiprintf>:
 8004c9c:	b40e      	push	{r1, r2, r3}
 8004c9e:	b503      	push	{r0, r1, lr}
 8004ca0:	4601      	mov	r1, r0
 8004ca2:	ab03      	add	r3, sp, #12
 8004ca4:	4805      	ldr	r0, [pc, #20]	@ (8004cbc <fiprintf+0x20>)
 8004ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004caa:	6800      	ldr	r0, [r0, #0]
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	f000 f87f 	bl	8004db0 <_vfiprintf_r>
 8004cb2:	b002      	add	sp, #8
 8004cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cb8:	b003      	add	sp, #12
 8004cba:	4770      	bx	lr
 8004cbc:	2000001c 	.word	0x2000001c

08004cc0 <memmove>:
 8004cc0:	4288      	cmp	r0, r1
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	eb01 0402 	add.w	r4, r1, r2
 8004cc8:	d902      	bls.n	8004cd0 <memmove+0x10>
 8004cca:	4284      	cmp	r4, r0
 8004ccc:	4623      	mov	r3, r4
 8004cce:	d807      	bhi.n	8004ce0 <memmove+0x20>
 8004cd0:	1e43      	subs	r3, r0, #1
 8004cd2:	42a1      	cmp	r1, r4
 8004cd4:	d008      	beq.n	8004ce8 <memmove+0x28>
 8004cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cde:	e7f8      	b.n	8004cd2 <memmove+0x12>
 8004ce0:	4402      	add	r2, r0
 8004ce2:	4601      	mov	r1, r0
 8004ce4:	428a      	cmp	r2, r1
 8004ce6:	d100      	bne.n	8004cea <memmove+0x2a>
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cf2:	e7f7      	b.n	8004ce4 <memmove+0x24>

08004cf4 <abort>:
 8004cf4:	b508      	push	{r3, lr}
 8004cf6:	2006      	movs	r0, #6
 8004cf8:	f000 fa2e 	bl	8005158 <raise>
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	f000 fb29 	bl	8005354 <_exit>

08004d02 <_realloc_r>:
 8004d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d06:	4680      	mov	r8, r0
 8004d08:	4615      	mov	r5, r2
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	b921      	cbnz	r1, 8004d18 <_realloc_r+0x16>
 8004d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d12:	4611      	mov	r1, r2
 8004d14:	f7ff b892 	b.w	8003e3c <_malloc_r>
 8004d18:	b92a      	cbnz	r2, 8004d26 <_realloc_r+0x24>
 8004d1a:	f7ff fbe3 	bl	80044e4 <_free_r>
 8004d1e:	2400      	movs	r4, #0
 8004d20:	4620      	mov	r0, r4
 8004d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d26:	f000 fa33 	bl	8005190 <_malloc_usable_size_r>
 8004d2a:	4285      	cmp	r5, r0
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	d802      	bhi.n	8004d36 <_realloc_r+0x34>
 8004d30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d34:	d8f4      	bhi.n	8004d20 <_realloc_r+0x1e>
 8004d36:	4629      	mov	r1, r5
 8004d38:	4640      	mov	r0, r8
 8004d3a:	f7ff f87f 	bl	8003e3c <_malloc_r>
 8004d3e:	4607      	mov	r7, r0
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d0ec      	beq.n	8004d1e <_realloc_r+0x1c>
 8004d44:	42b5      	cmp	r5, r6
 8004d46:	462a      	mov	r2, r5
 8004d48:	4621      	mov	r1, r4
 8004d4a:	bf28      	it	cs
 8004d4c:	4632      	movcs	r2, r6
 8004d4e:	f7ff fb9c 	bl	800448a <memcpy>
 8004d52:	4621      	mov	r1, r4
 8004d54:	4640      	mov	r0, r8
 8004d56:	f7ff fbc5 	bl	80044e4 <_free_r>
 8004d5a:	463c      	mov	r4, r7
 8004d5c:	e7e0      	b.n	8004d20 <_realloc_r+0x1e>

08004d5e <__sfputc_r>:
 8004d5e:	6893      	ldr	r3, [r2, #8]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	b410      	push	{r4}
 8004d66:	6093      	str	r3, [r2, #8]
 8004d68:	da08      	bge.n	8004d7c <__sfputc_r+0x1e>
 8004d6a:	6994      	ldr	r4, [r2, #24]
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	db01      	blt.n	8004d74 <__sfputc_r+0x16>
 8004d70:	290a      	cmp	r1, #10
 8004d72:	d103      	bne.n	8004d7c <__sfputc_r+0x1e>
 8004d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d78:	f000 b932 	b.w	8004fe0 <__swbuf_r>
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	1c58      	adds	r0, r3, #1
 8004d80:	6010      	str	r0, [r2, #0]
 8004d82:	7019      	strb	r1, [r3, #0]
 8004d84:	4608      	mov	r0, r1
 8004d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <__sfputs_r>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	4606      	mov	r6, r0
 8004d90:	460f      	mov	r7, r1
 8004d92:	4614      	mov	r4, r2
 8004d94:	18d5      	adds	r5, r2, r3
 8004d96:	42ac      	cmp	r4, r5
 8004d98:	d101      	bne.n	8004d9e <__sfputs_r+0x12>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e007      	b.n	8004dae <__sfputs_r+0x22>
 8004d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da2:	463a      	mov	r2, r7
 8004da4:	4630      	mov	r0, r6
 8004da6:	f7ff ffda 	bl	8004d5e <__sfputc_r>
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	d1f3      	bne.n	8004d96 <__sfputs_r+0xa>
 8004dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004db0 <_vfiprintf_r>:
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	460d      	mov	r5, r1
 8004db6:	b09d      	sub	sp, #116	@ 0x74
 8004db8:	4614      	mov	r4, r2
 8004dba:	4698      	mov	r8, r3
 8004dbc:	4606      	mov	r6, r0
 8004dbe:	b118      	cbz	r0, 8004dc8 <_vfiprintf_r+0x18>
 8004dc0:	6a03      	ldr	r3, [r0, #32]
 8004dc2:	b90b      	cbnz	r3, 8004dc8 <_vfiprintf_r+0x18>
 8004dc4:	f7ff f9be 	bl	8004144 <__sinit>
 8004dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dca:	07d9      	lsls	r1, r3, #31
 8004dcc:	d405      	bmi.n	8004dda <_vfiprintf_r+0x2a>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	059a      	lsls	r2, r3, #22
 8004dd2:	d402      	bmi.n	8004dda <_vfiprintf_r+0x2a>
 8004dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dd6:	f7ff fb56 	bl	8004486 <__retarget_lock_acquire_recursive>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	071b      	lsls	r3, r3, #28
 8004dde:	d501      	bpl.n	8004de4 <_vfiprintf_r+0x34>
 8004de0:	692b      	ldr	r3, [r5, #16]
 8004de2:	b99b      	cbnz	r3, 8004e0c <_vfiprintf_r+0x5c>
 8004de4:	4629      	mov	r1, r5
 8004de6:	4630      	mov	r0, r6
 8004de8:	f000 f938 	bl	800505c <__swsetup_r>
 8004dec:	b170      	cbz	r0, 8004e0c <_vfiprintf_r+0x5c>
 8004dee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004df0:	07dc      	lsls	r4, r3, #31
 8004df2:	d504      	bpl.n	8004dfe <_vfiprintf_r+0x4e>
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	b01d      	add	sp, #116	@ 0x74
 8004dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfe:	89ab      	ldrh	r3, [r5, #12]
 8004e00:	0598      	lsls	r0, r3, #22
 8004e02:	d4f7      	bmi.n	8004df4 <_vfiprintf_r+0x44>
 8004e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e06:	f7ff fb3f 	bl	8004488 <__retarget_lock_release_recursive>
 8004e0a:	e7f3      	b.n	8004df4 <_vfiprintf_r+0x44>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e10:	2320      	movs	r3, #32
 8004e12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e1a:	2330      	movs	r3, #48	@ 0x30
 8004e1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004fcc <_vfiprintf_r+0x21c>
 8004e20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e24:	f04f 0901 	mov.w	r9, #1
 8004e28:	4623      	mov	r3, r4
 8004e2a:	469a      	mov	sl, r3
 8004e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e30:	b10a      	cbz	r2, 8004e36 <_vfiprintf_r+0x86>
 8004e32:	2a25      	cmp	r2, #37	@ 0x25
 8004e34:	d1f9      	bne.n	8004e2a <_vfiprintf_r+0x7a>
 8004e36:	ebba 0b04 	subs.w	fp, sl, r4
 8004e3a:	d00b      	beq.n	8004e54 <_vfiprintf_r+0xa4>
 8004e3c:	465b      	mov	r3, fp
 8004e3e:	4622      	mov	r2, r4
 8004e40:	4629      	mov	r1, r5
 8004e42:	4630      	mov	r0, r6
 8004e44:	f7ff ffa2 	bl	8004d8c <__sfputs_r>
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f000 80a7 	beq.w	8004f9c <_vfiprintf_r+0x1ec>
 8004e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e50:	445a      	add	r2, fp
 8004e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e54:	f89a 3000 	ldrb.w	r3, [sl]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 809f 	beq.w	8004f9c <_vfiprintf_r+0x1ec>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f04f 32ff 	mov.w	r2, #4294967295
 8004e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e68:	f10a 0a01 	add.w	sl, sl, #1
 8004e6c:	9304      	str	r3, [sp, #16]
 8004e6e:	9307      	str	r3, [sp, #28]
 8004e70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e76:	4654      	mov	r4, sl
 8004e78:	2205      	movs	r2, #5
 8004e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e7e:	4853      	ldr	r0, [pc, #332]	@ (8004fcc <_vfiprintf_r+0x21c>)
 8004e80:	f7fb f9ae 	bl	80001e0 <memchr>
 8004e84:	9a04      	ldr	r2, [sp, #16]
 8004e86:	b9d8      	cbnz	r0, 8004ec0 <_vfiprintf_r+0x110>
 8004e88:	06d1      	lsls	r1, r2, #27
 8004e8a:	bf44      	itt	mi
 8004e8c:	2320      	movmi	r3, #32
 8004e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e92:	0713      	lsls	r3, r2, #28
 8004e94:	bf44      	itt	mi
 8004e96:	232b      	movmi	r3, #43	@ 0x2b
 8004e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ea2:	d015      	beq.n	8004ed0 <_vfiprintf_r+0x120>
 8004ea4:	9a07      	ldr	r2, [sp, #28]
 8004ea6:	4654      	mov	r4, sl
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f04f 0c0a 	mov.w	ip, #10
 8004eae:	4621      	mov	r1, r4
 8004eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eb4:	3b30      	subs	r3, #48	@ 0x30
 8004eb6:	2b09      	cmp	r3, #9
 8004eb8:	d94b      	bls.n	8004f52 <_vfiprintf_r+0x1a2>
 8004eba:	b1b0      	cbz	r0, 8004eea <_vfiprintf_r+0x13a>
 8004ebc:	9207      	str	r2, [sp, #28]
 8004ebe:	e014      	b.n	8004eea <_vfiprintf_r+0x13a>
 8004ec0:	eba0 0308 	sub.w	r3, r0, r8
 8004ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	9304      	str	r3, [sp, #16]
 8004ecc:	46a2      	mov	sl, r4
 8004ece:	e7d2      	b.n	8004e76 <_vfiprintf_r+0xc6>
 8004ed0:	9b03      	ldr	r3, [sp, #12]
 8004ed2:	1d19      	adds	r1, r3, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	9103      	str	r1, [sp, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bfbb      	ittet	lt
 8004edc:	425b      	neglt	r3, r3
 8004ede:	f042 0202 	orrlt.w	r2, r2, #2
 8004ee2:	9307      	strge	r3, [sp, #28]
 8004ee4:	9307      	strlt	r3, [sp, #28]
 8004ee6:	bfb8      	it	lt
 8004ee8:	9204      	strlt	r2, [sp, #16]
 8004eea:	7823      	ldrb	r3, [r4, #0]
 8004eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8004eee:	d10a      	bne.n	8004f06 <_vfiprintf_r+0x156>
 8004ef0:	7863      	ldrb	r3, [r4, #1]
 8004ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ef4:	d132      	bne.n	8004f5c <_vfiprintf_r+0x1ac>
 8004ef6:	9b03      	ldr	r3, [sp, #12]
 8004ef8:	1d1a      	adds	r2, r3, #4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	9203      	str	r2, [sp, #12]
 8004efe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f02:	3402      	adds	r4, #2
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004fdc <_vfiprintf_r+0x22c>
 8004f0a:	7821      	ldrb	r1, [r4, #0]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	4650      	mov	r0, sl
 8004f10:	f7fb f966 	bl	80001e0 <memchr>
 8004f14:	b138      	cbz	r0, 8004f26 <_vfiprintf_r+0x176>
 8004f16:	9b04      	ldr	r3, [sp, #16]
 8004f18:	eba0 000a 	sub.w	r0, r0, sl
 8004f1c:	2240      	movs	r2, #64	@ 0x40
 8004f1e:	4082      	lsls	r2, r0
 8004f20:	4313      	orrs	r3, r2
 8004f22:	3401      	adds	r4, #1
 8004f24:	9304      	str	r3, [sp, #16]
 8004f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f2a:	4829      	ldr	r0, [pc, #164]	@ (8004fd0 <_vfiprintf_r+0x220>)
 8004f2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f30:	2206      	movs	r2, #6
 8004f32:	f7fb f955 	bl	80001e0 <memchr>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d03f      	beq.n	8004fba <_vfiprintf_r+0x20a>
 8004f3a:	4b26      	ldr	r3, [pc, #152]	@ (8004fd4 <_vfiprintf_r+0x224>)
 8004f3c:	bb1b      	cbnz	r3, 8004f86 <_vfiprintf_r+0x1d6>
 8004f3e:	9b03      	ldr	r3, [sp, #12]
 8004f40:	3307      	adds	r3, #7
 8004f42:	f023 0307 	bic.w	r3, r3, #7
 8004f46:	3308      	adds	r3, #8
 8004f48:	9303      	str	r3, [sp, #12]
 8004f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f4c:	443b      	add	r3, r7
 8004f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f50:	e76a      	b.n	8004e28 <_vfiprintf_r+0x78>
 8004f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f56:	460c      	mov	r4, r1
 8004f58:	2001      	movs	r0, #1
 8004f5a:	e7a8      	b.n	8004eae <_vfiprintf_r+0xfe>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	3401      	adds	r4, #1
 8004f60:	9305      	str	r3, [sp, #20]
 8004f62:	4619      	mov	r1, r3
 8004f64:	f04f 0c0a 	mov.w	ip, #10
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f6e:	3a30      	subs	r2, #48	@ 0x30
 8004f70:	2a09      	cmp	r2, #9
 8004f72:	d903      	bls.n	8004f7c <_vfiprintf_r+0x1cc>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0c6      	beq.n	8004f06 <_vfiprintf_r+0x156>
 8004f78:	9105      	str	r1, [sp, #20]
 8004f7a:	e7c4      	b.n	8004f06 <_vfiprintf_r+0x156>
 8004f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f80:	4604      	mov	r4, r0
 8004f82:	2301      	movs	r3, #1
 8004f84:	e7f0      	b.n	8004f68 <_vfiprintf_r+0x1b8>
 8004f86:	ab03      	add	r3, sp, #12
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	462a      	mov	r2, r5
 8004f8c:	4b12      	ldr	r3, [pc, #72]	@ (8004fd8 <_vfiprintf_r+0x228>)
 8004f8e:	a904      	add	r1, sp, #16
 8004f90:	4630      	mov	r0, r6
 8004f92:	f3af 8000 	nop.w
 8004f96:	4607      	mov	r7, r0
 8004f98:	1c78      	adds	r0, r7, #1
 8004f9a:	d1d6      	bne.n	8004f4a <_vfiprintf_r+0x19a>
 8004f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f9e:	07d9      	lsls	r1, r3, #31
 8004fa0:	d405      	bmi.n	8004fae <_vfiprintf_r+0x1fe>
 8004fa2:	89ab      	ldrh	r3, [r5, #12]
 8004fa4:	059a      	lsls	r2, r3, #22
 8004fa6:	d402      	bmi.n	8004fae <_vfiprintf_r+0x1fe>
 8004fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004faa:	f7ff fa6d 	bl	8004488 <__retarget_lock_release_recursive>
 8004fae:	89ab      	ldrh	r3, [r5, #12]
 8004fb0:	065b      	lsls	r3, r3, #25
 8004fb2:	f53f af1f 	bmi.w	8004df4 <_vfiprintf_r+0x44>
 8004fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fb8:	e71e      	b.n	8004df8 <_vfiprintf_r+0x48>
 8004fba:	ab03      	add	r3, sp, #12
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <_vfiprintf_r+0x228>)
 8004fc2:	a904      	add	r1, sp, #16
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	f7ff fc9d 	bl	8004904 <_printf_i>
 8004fca:	e7e4      	b.n	8004f96 <_vfiprintf_r+0x1e6>
 8004fcc:	08005538 	.word	0x08005538
 8004fd0:	08005542 	.word	0x08005542
 8004fd4:	00000000 	.word	0x00000000
 8004fd8:	08004d8d 	.word	0x08004d8d
 8004fdc:	0800553e 	.word	0x0800553e

08004fe0 <__swbuf_r>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	460e      	mov	r6, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	b118      	cbz	r0, 8004ff2 <__swbuf_r+0x12>
 8004fea:	6a03      	ldr	r3, [r0, #32]
 8004fec:	b90b      	cbnz	r3, 8004ff2 <__swbuf_r+0x12>
 8004fee:	f7ff f8a9 	bl	8004144 <__sinit>
 8004ff2:	69a3      	ldr	r3, [r4, #24]
 8004ff4:	60a3      	str	r3, [r4, #8]
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	071a      	lsls	r2, r3, #28
 8004ffa:	d501      	bpl.n	8005000 <__swbuf_r+0x20>
 8004ffc:	6923      	ldr	r3, [r4, #16]
 8004ffe:	b943      	cbnz	r3, 8005012 <__swbuf_r+0x32>
 8005000:	4621      	mov	r1, r4
 8005002:	4628      	mov	r0, r5
 8005004:	f000 f82a 	bl	800505c <__swsetup_r>
 8005008:	b118      	cbz	r0, 8005012 <__swbuf_r+0x32>
 800500a:	f04f 37ff 	mov.w	r7, #4294967295
 800500e:	4638      	mov	r0, r7
 8005010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	6922      	ldr	r2, [r4, #16]
 8005016:	1a98      	subs	r0, r3, r2
 8005018:	6963      	ldr	r3, [r4, #20]
 800501a:	b2f6      	uxtb	r6, r6
 800501c:	4283      	cmp	r3, r0
 800501e:	4637      	mov	r7, r6
 8005020:	dc05      	bgt.n	800502e <__swbuf_r+0x4e>
 8005022:	4621      	mov	r1, r4
 8005024:	4628      	mov	r0, r5
 8005026:	f7ff fe11 	bl	8004c4c <_fflush_r>
 800502a:	2800      	cmp	r0, #0
 800502c:	d1ed      	bne.n	800500a <__swbuf_r+0x2a>
 800502e:	68a3      	ldr	r3, [r4, #8]
 8005030:	3b01      	subs	r3, #1
 8005032:	60a3      	str	r3, [r4, #8]
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	6022      	str	r2, [r4, #0]
 800503a:	701e      	strb	r6, [r3, #0]
 800503c:	6962      	ldr	r2, [r4, #20]
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	429a      	cmp	r2, r3
 8005042:	d004      	beq.n	800504e <__swbuf_r+0x6e>
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	07db      	lsls	r3, r3, #31
 8005048:	d5e1      	bpl.n	800500e <__swbuf_r+0x2e>
 800504a:	2e0a      	cmp	r6, #10
 800504c:	d1df      	bne.n	800500e <__swbuf_r+0x2e>
 800504e:	4621      	mov	r1, r4
 8005050:	4628      	mov	r0, r5
 8005052:	f7ff fdfb 	bl	8004c4c <_fflush_r>
 8005056:	2800      	cmp	r0, #0
 8005058:	d0d9      	beq.n	800500e <__swbuf_r+0x2e>
 800505a:	e7d6      	b.n	800500a <__swbuf_r+0x2a>

0800505c <__swsetup_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4b29      	ldr	r3, [pc, #164]	@ (8005104 <__swsetup_r+0xa8>)
 8005060:	4605      	mov	r5, r0
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	460c      	mov	r4, r1
 8005066:	b118      	cbz	r0, 8005070 <__swsetup_r+0x14>
 8005068:	6a03      	ldr	r3, [r0, #32]
 800506a:	b90b      	cbnz	r3, 8005070 <__swsetup_r+0x14>
 800506c:	f7ff f86a 	bl	8004144 <__sinit>
 8005070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005074:	0719      	lsls	r1, r3, #28
 8005076:	d422      	bmi.n	80050be <__swsetup_r+0x62>
 8005078:	06da      	lsls	r2, r3, #27
 800507a:	d407      	bmi.n	800508c <__swsetup_r+0x30>
 800507c:	2209      	movs	r2, #9
 800507e:	602a      	str	r2, [r5, #0]
 8005080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005084:	81a3      	strh	r3, [r4, #12]
 8005086:	f04f 30ff 	mov.w	r0, #4294967295
 800508a:	e033      	b.n	80050f4 <__swsetup_r+0x98>
 800508c:	0758      	lsls	r0, r3, #29
 800508e:	d512      	bpl.n	80050b6 <__swsetup_r+0x5a>
 8005090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005092:	b141      	cbz	r1, 80050a6 <__swsetup_r+0x4a>
 8005094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005098:	4299      	cmp	r1, r3
 800509a:	d002      	beq.n	80050a2 <__swsetup_r+0x46>
 800509c:	4628      	mov	r0, r5
 800509e:	f7ff fa21 	bl	80044e4 <_free_r>
 80050a2:	2300      	movs	r3, #0
 80050a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80050ac:	81a3      	strh	r3, [r4, #12]
 80050ae:	2300      	movs	r3, #0
 80050b0:	6063      	str	r3, [r4, #4]
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	f043 0308 	orr.w	r3, r3, #8
 80050bc:	81a3      	strh	r3, [r4, #12]
 80050be:	6923      	ldr	r3, [r4, #16]
 80050c0:	b94b      	cbnz	r3, 80050d6 <__swsetup_r+0x7a>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050cc:	d003      	beq.n	80050d6 <__swsetup_r+0x7a>
 80050ce:	4621      	mov	r1, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	f000 f88b 	bl	80051ec <__smakebuf_r>
 80050d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050da:	f013 0201 	ands.w	r2, r3, #1
 80050de:	d00a      	beq.n	80050f6 <__swsetup_r+0x9a>
 80050e0:	2200      	movs	r2, #0
 80050e2:	60a2      	str	r2, [r4, #8]
 80050e4:	6962      	ldr	r2, [r4, #20]
 80050e6:	4252      	negs	r2, r2
 80050e8:	61a2      	str	r2, [r4, #24]
 80050ea:	6922      	ldr	r2, [r4, #16]
 80050ec:	b942      	cbnz	r2, 8005100 <__swsetup_r+0xa4>
 80050ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050f2:	d1c5      	bne.n	8005080 <__swsetup_r+0x24>
 80050f4:	bd38      	pop	{r3, r4, r5, pc}
 80050f6:	0799      	lsls	r1, r3, #30
 80050f8:	bf58      	it	pl
 80050fa:	6962      	ldrpl	r2, [r4, #20]
 80050fc:	60a2      	str	r2, [r4, #8]
 80050fe:	e7f4      	b.n	80050ea <__swsetup_r+0x8e>
 8005100:	2000      	movs	r0, #0
 8005102:	e7f7      	b.n	80050f4 <__swsetup_r+0x98>
 8005104:	2000001c 	.word	0x2000001c

08005108 <_raise_r>:
 8005108:	291f      	cmp	r1, #31
 800510a:	b538      	push	{r3, r4, r5, lr}
 800510c:	4605      	mov	r5, r0
 800510e:	460c      	mov	r4, r1
 8005110:	d904      	bls.n	800511c <_raise_r+0x14>
 8005112:	2316      	movs	r3, #22
 8005114:	6003      	str	r3, [r0, #0]
 8005116:	f04f 30ff 	mov.w	r0, #4294967295
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800511e:	b112      	cbz	r2, 8005126 <_raise_r+0x1e>
 8005120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005124:	b94b      	cbnz	r3, 800513a <_raise_r+0x32>
 8005126:	4628      	mov	r0, r5
 8005128:	f000 f830 	bl	800518c <_getpid_r>
 800512c:	4622      	mov	r2, r4
 800512e:	4601      	mov	r1, r0
 8005130:	4628      	mov	r0, r5
 8005132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005136:	f000 b817 	b.w	8005168 <_kill_r>
 800513a:	2b01      	cmp	r3, #1
 800513c:	d00a      	beq.n	8005154 <_raise_r+0x4c>
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	d103      	bne.n	800514a <_raise_r+0x42>
 8005142:	2316      	movs	r3, #22
 8005144:	6003      	str	r3, [r0, #0]
 8005146:	2001      	movs	r0, #1
 8005148:	e7e7      	b.n	800511a <_raise_r+0x12>
 800514a:	2100      	movs	r1, #0
 800514c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005150:	4620      	mov	r0, r4
 8005152:	4798      	blx	r3
 8005154:	2000      	movs	r0, #0
 8005156:	e7e0      	b.n	800511a <_raise_r+0x12>

08005158 <raise>:
 8005158:	4b02      	ldr	r3, [pc, #8]	@ (8005164 <raise+0xc>)
 800515a:	4601      	mov	r1, r0
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	f7ff bfd3 	b.w	8005108 <_raise_r>
 8005162:	bf00      	nop
 8005164:	2000001c 	.word	0x2000001c

08005168 <_kill_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d07      	ldr	r5, [pc, #28]	@ (8005188 <_kill_r+0x20>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	f000 f8bf 	bl	80052f8 <_kill>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d102      	bne.n	8005184 <_kill_r+0x1c>
 800517e:	682b      	ldr	r3, [r5, #0]
 8005180:	b103      	cbz	r3, 8005184 <_kill_r+0x1c>
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	20004c04 	.word	0x20004c04

0800518c <_getpid_r>:
 800518c:	f000 b89c 	b.w	80052c8 <_getpid>

08005190 <_malloc_usable_size_r>:
 8005190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005194:	1f18      	subs	r0, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	bfbc      	itt	lt
 800519a:	580b      	ldrlt	r3, [r1, r0]
 800519c:	18c0      	addlt	r0, r0, r3
 800519e:	4770      	bx	lr

080051a0 <__swhatbuf_r>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	460c      	mov	r4, r1
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	2900      	cmp	r1, #0
 80051aa:	b096      	sub	sp, #88	@ 0x58
 80051ac:	4615      	mov	r5, r2
 80051ae:	461e      	mov	r6, r3
 80051b0:	da0d      	bge.n	80051ce <__swhatbuf_r+0x2e>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051b8:	f04f 0100 	mov.w	r1, #0
 80051bc:	bf14      	ite	ne
 80051be:	2340      	movne	r3, #64	@ 0x40
 80051c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80051c4:	2000      	movs	r0, #0
 80051c6:	6031      	str	r1, [r6, #0]
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	b016      	add	sp, #88	@ 0x58
 80051cc:	bd70      	pop	{r4, r5, r6, pc}
 80051ce:	466a      	mov	r2, sp
 80051d0:	f000 f848 	bl	8005264 <_fstat_r>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	dbec      	blt.n	80051b2 <__swhatbuf_r+0x12>
 80051d8:	9901      	ldr	r1, [sp, #4]
 80051da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80051de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80051e2:	4259      	negs	r1, r3
 80051e4:	4159      	adcs	r1, r3
 80051e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051ea:	e7eb      	b.n	80051c4 <__swhatbuf_r+0x24>

080051ec <__smakebuf_r>:
 80051ec:	898b      	ldrh	r3, [r1, #12]
 80051ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051f0:	079d      	lsls	r5, r3, #30
 80051f2:	4606      	mov	r6, r0
 80051f4:	460c      	mov	r4, r1
 80051f6:	d507      	bpl.n	8005208 <__smakebuf_r+0x1c>
 80051f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	6123      	str	r3, [r4, #16]
 8005200:	2301      	movs	r3, #1
 8005202:	6163      	str	r3, [r4, #20]
 8005204:	b003      	add	sp, #12
 8005206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005208:	ab01      	add	r3, sp, #4
 800520a:	466a      	mov	r2, sp
 800520c:	f7ff ffc8 	bl	80051a0 <__swhatbuf_r>
 8005210:	9f00      	ldr	r7, [sp, #0]
 8005212:	4605      	mov	r5, r0
 8005214:	4639      	mov	r1, r7
 8005216:	4630      	mov	r0, r6
 8005218:	f7fe fe10 	bl	8003e3c <_malloc_r>
 800521c:	b948      	cbnz	r0, 8005232 <__smakebuf_r+0x46>
 800521e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005222:	059a      	lsls	r2, r3, #22
 8005224:	d4ee      	bmi.n	8005204 <__smakebuf_r+0x18>
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	f043 0302 	orr.w	r3, r3, #2
 800522e:	81a3      	strh	r3, [r4, #12]
 8005230:	e7e2      	b.n	80051f8 <__smakebuf_r+0xc>
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	6020      	str	r0, [r4, #0]
 8005236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	9b01      	ldr	r3, [sp, #4]
 800523e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005242:	b15b      	cbz	r3, 800525c <__smakebuf_r+0x70>
 8005244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005248:	4630      	mov	r0, r6
 800524a:	f000 f81d 	bl	8005288 <_isatty_r>
 800524e:	b128      	cbz	r0, 800525c <__smakebuf_r+0x70>
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	f023 0303 	bic.w	r3, r3, #3
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	81a3      	strh	r3, [r4, #12]
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	431d      	orrs	r5, r3
 8005260:	81a5      	strh	r5, [r4, #12]
 8005262:	e7cf      	b.n	8005204 <__smakebuf_r+0x18>

08005264 <_fstat_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4d07      	ldr	r5, [pc, #28]	@ (8005284 <_fstat_r+0x20>)
 8005268:	2300      	movs	r3, #0
 800526a:	4604      	mov	r4, r0
 800526c:	4608      	mov	r0, r1
 800526e:	4611      	mov	r1, r2
 8005270:	602b      	str	r3, [r5, #0]
 8005272:	f000 f821 	bl	80052b8 <_fstat>
 8005276:	1c43      	adds	r3, r0, #1
 8005278:	d102      	bne.n	8005280 <_fstat_r+0x1c>
 800527a:	682b      	ldr	r3, [r5, #0]
 800527c:	b103      	cbz	r3, 8005280 <_fstat_r+0x1c>
 800527e:	6023      	str	r3, [r4, #0]
 8005280:	bd38      	pop	{r3, r4, r5, pc}
 8005282:	bf00      	nop
 8005284:	20004c04 	.word	0x20004c04

08005288 <_isatty_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4d06      	ldr	r5, [pc, #24]	@ (80052a4 <_isatty_r+0x1c>)
 800528c:	2300      	movs	r3, #0
 800528e:	4604      	mov	r4, r0
 8005290:	4608      	mov	r0, r1
 8005292:	602b      	str	r3, [r5, #0]
 8005294:	f000 f828 	bl	80052e8 <_isatty>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_isatty_r+0x1a>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_isatty_r+0x1a>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20004c04 	.word	0x20004c04

080052a8 <_close>:
 80052a8:	4b02      	ldr	r3, [pc, #8]	@ (80052b4 <_close+0xc>)
 80052aa:	2258      	movs	r2, #88	@ 0x58
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295
 80052b2:	4770      	bx	lr
 80052b4:	20004c04 	.word	0x20004c04

080052b8 <_fstat>:
 80052b8:	4b02      	ldr	r3, [pc, #8]	@ (80052c4 <_fstat+0xc>)
 80052ba:	2258      	movs	r2, #88	@ 0x58
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	f04f 30ff 	mov.w	r0, #4294967295
 80052c2:	4770      	bx	lr
 80052c4:	20004c04 	.word	0x20004c04

080052c8 <_getpid>:
 80052c8:	4b02      	ldr	r3, [pc, #8]	@ (80052d4 <_getpid+0xc>)
 80052ca:	2258      	movs	r2, #88	@ 0x58
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f04f 30ff 	mov.w	r0, #4294967295
 80052d2:	4770      	bx	lr
 80052d4:	20004c04 	.word	0x20004c04

080052d8 <_gettimeofday>:
 80052d8:	4b02      	ldr	r3, [pc, #8]	@ (80052e4 <_gettimeofday+0xc>)
 80052da:	2258      	movs	r2, #88	@ 0x58
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f04f 30ff 	mov.w	r0, #4294967295
 80052e2:	4770      	bx	lr
 80052e4:	20004c04 	.word	0x20004c04

080052e8 <_isatty>:
 80052e8:	4b02      	ldr	r3, [pc, #8]	@ (80052f4 <_isatty+0xc>)
 80052ea:	2258      	movs	r2, #88	@ 0x58
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	2000      	movs	r0, #0
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20004c04 	.word	0x20004c04

080052f8 <_kill>:
 80052f8:	4b02      	ldr	r3, [pc, #8]	@ (8005304 <_kill+0xc>)
 80052fa:	2258      	movs	r2, #88	@ 0x58
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005302:	4770      	bx	lr
 8005304:	20004c04 	.word	0x20004c04

08005308 <_lseek>:
 8005308:	4b02      	ldr	r3, [pc, #8]	@ (8005314 <_lseek+0xc>)
 800530a:	2258      	movs	r2, #88	@ 0x58
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	f04f 30ff 	mov.w	r0, #4294967295
 8005312:	4770      	bx	lr
 8005314:	20004c04 	.word	0x20004c04

08005318 <_read>:
 8005318:	4b02      	ldr	r3, [pc, #8]	@ (8005324 <_read+0xc>)
 800531a:	2258      	movs	r2, #88	@ 0x58
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	f04f 30ff 	mov.w	r0, #4294967295
 8005322:	4770      	bx	lr
 8005324:	20004c04 	.word	0x20004c04

08005328 <_sbrk>:
 8005328:	4a04      	ldr	r2, [pc, #16]	@ (800533c <_sbrk+0x14>)
 800532a:	6811      	ldr	r1, [r2, #0]
 800532c:	4603      	mov	r3, r0
 800532e:	b909      	cbnz	r1, 8005334 <_sbrk+0xc>
 8005330:	4903      	ldr	r1, [pc, #12]	@ (8005340 <_sbrk+0x18>)
 8005332:	6011      	str	r1, [r2, #0]
 8005334:	6810      	ldr	r0, [r2, #0]
 8005336:	4403      	add	r3, r0
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4770      	bx	lr
 800533c:	20004c0c 	.word	0x20004c0c
 8005340:	20004c10 	.word	0x20004c10

08005344 <_write>:
 8005344:	4b02      	ldr	r3, [pc, #8]	@ (8005350 <_write+0xc>)
 8005346:	2258      	movs	r2, #88	@ 0x58
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	f04f 30ff 	mov.w	r0, #4294967295
 800534e:	4770      	bx	lr
 8005350:	20004c04 	.word	0x20004c04

08005354 <_exit>:
 8005354:	e7fe      	b.n	8005354 <_exit>
	...

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
