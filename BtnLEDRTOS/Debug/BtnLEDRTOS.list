
BtnLEDRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003320  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080034c0  080034c0  000044c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e4  080034e4  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  080034e4  080034e4  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e4  080034e4  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e4  080034e4  000044e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034e8  080034e8  000044e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080034ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b40  20000060  0800354c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba0  0800354c  00005ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3c2  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204f  00000000  00000000  00012452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  000144a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000085d  00000000  00000000  00014fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000025d6  00000000  00000000  00015815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b734  00000000  00000000  00017deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000947ee  00000000  00000000  0002351f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7d0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003058  00000000  00000000  000b7d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000bada8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080034a8 	.word	0x080034a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080034a8 	.word	0x080034a8

080001e0 <main>:
 */

#include "main.h"

int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af02      	add	r7, sp, #8
	// 1. Initialize the HAL and configure the system clock
	HAL_Init();
 80001e6:	f000 f8b7 	bl	8000358 <HAL_Init>

	// 2. Configure GPIOs
	GPIO_Config();
 80001ea:	f000 f83f 	bl	800026c <GPIO_Config>

	// 3. Create FreeRTOS tasks
	xTaskCreate(ButtonTask,      // Task function
 80001ee:	2300      	movs	r3, #0
 80001f0:	9301      	str	r3, [sp, #4]
 80001f2:	2301      	movs	r3, #1
 80001f4:	9300      	str	r3, [sp, #0]
 80001f6:	2300      	movs	r3, #0
 80001f8:	2280      	movs	r2, #128	@ 0x80
 80001fa:	4904      	ldr	r1, [pc, #16]	@ (800020c <main+0x2c>)
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <main+0x30>)
 80001fe:	f001 f9f3 	bl	80015e8 <xTaskCreate>
	        NULL,            // Parameters
	        1,               // Priority
	        NULL);           // Task handle

	// 4. Start the FreeRTOS scheduler
	vTaskStartScheduler();
 8000202:	f001 fb85 	bl	8001910 <vTaskStartScheduler>

	// Should never reach here
	while(1);
 8000206:	bf00      	nop
 8000208:	e7fd      	b.n	8000206 <main+0x26>
 800020a:	bf00      	nop
 800020c:	080034c0 	.word	0x080034c0
 8000210:	08000215 	.word	0x08000215

08000214 <ButtonTask>:
}


void ButtonTask(void *params)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
    // Local variable to track button state
    int flag = 1;
 800021c:	2301      	movs	r3, #1
 800021e:	60fb      	str	r3, [r7, #12]

    for(;;) // FreeRTOS task loop
    {
        // If button is pressed (Pin = 0) and we haven't toggled yet
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0 && flag == 1)
 8000220:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000224:	4810      	ldr	r0, [pc, #64]	@ (8000268 <ButtonTask+0x54>)
 8000226:	f000 fb5b 	bl	80008e0 <HAL_GPIO_ReadPin>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d10a      	bne.n	8000246 <ButtonTask+0x32>
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d107      	bne.n	8000246 <ButtonTask+0x32>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8000236:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800023a:	480b      	ldr	r0, [pc, #44]	@ (8000268 <ButtonTask+0x54>)
 800023c:	f000 fb68 	bl	8000910 <HAL_GPIO_TogglePin>
			flag = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	e00c      	b.n	8000260 <ButtonTask+0x4c>
		}
		else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1 && flag == 0)
 8000246:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800024a:	4807      	ldr	r0, [pc, #28]	@ (8000268 <ButtonTask+0x54>)
 800024c:	f000 fb48 	bl	80008e0 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b01      	cmp	r3, #1
 8000254:	d104      	bne.n	8000260 <ButtonTask+0x4c>
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d101      	bne.n	8000260 <ButtonTask+0x4c>
		{
			flag = 1;
 800025c:	2301      	movs	r3, #1
 800025e:	60fb      	str	r3, [r7, #12]
		}

        // Non-blocking delay: 50ms
        vTaskDelay(pdMS_TO_TICKS(50));
 8000260:	2032      	movs	r0, #50	@ 0x32
 8000262:	f001 fb1f 	bl	80018a4 <vTaskDelay>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0 && flag == 1)
 8000266:	e7db      	b.n	8000220 <ButtonTask+0xc>
 8000268:	40020800 	.word	0x40020800

0800026c <GPIO_Config>:
    }
}

void GPIO_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000272:	2300      	movs	r3, #0
 8000274:	603b      	str	r3, [r7, #0]
 8000276:	4b18      	ldr	r3, [pc, #96]	@ (80002d8 <GPIO_Config+0x6c>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027a:	4a17      	ldr	r2, [pc, #92]	@ (80002d8 <GPIO_Config+0x6c>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	6313      	str	r3, [r2, #48]	@ 0x30
 8000282:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <GPIO_Config+0x6c>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000286:	f003 0304 	and.w	r3, r3, #4
 800028a:	603b      	str	r3, [r7, #0]
 800028c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIOC_Init = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]

    // LED Output (PC10)
    GPIOC_Init.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 800029c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80002a0:	607b      	str	r3, [r7, #4]
    GPIOC_Init.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
    GPIOC_Init.Pull = GPIO_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
    GPIOC_Init.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC,&GPIOC_Init);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4619      	mov	r1, r3
 80002b2:	480a      	ldr	r0, [pc, #40]	@ (80002dc <GPIO_Config+0x70>)
 80002b4:	f000 f990 	bl	80005d8 <HAL_GPIO_Init>

    // Button Input (PC8)
    GPIOC_Init.Pin = GPIO_PIN_8;
 80002b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002bc:	607b      	str	r3, [r7, #4]
    GPIOC_Init.Mode = GPIO_MODE_INPUT;
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
    GPIOC_Init.Pull = GPIO_PULLUP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC,&GPIOC_Init);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	4804      	ldr	r0, [pc, #16]	@ (80002dc <GPIO_Config+0x70>)
 80002cc:	f000 f984 	bl	80005d8 <HAL_GPIO_Init>
}
 80002d0:	bf00      	nop
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020800 	.word	0x40020800

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002e4:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <SystemInit+0x20>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ea:	4a05      	ldr	r2, [pc, #20]	@ (8000300 <SystemInit+0x20>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000304:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800033c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000308:	f7ff ffea 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	@ (8000340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	@ (8000344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000332:	f003 f82f 	bl	8003394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000336:	f7ff ff53 	bl	80001e0 <main>
  bx  lr    
 800033a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800033c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000348:	080034ec 	.word	0x080034ec
  ldr r2, =_sbss
 800034c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000350:	20004ba0 	.word	0x20004ba0

08000354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC_IRQHandler>
	...

08000358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800035c:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <HAL_Init+0x40>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <HAL_Init+0x40>)
 8000362:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000368:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <HAL_Init+0x40>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <HAL_Init+0x40>)
 800036e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000374:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <HAL_Init+0x40>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a07      	ldr	r2, [pc, #28]	@ (8000398 <HAL_Init+0x40>)
 800037a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800037e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000380:	2003      	movs	r0, #3
 8000382:	f000 f8f5 	bl	8000570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000386:	200f      	movs	r0, #15
 8000388:	f000 f810 	bl	80003ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800038c:	f000 f806 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40023c00 	.word	0x40023c00

0800039c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
	...

080003ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <HAL_InitTick+0x54>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_InitTick+0x58>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80003c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f8f7 	bl	80005be <HAL_SYSTICK_Config>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003d6:	2301      	movs	r3, #1
 80003d8:	e00e      	b.n	80003f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b0f      	cmp	r3, #15
 80003de:	d80a      	bhi.n	80003f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003e0:	2200      	movs	r2, #0
 80003e2:	6879      	ldr	r1, [r7, #4]
 80003e4:	f04f 30ff 	mov.w	r0, #4294967295
 80003e8:	f000 f8cd 	bl	8000586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003ec:	4a06      	ldr	r2, [pc, #24]	@ (8000408 <HAL_InitTick+0x5c>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003f2:	2300      	movs	r3, #0
 80003f4:	e000      	b.n	80003f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000000 	.word	0x20000000
 8000404:	20000008 	.word	0x20000008
 8000408:	20000004 	.word	0x20000004

0800040c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f003 0307 	and.w	r3, r3, #7
 800041a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800041c:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <__NVIC_SetPriorityGrouping+0x44>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000422:	68ba      	ldr	r2, [r7, #8]
 8000424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000428:	4013      	ands	r3, r2
 800042a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800043c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800043e:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <__NVIC_SetPriorityGrouping+0x44>)
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	60d3      	str	r3, [r2, #12]
}
 8000444:	bf00      	nop
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000458:	4b04      	ldr	r3, [pc, #16]	@ (800046c <__NVIC_GetPriorityGrouping+0x18>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	0a1b      	lsrs	r3, r3, #8
 800045e:	f003 0307 	and.w	r3, r3, #7
}
 8000462:	4618      	mov	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	6039      	str	r1, [r7, #0]
 800047a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800047c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000480:	2b00      	cmp	r3, #0
 8000482:	db0a      	blt.n	800049a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	b2da      	uxtb	r2, r3
 8000488:	490c      	ldr	r1, [pc, #48]	@ (80004bc <__NVIC_SetPriority+0x4c>)
 800048a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048e:	0112      	lsls	r2, r2, #4
 8000490:	b2d2      	uxtb	r2, r2
 8000492:	440b      	add	r3, r1
 8000494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000498:	e00a      	b.n	80004b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4908      	ldr	r1, [pc, #32]	@ (80004c0 <__NVIC_SetPriority+0x50>)
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	f003 030f 	and.w	r3, r3, #15
 80004a6:	3b04      	subs	r3, #4
 80004a8:	0112      	lsls	r2, r2, #4
 80004aa:	b2d2      	uxtb	r2, r2
 80004ac:	440b      	add	r3, r1
 80004ae:	761a      	strb	r2, [r3, #24]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	e000e100 	.word	0xe000e100
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b089      	sub	sp, #36	@ 0x24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f003 0307 	and.w	r3, r3, #7
 80004d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	f1c3 0307 	rsb	r3, r3, #7
 80004de:	2b04      	cmp	r3, #4
 80004e0:	bf28      	it	cs
 80004e2:	2304      	movcs	r3, #4
 80004e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	3304      	adds	r3, #4
 80004ea:	2b06      	cmp	r3, #6
 80004ec:	d902      	bls.n	80004f4 <NVIC_EncodePriority+0x30>
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	3b03      	subs	r3, #3
 80004f2:	e000      	b.n	80004f6 <NVIC_EncodePriority+0x32>
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004f8:	f04f 32ff 	mov.w	r2, #4294967295
 80004fc:	69bb      	ldr	r3, [r7, #24]
 80004fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000502:	43da      	mvns	r2, r3
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	401a      	ands	r2, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800050c:	f04f 31ff 	mov.w	r1, #4294967295
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	43d9      	mvns	r1, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800051c:	4313      	orrs	r3, r2
         );
}
 800051e:	4618      	mov	r0, r3
 8000520:	3724      	adds	r7, #36	@ 0x24
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3b01      	subs	r3, #1
 8000538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800053c:	d301      	bcc.n	8000542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800053e:	2301      	movs	r3, #1
 8000540:	e00f      	b.n	8000562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <SysTick_Config+0x40>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3b01      	subs	r3, #1
 8000548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800054a:	210f      	movs	r1, #15
 800054c:	f04f 30ff 	mov.w	r0, #4294967295
 8000550:	f7ff ff8e 	bl	8000470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <SysTick_Config+0x40>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800055a:	4b04      	ldr	r3, [pc, #16]	@ (800056c <SysTick_Config+0x40>)
 800055c:	2207      	movs	r2, #7
 800055e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	e000e010 	.word	0xe000e010

08000570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff ff47 	bl	800040c <__NVIC_SetPriorityGrouping>
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000586:	b580      	push	{r7, lr}
 8000588:	b086      	sub	sp, #24
 800058a:	af00      	add	r7, sp, #0
 800058c:	4603      	mov	r3, r0
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
 8000592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000598:	f7ff ff5c 	bl	8000454 <__NVIC_GetPriorityGrouping>
 800059c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	6978      	ldr	r0, [r7, #20]
 80005a4:	f7ff ff8e 	bl	80004c4 <NVIC_EncodePriority>
 80005a8:	4602      	mov	r2, r0
 80005aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005ae:	4611      	mov	r1, r2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ff5d 	bl	8000470 <__NVIC_SetPriority>
}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff ffb0 	bl	800052c <SysTick_Config>
 80005cc:	4603      	mov	r3, r0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005d8:	b480      	push	{r7}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
 80005f2:	e159      	b.n	80008a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80005f4:	2201      	movs	r2, #1
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000608:	693a      	ldr	r2, [r7, #16]
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	429a      	cmp	r2, r3
 800060e:	f040 8148 	bne.w	80008a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f003 0303 	and.w	r3, r3, #3
 800061a:	2b01      	cmp	r3, #1
 800061c:	d005      	beq.n	800062a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000626:	2b02      	cmp	r3, #2
 8000628:	d130      	bne.n	800068c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	2203      	movs	r2, #3
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	4013      	ands	r3, r2
 8000640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	68da      	ldr	r2, [r3, #12]
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	69ba      	ldr	r2, [r7, #24]
 8000650:	4313      	orrs	r3, r2
 8000652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000660:	2201      	movs	r2, #1
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	43db      	mvns	r3, r3
 800066a:	69ba      	ldr	r2, [r7, #24]
 800066c:	4013      	ands	r3, r2
 800066e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	091b      	lsrs	r3, r3, #4
 8000676:	f003 0201 	and.w	r2, r3, #1
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	4313      	orrs	r3, r2
 8000684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	69ba      	ldr	r2, [r7, #24]
 800068a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f003 0303 	and.w	r3, r3, #3
 8000694:	2b03      	cmp	r3, #3
 8000696:	d017      	beq.n	80006c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	2203      	movs	r2, #3
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	4013      	ands	r3, r2
 80006ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	69ba      	ldr	r2, [r7, #24]
 80006be:	4313      	orrs	r3, r2
 80006c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	69ba      	ldr	r2, [r7, #24]
 80006c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f003 0303 	and.w	r3, r3, #3
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d123      	bne.n	800071c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	08da      	lsrs	r2, r3, #3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3208      	adds	r2, #8
 80006dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	f003 0307 	and.w	r3, r3, #7
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	220f      	movs	r2, #15
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	69ba      	ldr	r2, [r7, #24]
 80006f4:	4013      	ands	r3, r2
 80006f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	691a      	ldr	r2, [r3, #16]
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	69ba      	ldr	r2, [r7, #24]
 800070a:	4313      	orrs	r3, r2
 800070c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	08da      	lsrs	r2, r3, #3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3208      	adds	r2, #8
 8000716:	69b9      	ldr	r1, [r7, #24]
 8000718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	2203      	movs	r2, #3
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	43db      	mvns	r3, r3
 800072e:	69ba      	ldr	r2, [r7, #24]
 8000730:	4013      	ands	r3, r2
 8000732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f003 0203 	and.w	r2, r3, #3
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	4313      	orrs	r3, r2
 8000748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000758:	2b00      	cmp	r3, #0
 800075a:	f000 80a2 	beq.w	80008a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b57      	ldr	r3, [pc, #348]	@ (80008c0 <HAL_GPIO_Init+0x2e8>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000766:	4a56      	ldr	r2, [pc, #344]	@ (80008c0 <HAL_GPIO_Init+0x2e8>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076c:	6453      	str	r3, [r2, #68]	@ 0x44
 800076e:	4b54      	ldr	r3, [pc, #336]	@ (80008c0 <HAL_GPIO_Init+0x2e8>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800077a:	4a52      	ldr	r2, [pc, #328]	@ (80008c4 <HAL_GPIO_Init+0x2ec>)
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	089b      	lsrs	r3, r3, #2
 8000780:	3302      	adds	r3, #2
 8000782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	f003 0303 	and.w	r3, r3, #3
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	220f      	movs	r2, #15
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43db      	mvns	r3, r3
 8000798:	69ba      	ldr	r2, [r7, #24]
 800079a:	4013      	ands	r3, r2
 800079c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a49      	ldr	r2, [pc, #292]	@ (80008c8 <HAL_GPIO_Init+0x2f0>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d019      	beq.n	80007da <HAL_GPIO_Init+0x202>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a48      	ldr	r2, [pc, #288]	@ (80008cc <HAL_GPIO_Init+0x2f4>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d013      	beq.n	80007d6 <HAL_GPIO_Init+0x1fe>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a47      	ldr	r2, [pc, #284]	@ (80008d0 <HAL_GPIO_Init+0x2f8>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d00d      	beq.n	80007d2 <HAL_GPIO_Init+0x1fa>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a46      	ldr	r2, [pc, #280]	@ (80008d4 <HAL_GPIO_Init+0x2fc>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d007      	beq.n	80007ce <HAL_GPIO_Init+0x1f6>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a45      	ldr	r2, [pc, #276]	@ (80008d8 <HAL_GPIO_Init+0x300>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <HAL_GPIO_Init+0x1f2>
 80007c6:	2304      	movs	r3, #4
 80007c8:	e008      	b.n	80007dc <HAL_GPIO_Init+0x204>
 80007ca:	2307      	movs	r3, #7
 80007cc:	e006      	b.n	80007dc <HAL_GPIO_Init+0x204>
 80007ce:	2303      	movs	r3, #3
 80007d0:	e004      	b.n	80007dc <HAL_GPIO_Init+0x204>
 80007d2:	2302      	movs	r3, #2
 80007d4:	e002      	b.n	80007dc <HAL_GPIO_Init+0x204>
 80007d6:	2301      	movs	r3, #1
 80007d8:	e000      	b.n	80007dc <HAL_GPIO_Init+0x204>
 80007da:	2300      	movs	r3, #0
 80007dc:	69fa      	ldr	r2, [r7, #28]
 80007de:	f002 0203 	and.w	r2, r2, #3
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	4093      	lsls	r3, r2
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ec:	4935      	ldr	r1, [pc, #212]	@ (80008c4 <HAL_GPIO_Init+0x2ec>)
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	089b      	lsrs	r3, r3, #2
 80007f2:	3302      	adds	r3, #2
 80007f4:	69ba      	ldr	r2, [r7, #24]
 80007f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007fa:	4b38      	ldr	r3, [pc, #224]	@ (80008dc <HAL_GPIO_Init+0x304>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	43db      	mvns	r3, r3
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	4013      	ands	r3, r2
 8000808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d003      	beq.n	800081e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	4313      	orrs	r3, r2
 800081c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800081e:	4a2f      	ldr	r2, [pc, #188]	@ (80008dc <HAL_GPIO_Init+0x304>)
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000824:	4b2d      	ldr	r3, [pc, #180]	@ (80008dc <HAL_GPIO_Init+0x304>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	43db      	mvns	r3, r3
 800082e:	69ba      	ldr	r2, [r7, #24]
 8000830:	4013      	ands	r3, r2
 8000832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	4313      	orrs	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000848:	4a24      	ldr	r2, [pc, #144]	@ (80008dc <HAL_GPIO_Init+0x304>)
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <HAL_GPIO_Init+0x304>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	43db      	mvns	r3, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4013      	ands	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800086a:	69ba      	ldr	r2, [r7, #24]
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	4313      	orrs	r3, r2
 8000870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000872:	4a1a      	ldr	r2, [pc, #104]	@ (80008dc <HAL_GPIO_Init+0x304>)
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_GPIO_Init+0x304>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	43db      	mvns	r3, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4013      	ands	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800089c:	4a0f      	ldr	r2, [pc, #60]	@ (80008dc <HAL_GPIO_Init+0x304>)
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3301      	adds	r3, #1
 80008a6:	61fb      	str	r3, [r7, #28]
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	2b0f      	cmp	r3, #15
 80008ac:	f67f aea2 	bls.w	80005f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	3724      	adds	r7, #36	@ 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020400 	.word	0x40020400
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40013c00 	.word	0x40013c00

080008e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	691a      	ldr	r2, [r3, #16]
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	4013      	ands	r3, r2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d002      	beq.n	80008fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80008f8:	2301      	movs	r3, #1
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	e001      	b.n	8000902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000922:	887a      	ldrh	r2, [r7, #2]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4013      	ands	r3, r2
 8000928:	041a      	lsls	r2, r3, #16
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	43d9      	mvns	r1, r3
 800092e:	887b      	ldrh	r3, [r7, #2]
 8000930:	400b      	ands	r3, r1
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	619a      	str	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <SysTick_Handler+0x1c>)
 800094a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800094c:	f001 fc44 	bl	80021d8 <xTaskGetSchedulerState>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d001      	beq.n	800095a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8000956:	f002 fa3f 	bl	8002dd8 <xPortSysTickHandler>
  }
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010

08000964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <vApplicationGetIdleTaskMemory+0x2c>)
 8000974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	4a06      	ldr	r2, [pc, #24]	@ (8000994 <vApplicationGetIdleTaskMemory+0x30>)
 800097a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	601a      	str	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	2000007c 	.word	0x2000007c
 8000994:	20000124 	.word	0x20000124

08000998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80009a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <vApplicationGetTimerTaskMemory+0x30>)
 80009ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	20000324 	.word	0x20000324
 80009c8:	200003cc 	.word	0x200003cc

080009cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f103 0208 	add.w	r2, r3, #8
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f103 0208 	add.w	r2, r3, #8
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f103 0208 	add.w	r2, r3, #8
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a26:	b480      	push	{r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b085      	sub	sp, #20
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d103      	bne.n	8000a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e00c      	b.n	8000aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3308      	adds	r3, #8
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	e002      	b.n	8000a9c <vListInsert+0x2e>
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d2f6      	bcs.n	8000a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	683a      	ldr	r2, [r7, #0]
 8000ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	6892      	ldr	r2, [r2, #8]
 8000af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	6852      	ldr	r2, [r2, #4]
 8000b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d103      	bne.n	8000b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10b      	bne.n	8000b60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b4c:	f383 8811 	msr	BASEPRI, r3
 8000b50:	f3bf 8f6f 	isb	sy
 8000b54:	f3bf 8f4f 	dsb	sy
 8000b58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000b60:	f002 f8aa 	bl	8002cb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b6c:	68f9      	ldr	r1, [r7, #12]
 8000b6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000b70:	fb01 f303 	mul.w	r3, r1, r3
 8000b74:	441a      	add	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b90:	3b01      	subs	r3, #1
 8000b92:	68f9      	ldr	r1, [r7, #12]
 8000b94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000b96:	fb01 f303 	mul.w	r3, r1, r3
 8000b9a:	441a      	add	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	22ff      	movs	r2, #255	@ 0xff
 8000ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	22ff      	movs	r2, #255	@ 0xff
 8000bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d114      	bne.n	8000be0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d01a      	beq.n	8000bf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3310      	adds	r3, #16
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 f942 	bl	8001e4c <xTaskRemoveFromEventList>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d012      	beq.n	8000bf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <xQueueGenericReset+0xd0>)
 8000bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	f3bf 8f4f 	dsb	sy
 8000bda:	f3bf 8f6f 	isb	sy
 8000bde:	e009      	b.n	8000bf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3310      	adds	r3, #16
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fef1 	bl	80009cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3324      	adds	r3, #36	@ 0x24
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff feec 	bl	80009cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000bf4:	f002 f892 	bl	8002d1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000ed04 	.word	0xe000ed04

08000c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	@ 0x38
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d10b      	bne.n	8000c34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8000c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c20:	f383 8811 	msr	BASEPRI, r3
 8000c24:	f3bf 8f6f 	isb	sy
 8000c28:	f3bf 8f4f 	dsb	sy
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10b      	bne.n	8000c52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8000c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c3e:	f383 8811 	msr	BASEPRI, r3
 8000c42:	f3bf 8f6f 	isb	sy
 8000c46:	f3bf 8f4f 	dsb	sy
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	e7fd      	b.n	8000c4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <xQueueGenericCreateStatic+0x56>
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <xQueueGenericCreateStatic+0x5a>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <xQueueGenericCreateStatic+0x5c>
 8000c62:	2300      	movs	r3, #0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10b      	bne.n	8000c80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8000c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c6c:	f383 8811 	msr	BASEPRI, r3
 8000c70:	f3bf 8f6f 	isb	sy
 8000c74:	f3bf 8f4f 	dsb	sy
 8000c78:	623b      	str	r3, [r7, #32]
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <xQueueGenericCreateStatic+0x84>
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <xQueueGenericCreateStatic+0x88>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <xQueueGenericCreateStatic+0x8a>
 8000c90:	2300      	movs	r3, #0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10b      	bne.n	8000cae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8000c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c9a:	f383 8811 	msr	BASEPRI, r3
 8000c9e:	f3bf 8f6f 	isb	sy
 8000ca2:	f3bf 8f4f 	dsb	sy
 8000ca6:	61fb      	str	r3, [r7, #28]
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	e7fd      	b.n	8000caa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000cae:	2350      	movs	r3, #80	@ 0x50
 8000cb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b50      	cmp	r3, #80	@ 0x50
 8000cb6:	d00b      	beq.n	8000cd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8000cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cbc:	f383 8811 	msr	BASEPRI, r3
 8000cc0:	f3bf 8f6f 	isb	sy
 8000cc4:	f3bf 8f4f 	dsb	sy
 8000cc8:	61bb      	str	r3, [r7, #24]
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000cd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8000cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00d      	beq.n	8000cf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000ce4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4613      	mov	r3, r2
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 f805 	bl	8000d02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3730      	adds	r7, #48	@ 0x30
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d103      	bne.n	8000d1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	e002      	b.n	8000d24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d30:	2101      	movs	r1, #1
 8000d32:	69b8      	ldr	r0, [r7, #24]
 8000d34:	f7ff fefe 	bl	8000b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	78fa      	ldrb	r2, [r7, #3]
 8000d3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08e      	sub	sp, #56	@ 0x38
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10b      	bne.n	8000d7c <xQueueGenericSend+0x34>
	__asm volatile
 8000d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d68:	f383 8811 	msr	BASEPRI, r3
 8000d6c:	f3bf 8f6f 	isb	sy
 8000d70:	f3bf 8f4f 	dsb	sy
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d103      	bne.n	8000d8a <xQueueGenericSend+0x42>
 8000d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <xQueueGenericSend+0x46>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <xQueueGenericSend+0x48>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10b      	bne.n	8000dac <xQueueGenericSend+0x64>
	__asm volatile
 8000d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d98:	f383 8811 	msr	BASEPRI, r3
 8000d9c:	f3bf 8f6f 	isb	sy
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d103      	bne.n	8000dba <xQueueGenericSend+0x72>
 8000db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <xQueueGenericSend+0x76>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <xQueueGenericSend+0x78>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10b      	bne.n	8000ddc <xQueueGenericSend+0x94>
	__asm volatile
 8000dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dc8:	f383 8811 	msr	BASEPRI, r3
 8000dcc:	f3bf 8f6f 	isb	sy
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	623b      	str	r3, [r7, #32]
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ddc:	f001 f9fc 	bl	80021d8 <xTaskGetSchedulerState>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <xQueueGenericSend+0xa4>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <xQueueGenericSend+0xa8>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <xQueueGenericSend+0xaa>
 8000df0:	2300      	movs	r3, #0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10b      	bne.n	8000e0e <xQueueGenericSend+0xc6>
	__asm volatile
 8000df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dfa:	f383 8811 	msr	BASEPRI, r3
 8000dfe:	f3bf 8f6f 	isb	sy
 8000e02:	f3bf 8f4f 	dsb	sy
 8000e06:	61fb      	str	r3, [r7, #28]
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	e7fd      	b.n	8000e0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e0e:	f001 ff53 	bl	8002cb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d302      	bcc.n	8000e24 <xQueueGenericSend+0xdc>
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d129      	bne.n	8000e78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000e2a:	f000 fa0f 	bl	800124c <prvCopyDataToQueue>
 8000e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d010      	beq.n	8000e5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e3a:	3324      	adds	r3, #36	@ 0x24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 f805 	bl	8001e4c <xTaskRemoveFromEventList>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d013      	beq.n	8000e70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e48:	4b3f      	ldr	r3, [pc, #252]	@ (8000f48 <xQueueGenericSend+0x200>)
 8000e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	f3bf 8f4f 	dsb	sy
 8000e54:	f3bf 8f6f 	isb	sy
 8000e58:	e00a      	b.n	8000e70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000e60:	4b39      	ldr	r3, [pc, #228]	@ (8000f48 <xQueueGenericSend+0x200>)
 8000e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	f3bf 8f4f 	dsb	sy
 8000e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000e70:	f001 ff54 	bl	8002d1c <vPortExitCritical>
				return pdPASS;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e063      	b.n	8000f40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d103      	bne.n	8000e86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e7e:	f001 ff4d 	bl	8002d1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e05c      	b.n	8000f40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d106      	bne.n	8000e9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 f83f 	bl	8001f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e9a:	f001 ff3f 	bl	8002d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e9e:	f000 fda7 	bl	80019f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ea2:	f001 ff09 	bl	8002cb8 <vPortEnterCritical>
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb2:	d103      	bne.n	8000ebc <xQueueGenericSend+0x174>
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d103      	bne.n	8000ed2 <xQueueGenericSend+0x18a>
 8000eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000ed2:	f001 ff23 	bl	8002d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ed6:	1d3a      	adds	r2, r7, #4
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 f82e 	bl	8001f40 <xTaskCheckForTimeOut>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d124      	bne.n	8000f34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000eea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000eec:	f000 faa6 	bl	800143c <prvIsQueueFull>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d018      	beq.n	8000f28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef8:	3310      	adds	r3, #16
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 ff52 	bl	8001da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000f06:	f000 fa31 	bl	800136c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000f0a:	f000 fd7f 	bl	8001a0c <xTaskResumeAll>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f47f af7c 	bne.w	8000e0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <xQueueGenericSend+0x200>)
 8000f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	f3bf 8f6f 	isb	sy
 8000f26:	e772      	b.n	8000e0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000f2a:	f000 fa1f 	bl	800136c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f2e:	f000 fd6d 	bl	8001a0c <xTaskResumeAll>
 8000f32:	e76c      	b.n	8000e0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000f36:	f000 fa19 	bl	800136c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f3a:	f000 fd67 	bl	8001a0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3738      	adds	r7, #56	@ 0x38
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	e000ed04 	.word	0xe000ed04

08000f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b090      	sub	sp, #64	@ 0x40
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8000f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10b      	bne.n	8000f7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8000f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f68:	f383 8811 	msr	BASEPRI, r3
 8000f6c:	f3bf 8f6f 	isb	sy
 8000f70:	f3bf 8f4f 	dsb	sy
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <xQueueGenericSendFromISR+0x3e>
 8000f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <xQueueGenericSendFromISR+0x42>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <xQueueGenericSendFromISR+0x44>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10b      	bne.n	8000fac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8000f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f98:	f383 8811 	msr	BASEPRI, r3
 8000f9c:	f3bf 8f6f 	isb	sy
 8000fa0:	f3bf 8f4f 	dsb	sy
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d103      	bne.n	8000fba <xQueueGenericSendFromISR+0x6e>
 8000fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <xQueueGenericSendFromISR+0x72>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <xQueueGenericSendFromISR+0x74>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10b      	bne.n	8000fdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8000fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fc8:	f383 8811 	msr	BASEPRI, r3
 8000fcc:	f3bf 8f6f 	isb	sy
 8000fd0:	f3bf 8f4f 	dsb	sy
 8000fd4:	623b      	str	r3, [r7, #32]
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000fdc:	f001 ff4c 	bl	8002e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8000fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	61fa      	str	r2, [r7, #28]
 8000ff6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001004:	429a      	cmp	r2, r3
 8001006:	d302      	bcc.n	800100e <xQueueGenericSendFromISR+0xc2>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d12f      	bne.n	800106e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800100e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800101a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001024:	f000 f912 	bl	800124c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001028:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d112      	bne.n	8001058 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001036:	2b00      	cmp	r3, #0
 8001038:	d016      	beq.n	8001068 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800103a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800103c:	3324      	adds	r3, #36	@ 0x24
 800103e:	4618      	mov	r0, r3
 8001040:	f000 ff04 	bl	8001e4c <xTaskRemoveFromEventList>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00e      	beq.n	8001068 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e007      	b.n	8001068 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800105c:	3301      	adds	r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	b25a      	sxtb	r2, r3
 8001062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001068:	2301      	movs	r3, #1
 800106a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800106c:	e001      	b.n	8001072 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800106e:	2300      	movs	r3, #0
 8001070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001074:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800107c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800107e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001080:	4618      	mov	r0, r3
 8001082:	3740      	adds	r7, #64	@ 0x40
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800109c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10b      	bne.n	80010ba <xQueueReceive+0x32>
	__asm volatile
 80010a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010a6:	f383 8811 	msr	BASEPRI, r3
 80010aa:	f3bf 8f6f 	isb	sy
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	623b      	str	r3, [r7, #32]
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	e7fd      	b.n	80010b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d103      	bne.n	80010c8 <xQueueReceive+0x40>
 80010c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <xQueueReceive+0x44>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <xQueueReceive+0x46>
 80010cc:	2300      	movs	r3, #0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10b      	bne.n	80010ea <xQueueReceive+0x62>
	__asm volatile
 80010d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	61fb      	str	r3, [r7, #28]
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	e7fd      	b.n	80010e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010ea:	f001 f875 	bl	80021d8 <xTaskGetSchedulerState>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <xQueueReceive+0x72>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <xQueueReceive+0x76>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <xQueueReceive+0x78>
 80010fe:	2300      	movs	r3, #0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10b      	bne.n	800111c <xQueueReceive+0x94>
	__asm volatile
 8001104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	61bb      	str	r3, [r7, #24]
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800111c:	f001 fdcc 	bl	8002cb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	2b00      	cmp	r3, #0
 800112a:	d01f      	beq.n	800116c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001130:	f000 f8f6 	bl	8001320 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	1e5a      	subs	r2, r3, #1
 8001138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800113c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00f      	beq.n	8001164 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001146:	3310      	adds	r3, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fe7f 	bl	8001e4c <xTaskRemoveFromEventList>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001154:	4b3c      	ldr	r3, [pc, #240]	@ (8001248 <xQueueReceive+0x1c0>)
 8001156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	f3bf 8f4f 	dsb	sy
 8001160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001164:	f001 fdda 	bl	8002d1c <vPortExitCritical>
				return pdPASS;
 8001168:	2301      	movs	r3, #1
 800116a:	e069      	b.n	8001240 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d103      	bne.n	800117a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001172:	f001 fdd3 	bl	8002d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001176:	2300      	movs	r3, #0
 8001178:	e062      	b.n	8001240 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800117a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117c:	2b00      	cmp	r3, #0
 800117e:	d106      	bne.n	800118e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fec5 	bl	8001f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800118a:	2301      	movs	r3, #1
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800118e:	f001 fdc5 	bl	8002d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001192:	f000 fc2d 	bl	80019f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001196:	f001 fd8f 	bl	8002cb8 <vPortEnterCritical>
 800119a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a6:	d103      	bne.n	80011b0 <xQueueReceive+0x128>
 80011a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80011b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d103      	bne.n	80011c6 <xQueueReceive+0x13e>
 80011be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80011c6:	f001 fda9 	bl	8002d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011ca:	1d3a      	adds	r2, r7, #4
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 feb4 	bl	8001f40 <xTaskCheckForTimeOut>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d123      	bne.n	8001226 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80011e0:	f000 f916 	bl	8001410 <prvIsQueueEmpty>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d017      	beq.n	800121a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80011ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ec:	3324      	adds	r3, #36	@ 0x24
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fdd8 	bl	8001da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80011f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80011fa:	f000 f8b7 	bl	800136c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80011fe:	f000 fc05 	bl	8001a0c <xTaskResumeAll>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d189      	bne.n	800111c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <xQueueReceive+0x1c0>)
 800120a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	f3bf 8f4f 	dsb	sy
 8001214:	f3bf 8f6f 	isb	sy
 8001218:	e780      	b.n	800111c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800121a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800121c:	f000 f8a6 	bl	800136c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001220:	f000 fbf4 	bl	8001a0c <xTaskResumeAll>
 8001224:	e77a      	b.n	800111c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001228:	f000 f8a0 	bl	800136c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800122c:	f000 fbee 	bl	8001a0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001232:	f000 f8ed 	bl	8001410 <prvIsQueueEmpty>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	f43f af6f 	beq.w	800111c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800123e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001240:	4618      	mov	r0, r3
 8001242:	3730      	adds	r7, #48	@ 0x30
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	e000ed04 	.word	0xe000ed04

0800124c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001260:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10d      	bne.n	8001286 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d14d      	bne.n	800130e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 ffcc 	bl	8002214 <xTaskPriorityDisinherit>
 800127c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	e043      	b.n	800130e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d119      	bne.n	80012c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6858      	ldr	r0, [r3, #4]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	461a      	mov	r2, r3
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	f002 f8a2 	bl	80033e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	441a      	add	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d32b      	bcc.n	800130e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	e026      	b.n	800130e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	68d8      	ldr	r0, [r3, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	461a      	mov	r2, r3
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	f002 f888 	bl	80033e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	425b      	negs	r3, r3
 80012da:	441a      	add	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	425b      	negs	r3, r3
 80012f6:	441a      	add	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d105      	bne.n	800130e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	3b01      	subs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001316:	697b      	ldr	r3, [r7, #20]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	2b00      	cmp	r3, #0
 8001330:	d018      	beq.n	8001364 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	441a      	add	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	429a      	cmp	r2, r3
 800134a:	d303      	bcc.n	8001354 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68d9      	ldr	r1, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135c:	461a      	mov	r2, r3
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	f002 f83e 	bl	80033e0 <memcpy>
	}
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001374:	f001 fca0 	bl	8002cb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800137e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001380:	e011      	b.n	80013a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3324      	adds	r3, #36	@ 0x24
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fd5c 	bl	8001e4c <xTaskRemoveFromEventList>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800139a:	f000 fe35 	bl	8002008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dce9      	bgt.n	8001382 <prvUnlockQueue+0x16>
 80013ae:	e000      	b.n	80013b2 <prvUnlockQueue+0x46>
					break;
 80013b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	22ff      	movs	r2, #255	@ 0xff
 80013b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80013ba:	f001 fcaf 	bl	8002d1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80013be:	f001 fc7b 	bl	8002cb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80013c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013ca:	e011      	b.n	80013f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d012      	beq.n	80013fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3310      	adds	r3, #16
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fd37 	bl	8001e4c <xTaskRemoveFromEventList>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80013e4:	f000 fe10 	bl	8002008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	dce9      	bgt.n	80013cc <prvUnlockQueue+0x60>
 80013f8:	e000      	b.n	80013fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80013fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	22ff      	movs	r2, #255	@ 0xff
 8001400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001404:	f001 fc8a 	bl	8002d1c <vPortExitCritical>
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001418:	f001 fc4e 	bl	8002cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001424:	2301      	movs	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	e001      	b.n	800142e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800142e:	f001 fc75 	bl	8002d1c <vPortExitCritical>

	return xReturn;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001444:	f001 fc38 	bl	8002cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001450:	429a      	cmp	r2, r3
 8001452:	d102      	bne.n	800145a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001454:	2301      	movs	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e001      	b.n	800145e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800145e:	f001 fc5d 	bl	8002d1c <vPortExitCritical>

	return xReturn;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	e014      	b.n	80014a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800147c:	4a0f      	ldr	r2, [pc, #60]	@ (80014bc <vQueueAddToRegistry+0x50>)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10b      	bne.n	80014a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001488:	490c      	ldr	r1, [pc, #48]	@ (80014bc <vQueueAddToRegistry+0x50>)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <vQueueAddToRegistry+0x50>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800149e:	e006      	b.n	80014ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3301      	adds	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b07      	cmp	r3, #7
 80014aa:	d9e7      	bls.n	800147c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200007cc 	.word	0x200007cc

080014c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014d0:	f001 fbf2 	bl	8002cb8 <vPortEnterCritical>
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d103      	bne.n	80014ea <vQueueWaitForMessageRestricted+0x2a>
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f6:	d103      	bne.n	8001500 <vQueueWaitForMessageRestricted+0x40>
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001500:	f001 fc0c 	bl	8002d1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001508:	2b00      	cmp	r3, #0
 800150a:	d106      	bne.n	800151a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3324      	adds	r3, #36	@ 0x24
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	68b9      	ldr	r1, [r7, #8]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fc6d 	bl	8001df4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff26 	bl	800136c <prvUnlockQueue>
	}
 8001520:	bf00      	nop
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08e      	sub	sp, #56	@ 0x38
 800152c:	af04      	add	r7, sp, #16
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10b      	bne.n	8001554 <xTaskCreateStatic+0x2c>
	__asm volatile
 800153c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	623b      	str	r3, [r7, #32]
}
 800154e:	bf00      	nop
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10b      	bne.n	8001572 <xTaskCreateStatic+0x4a>
	__asm volatile
 800155a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800155e:	f383 8811 	msr	BASEPRI, r3
 8001562:	f3bf 8f6f 	isb	sy
 8001566:	f3bf 8f4f 	dsb	sy
 800156a:	61fb      	str	r3, [r7, #28]
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	e7fd      	b.n	800156e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001572:	23a8      	movs	r3, #168	@ 0xa8
 8001574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2ba8      	cmp	r3, #168	@ 0xa8
 800157a:	d00b      	beq.n	8001594 <xTaskCreateStatic+0x6c>
	__asm volatile
 800157c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001580:	f383 8811 	msr	BASEPRI, r3
 8001584:	f3bf 8f6f 	isb	sy
 8001588:	f3bf 8f4f 	dsb	sy
 800158c:	61bb      	str	r3, [r7, #24]
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001594:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01e      	beq.n	80015da <xTaskCreateStatic+0xb2>
 800159c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01b      	beq.n	80015da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80015a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80015b4:	2300      	movs	r3, #0
 80015b6:	9303      	str	r3, [sp, #12]
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 f851 	bl	8001674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80015d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015d4:	f000 f8f6 	bl	80017c4 <prvAddNewTaskToReadyList>
 80015d8:	e001      	b.n	80015de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80015de:	697b      	ldr	r3, [r7, #20]
	}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3728      	adds	r7, #40	@ 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fc7d 	bl	8002efc <pvPortMalloc>
 8001602:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00e      	beq.n	8001628 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800160a:	20a8      	movs	r0, #168	@ 0xa8
 800160c:	f001 fc76 	bl	8002efc <pvPortMalloc>
 8001610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	631a      	str	r2, [r3, #48]	@ 0x30
 800161e:	e005      	b.n	800162c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001620:	6978      	ldr	r0, [r7, #20]
 8001622:	f001 fd39 	bl	8003098 <vPortFree>
 8001626:	e001      	b.n	800162c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d017      	beq.n	8001662 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800163a:	88fa      	ldrh	r2, [r7, #6]
 800163c:	2300      	movs	r3, #0
 800163e:	9303      	str	r3, [sp, #12]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 f80f 	bl	8001674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001656:	69f8      	ldr	r0, [r7, #28]
 8001658:	f000 f8b4 	bl	80017c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	e002      	b.n	8001668 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001668:	69bb      	ldr	r3, [r7, #24]
	}
 800166a:	4618      	mov	r0, r3
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001684:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	461a      	mov	r2, r3
 800168c:	21a5      	movs	r1, #165	@ 0xa5
 800168e:	f001 fe23 	bl	80032d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800169c:	3b01      	subs	r3, #1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f023 0307 	bic.w	r3, r3, #7
 80016aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80016b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016ba:	f383 8811 	msr	BASEPRI, r3
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f3bf 8f4f 	dsb	sy
 80016c6:	617b      	str	r3, [r7, #20]
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	e7fd      	b.n	80016ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01f      	beq.n	8001714 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	e012      	b.n	8001700 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	4413      	add	r3, r2
 80016e0:	7819      	ldrb	r1, [r3, #0]
 80016e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	3334      	adds	r3, #52	@ 0x34
 80016ea:	460a      	mov	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	2b0f      	cmp	r3, #15
 8001704:	d9e9      	bls.n	80016da <prvInitialiseNewTask+0x66>
 8001706:	e000      	b.n	800170a <prvInitialiseNewTask+0x96>
			{
				break;
 8001708:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800170a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001712:	e003      	b.n	800171c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800171c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171e:	2b37      	cmp	r3, #55	@ 0x37
 8001720:	d901      	bls.n	8001726 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001722:	2337      	movs	r3, #55	@ 0x37
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800172a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800172c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800172e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001730:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001734:	2200      	movs	r2, #0
 8001736:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800173a:	3304      	adds	r3, #4
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff f965 	bl	8000a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001744:	3318      	adds	r3, #24
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f960 	bl	8000a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800174c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001750:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001754:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800175c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001764:	2200      	movs	r2, #0
 8001766:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800176a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176c:	2200      	movs	r2, #0
 800176e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001774:	3354      	adds	r3, #84	@ 0x54
 8001776:	224c      	movs	r2, #76	@ 0x4c
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f001 fdac 	bl	80032d8 <memset>
 8001780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001782:	4a0d      	ldr	r2, [pc, #52]	@ (80017b8 <prvInitialiseNewTask+0x144>)
 8001784:	659a      	str	r2, [r3, #88]	@ 0x58
 8001786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001788:	4a0c      	ldr	r2, [pc, #48]	@ (80017bc <prvInitialiseNewTask+0x148>)
 800178a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800178c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178e:	4a0c      	ldr	r2, [pc, #48]	@ (80017c0 <prvInitialiseNewTask+0x14c>)
 8001790:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	69b8      	ldr	r0, [r7, #24]
 8001798:	f001 f95a 	bl	8002a50 <pxPortInitialiseStack>
 800179c:	4602      	mov	r2, r0
 800179e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80017a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017ae:	bf00      	nop
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20004a60 	.word	0x20004a60
 80017bc:	20004ac8 	.word	0x20004ac8
 80017c0:	20004b30 	.word	0x20004b30

080017c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80017cc:	f001 fa74 	bl	8002cb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80017d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <prvAddNewTaskToReadyList+0xc4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001888 <prvAddNewTaskToReadyList+0xc4>)
 80017d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017da:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <prvAddNewTaskToReadyList+0xc8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017e2:	4a2a      	ldr	r2, [pc, #168]	@ (800188c <prvAddNewTaskToReadyList+0xc8>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017e8:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <prvAddNewTaskToReadyList+0xc4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d110      	bne.n	8001812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80017f0:	f000 fc2e 	bl	8002050 <prvInitialiseTaskLists>
 80017f4:	e00d      	b.n	8001812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017f6:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <prvAddNewTaskToReadyList+0xcc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017fe:	4b23      	ldr	r3, [pc, #140]	@ (800188c <prvAddNewTaskToReadyList+0xc8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	429a      	cmp	r2, r3
 800180a:	d802      	bhi.n	8001812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800180c:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <prvAddNewTaskToReadyList+0xc8>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <prvAddNewTaskToReadyList+0xd0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	4a1e      	ldr	r2, [pc, #120]	@ (8001894 <prvAddNewTaskToReadyList+0xd0>)
 800181a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <prvAddNewTaskToReadyList+0xd0>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <prvAddNewTaskToReadyList+0xd4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d903      	bls.n	8001838 <prvAddNewTaskToReadyList+0x74>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <prvAddNewTaskToReadyList+0xd4>)
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4a15      	ldr	r2, [pc, #84]	@ (800189c <prvAddNewTaskToReadyList+0xd8>)
 8001846:	441a      	add	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3304      	adds	r3, #4
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f7ff f8e9 	bl	8000a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001854:	f001 fa62 	bl	8002d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <prvAddNewTaskToReadyList+0xcc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00e      	beq.n	800187e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <prvAddNewTaskToReadyList+0xc8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186a:	429a      	cmp	r2, r3
 800186c:	d207      	bcs.n	800187e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <prvAddNewTaskToReadyList+0xdc>)
 8001870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f3bf 8f4f 	dsb	sy
 800187a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000ce0 	.word	0x20000ce0
 800188c:	2000080c 	.word	0x2000080c
 8001890:	20000cec 	.word	0x20000cec
 8001894:	20000cfc 	.word	0x20000cfc
 8001898:	20000ce8 	.word	0x20000ce8
 800189c:	20000810 	.word	0x20000810
 80018a0:	e000ed04 	.word	0xe000ed04

080018a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d018      	beq.n	80018e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <vTaskDelay+0x64>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <vTaskDelay+0x32>
	__asm volatile
 80018be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018c2:	f383 8811 	msr	BASEPRI, r3
 80018c6:	f3bf 8f6f 	isb	sy
 80018ca:	f3bf 8f4f 	dsb	sy
 80018ce:	60bb      	str	r3, [r7, #8]
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	e7fd      	b.n	80018d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80018d6:	f000 f88b 	bl	80019f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018da:	2100      	movs	r1, #0
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fd09 	bl	80022f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80018e2:	f000 f893 	bl	8001a0c <xTaskResumeAll>
 80018e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d107      	bne.n	80018fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80018ee:	4b07      	ldr	r3, [pc, #28]	@ (800190c <vTaskDelay+0x68>)
 80018f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f3bf 8f4f 	dsb	sy
 80018fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000d08 	.word	0x20000d08
 800190c:	e000ed04 	.word	0xe000ed04

08001910 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800191e:	463a      	mov	r2, r7
 8001920:	1d39      	adds	r1, r7, #4
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f81c 	bl	8000964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800192c:	6839      	ldr	r1, [r7, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	9202      	str	r2, [sp, #8]
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	2300      	movs	r3, #0
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2300      	movs	r3, #0
 800193c:	460a      	mov	r2, r1
 800193e:	4924      	ldr	r1, [pc, #144]	@ (80019d0 <vTaskStartScheduler+0xc0>)
 8001940:	4824      	ldr	r0, [pc, #144]	@ (80019d4 <vTaskStartScheduler+0xc4>)
 8001942:	f7ff fdf1 	bl	8001528 <xTaskCreateStatic>
 8001946:	4603      	mov	r3, r0
 8001948:	4a23      	ldr	r2, [pc, #140]	@ (80019d8 <vTaskStartScheduler+0xc8>)
 800194a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800194c:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <vTaskStartScheduler+0xc8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001954:	2301      	movs	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e001      	b.n	800195e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d102      	bne.n	800196a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001964:	f000 fd1a 	bl	800239c <xTimerCreateTimerTask>
 8001968:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d11b      	bne.n	80019a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8001970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001974:	f383 8811 	msr	BASEPRI, r3
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	f3bf 8f4f 	dsb	sy
 8001980:	613b      	str	r3, [r7, #16]
}
 8001982:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <vTaskStartScheduler+0xcc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3354      	adds	r3, #84	@ 0x54
 800198a:	4a15      	ldr	r2, [pc, #84]	@ (80019e0 <vTaskStartScheduler+0xd0>)
 800198c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <vTaskStartScheduler+0xd4>)
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001996:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <vTaskStartScheduler+0xd8>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <vTaskStartScheduler+0xdc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80019a2:	f001 f8e5 	bl	8002b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80019a6:	e00f      	b.n	80019c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ae:	d10b      	bne.n	80019c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80019b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019b4:	f383 8811 	msr	BASEPRI, r3
 80019b8:	f3bf 8f6f 	isb	sy
 80019bc:	f3bf 8f4f 	dsb	sy
 80019c0:	60fb      	str	r3, [r7, #12]
}
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <vTaskStartScheduler+0xb4>
}
 80019c8:	bf00      	nop
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	080034cc 	.word	0x080034cc
 80019d4:	08002021 	.word	0x08002021
 80019d8:	20000d04 	.word	0x20000d04
 80019dc:	2000080c 	.word	0x2000080c
 80019e0:	20000010 	.word	0x20000010
 80019e4:	20000d00 	.word	0x20000d00
 80019e8:	20000cec 	.word	0x20000cec
 80019ec:	20000ce4 	.word	0x20000ce4

080019f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <vTaskSuspendAll+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	4a03      	ldr	r2, [pc, #12]	@ (8001a08 <vTaskSuspendAll+0x18>)
 80019fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000d08 	.word	0x20000d08

08001a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001a1a:	4b42      	ldr	r3, [pc, #264]	@ (8001b24 <xTaskResumeAll+0x118>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10b      	bne.n	8001a3a <xTaskResumeAll+0x2e>
	__asm volatile
 8001a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a26:	f383 8811 	msr	BASEPRI, r3
 8001a2a:	f3bf 8f6f 	isb	sy
 8001a2e:	f3bf 8f4f 	dsb	sy
 8001a32:	603b      	str	r3, [r7, #0]
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	e7fd      	b.n	8001a36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001a3a:	f001 f93d 	bl	8002cb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001a3e:	4b39      	ldr	r3, [pc, #228]	@ (8001b24 <xTaskResumeAll+0x118>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	4a37      	ldr	r2, [pc, #220]	@ (8001b24 <xTaskResumeAll+0x118>)
 8001a46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a48:	4b36      	ldr	r3, [pc, #216]	@ (8001b24 <xTaskResumeAll+0x118>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d162      	bne.n	8001b16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a50:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <xTaskResumeAll+0x11c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d05e      	beq.n	8001b16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a58:	e02f      	b.n	8001aba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a5a:	4b34      	ldr	r3, [pc, #208]	@ (8001b2c <xTaskResumeAll+0x120>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3318      	adds	r3, #24
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f83a 	bl	8000ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f835 	bl	8000ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <xTaskResumeAll+0x124>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d903      	bls.n	8001a8a <xTaskResumeAll+0x7e>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a86:	4a2a      	ldr	r2, [pc, #168]	@ (8001b30 <xTaskResumeAll+0x124>)
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4a27      	ldr	r2, [pc, #156]	@ (8001b34 <xTaskResumeAll+0x128>)
 8001a98:	441a      	add	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f7fe ffc0 	bl	8000a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aaa:	4b23      	ldr	r3, [pc, #140]	@ (8001b38 <xTaskResumeAll+0x12c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d302      	bcc.n	8001aba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8001ab4:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <xTaskResumeAll+0x130>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <xTaskResumeAll+0x120>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1cb      	bne.n	8001a5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ac8:	f000 fb66 	bl	8002198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001acc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <xTaskResumeAll+0x134>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d010      	beq.n	8001afa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001ad8:	f000 f846 	bl	8001b68 <xTaskIncrementTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <xTaskResumeAll+0x130>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f1      	bne.n	8001ad8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8001af4:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <xTaskResumeAll+0x134>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <xTaskResumeAll+0x130>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <xTaskResumeAll+0x138>)
 8001b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f3bf 8f4f 	dsb	sy
 8001b12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001b16:	f001 f901 	bl	8002d1c <vPortExitCritical>

	return xAlreadyYielded;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000d08 	.word	0x20000d08
 8001b28:	20000ce0 	.word	0x20000ce0
 8001b2c:	20000ca0 	.word	0x20000ca0
 8001b30:	20000ce8 	.word	0x20000ce8
 8001b34:	20000810 	.word	0x20000810
 8001b38:	2000080c 	.word	0x2000080c
 8001b3c:	20000cf4 	.word	0x20000cf4
 8001b40:	20000cf0 	.word	0x20000cf0
 8001b44:	e000ed04 	.word	0xe000ed04

08001b48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <xTaskGetTickCount+0x1c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000ce4 	.word	0x20000ce4

08001b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b72:	4b4f      	ldr	r3, [pc, #316]	@ (8001cb0 <xTaskIncrementTick+0x148>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 8090 	bne.w	8001c9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb4 <xTaskIncrementTick+0x14c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b84:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb4 <xTaskIncrementTick+0x14c>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d121      	bne.n	8001bd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b90:	4b49      	ldr	r3, [pc, #292]	@ (8001cb8 <xTaskIncrementTick+0x150>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8001b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b9e:	f383 8811 	msr	BASEPRI, r3
 8001ba2:	f3bf 8f6f 	isb	sy
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	603b      	str	r3, [r7, #0]
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	e7fd      	b.n	8001bae <xTaskIncrementTick+0x46>
 8001bb2:	4b41      	ldr	r3, [pc, #260]	@ (8001cb8 <xTaskIncrementTick+0x150>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	4b40      	ldr	r3, [pc, #256]	@ (8001cbc <xTaskIncrementTick+0x154>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb8 <xTaskIncrementTick+0x150>)
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8001cbc <xTaskIncrementTick+0x154>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc0 <xTaskIncrementTick+0x158>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc0 <xTaskIncrementTick+0x158>)
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	f000 fae2 	bl	8002198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <xTaskIncrementTick+0x15c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d349      	bcc.n	8001c72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bde:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <xTaskIncrementTick+0x150>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d104      	bne.n	8001bf2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <xTaskIncrementTick+0x15c>)
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	601a      	str	r2, [r3, #0]
					break;
 8001bf0:	e03f      	b.n	8001c72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bf2:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <xTaskIncrementTick+0x150>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d203      	bcs.n	8001c12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc4 <xTaskIncrementTick+0x15c>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001c10:	e02f      	b.n	8001c72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	3304      	adds	r3, #4
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe ff62 	bl	8000ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3318      	adds	r3, #24
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe ff59 	bl	8000ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c32:	4b25      	ldr	r3, [pc, #148]	@ (8001cc8 <xTaskIncrementTick+0x160>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d903      	bls.n	8001c42 <xTaskIncrementTick+0xda>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	4a22      	ldr	r2, [pc, #136]	@ (8001cc8 <xTaskIncrementTick+0x160>)
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001ccc <xTaskIncrementTick+0x164>)
 8001c50:	441a      	add	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3304      	adds	r3, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f7fe fee4 	bl	8000a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <xTaskIncrementTick+0x168>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3b8      	bcc.n	8001bde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c70:	e7b5      	b.n	8001bde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c72:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <xTaskIncrementTick+0x168>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c78:	4914      	ldr	r1, [pc, #80]	@ (8001ccc <xTaskIncrementTick+0x164>)
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d901      	bls.n	8001c8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <xTaskIncrementTick+0x16c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e004      	b.n	8001ca6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <xTaskIncrementTick+0x170>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd8 <xTaskIncrementTick+0x170>)
 8001ca4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001ca6:	697b      	ldr	r3, [r7, #20]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000d08 	.word	0x20000d08
 8001cb4:	20000ce4 	.word	0x20000ce4
 8001cb8:	20000c98 	.word	0x20000c98
 8001cbc:	20000c9c 	.word	0x20000c9c
 8001cc0:	20000cf8 	.word	0x20000cf8
 8001cc4:	20000d00 	.word	0x20000d00
 8001cc8:	20000ce8 	.word	0x20000ce8
 8001ccc:	20000810 	.word	0x20000810
 8001cd0:	2000080c 	.word	0x2000080c
 8001cd4:	20000cf4 	.word	0x20000cf4
 8001cd8:	20000cf0 	.word	0x20000cf0

08001cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <vTaskSwitchContext+0xb4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001cea:	4b2a      	ldr	r3, [pc, #168]	@ (8001d94 <vTaskSwitchContext+0xb8>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001cf0:	e047      	b.n	8001d82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8001cf2:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <vTaskSwitchContext+0xb8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cf8:	4b27      	ldr	r3, [pc, #156]	@ (8001d98 <vTaskSwitchContext+0xbc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e011      	b.n	8001d24 <vTaskSwitchContext+0x48>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10b      	bne.n	8001d1e <vTaskSwitchContext+0x42>
	__asm volatile
 8001d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d0a:	f383 8811 	msr	BASEPRI, r3
 8001d0e:	f3bf 8f6f 	isb	sy
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	607b      	str	r3, [r7, #4]
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	e7fd      	b.n	8001d1a <vTaskSwitchContext+0x3e>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	491d      	ldr	r1, [pc, #116]	@ (8001d9c <vTaskSwitchContext+0xc0>)
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0e3      	beq.n	8001d00 <vTaskSwitchContext+0x24>
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4a16      	ldr	r2, [pc, #88]	@ (8001d9c <vTaskSwitchContext+0xc0>)
 8001d44:	4413      	add	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3308      	adds	r3, #8
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d104      	bne.n	8001d68 <vTaskSwitchContext+0x8c>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <vTaskSwitchContext+0xc4>)
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4a09      	ldr	r2, [pc, #36]	@ (8001d98 <vTaskSwitchContext+0xbc>)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <vTaskSwitchContext+0xc4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3354      	adds	r3, #84	@ 0x54
 8001d7e:	4a09      	ldr	r2, [pc, #36]	@ (8001da4 <vTaskSwitchContext+0xc8>)
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000d08 	.word	0x20000d08
 8001d94:	20000cf4 	.word	0x20000cf4
 8001d98:	20000ce8 	.word	0x20000ce8
 8001d9c:	20000810 	.word	0x20000810
 8001da0:	2000080c 	.word	0x2000080c
 8001da4:	20000010 	.word	0x20000010

08001da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10b      	bne.n	8001dd0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8001db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	60fb      	str	r3, [r7, #12]
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001dd0:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <vTaskPlaceOnEventList+0x48>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	3318      	adds	r3, #24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7fe fe48 	bl	8000a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001dde:	2101      	movs	r1, #1
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f000 fa87 	bl	80022f4 <prvAddCurrentTaskToDelayedList>
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000080c 	.word	0x2000080c

08001df4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10b      	bne.n	8001e1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8001e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e0a:	f383 8811 	msr	BASEPRI, r3
 8001e0e:	f3bf 8f6f 	isb	sy
 8001e12:	f3bf 8f4f 	dsb	sy
 8001e16:	617b      	str	r3, [r7, #20]
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	e7fd      	b.n	8001e1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <vTaskPlaceOnEventListRestricted+0x54>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3318      	adds	r3, #24
 8001e24:	4619      	mov	r1, r3
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7fe fdfd 	bl	8000a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	68b8      	ldr	r0, [r7, #8]
 8001e3c:	f000 fa5a 	bl	80022f4 <prvAddCurrentTaskToDelayedList>
	}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000080c 	.word	0x2000080c

08001e4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8001e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	60fb      	str	r3, [r7, #12]
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	e7fd      	b.n	8001e76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fe2e 	bl	8000ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e84:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <xTaskRemoveFromEventList+0xb0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11d      	bne.n	8001ec8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fe25 	bl	8000ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <xTaskRemoveFromEventList+0xb4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d903      	bls.n	8001eaa <xTaskRemoveFromEventList+0x5e>
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	4a16      	ldr	r2, [pc, #88]	@ (8001f00 <xTaskRemoveFromEventList+0xb4>)
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4a13      	ldr	r2, [pc, #76]	@ (8001f04 <xTaskRemoveFromEventList+0xb8>)
 8001eb8:	441a      	add	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f7fe fdb0 	bl	8000a26 <vListInsertEnd>
 8001ec6:	e005      	b.n	8001ed4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	3318      	adds	r3, #24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	480e      	ldr	r0, [pc, #56]	@ (8001f08 <xTaskRemoveFromEventList+0xbc>)
 8001ed0:	f7fe fda9 	bl	8000a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <xTaskRemoveFromEventList+0xc0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d905      	bls.n	8001eee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <xTaskRemoveFromEventList+0xc4>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e001      	b.n	8001ef2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001ef2:	697b      	ldr	r3, [r7, #20]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000d08 	.word	0x20000d08
 8001f00:	20000ce8 	.word	0x20000ce8
 8001f04:	20000810 	.word	0x20000810
 8001f08:	20000ca0 	.word	0x20000ca0
 8001f0c:	2000080c 	.word	0x2000080c
 8001f10:	20000cf4 	.word	0x20000cf4

08001f14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <vTaskInternalSetTimeOutState+0x24>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <vTaskInternalSetTimeOutState+0x28>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	605a      	str	r2, [r3, #4]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	20000cf8 	.word	0x20000cf8
 8001f3c:	20000ce4 	.word	0x20000ce4

08001f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8001f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f54:	f383 8811 	msr	BASEPRI, r3
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	613b      	str	r3, [r7, #16]
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10b      	bne.n	8001f86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8001f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f72:	f383 8811 	msr	BASEPRI, r3
 8001f76:	f3bf 8f6f 	isb	sy
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	60fb      	str	r3, [r7, #12]
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	e7fd      	b.n	8001f82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8001f86:	f000 fe97 	bl	8002cb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <xTaskCheckForTimeOut+0xc0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d102      	bne.n	8001faa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	e023      	b.n	8001ff2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <xTaskCheckForTimeOut+0xc4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d007      	beq.n	8001fc6 <xTaskCheckForTimeOut+0x86>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d302      	bcc.n	8001fc6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	e015      	b.n	8001ff2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d20b      	bcs.n	8001fe8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1ad2      	subs	r2, r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff99 	bl	8001f14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e004      	b.n	8001ff2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001ff2:	f000 fe93 	bl	8002d1c <vPortExitCritical>

	return xReturn;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000ce4 	.word	0x20000ce4
 8002004:	20000cf8 	.word	0x20000cf8

08002008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <vTaskMissedYield+0x14>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20000cf4 	.word	0x20000cf4

08002020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002028:	f000 f852 	bl	80020d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <prvIdleTask+0x28>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d9f9      	bls.n	8002028 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <prvIdleTask+0x2c>)
 8002036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002044:	e7f0      	b.n	8002028 <prvIdleTask+0x8>
 8002046:	bf00      	nop
 8002048:	20000810 	.word	0x20000810
 800204c:	e000ed04 	.word	0xe000ed04

08002050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e00c      	b.n	8002076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <prvInitialiseTaskLists+0x60>)
 8002068:	4413      	add	r3, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fcae 	bl	80009cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3301      	adds	r3, #1
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b37      	cmp	r3, #55	@ 0x37
 800207a:	d9ef      	bls.n	800205c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800207c:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <prvInitialiseTaskLists+0x64>)
 800207e:	f7fe fca5 	bl	80009cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002082:	480d      	ldr	r0, [pc, #52]	@ (80020b8 <prvInitialiseTaskLists+0x68>)
 8002084:	f7fe fca2 	bl	80009cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002088:	480c      	ldr	r0, [pc, #48]	@ (80020bc <prvInitialiseTaskLists+0x6c>)
 800208a:	f7fe fc9f 	bl	80009cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800208e:	480c      	ldr	r0, [pc, #48]	@ (80020c0 <prvInitialiseTaskLists+0x70>)
 8002090:	f7fe fc9c 	bl	80009cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002094:	480b      	ldr	r0, [pc, #44]	@ (80020c4 <prvInitialiseTaskLists+0x74>)
 8002096:	f7fe fc99 	bl	80009cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800209a:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <prvInitialiseTaskLists+0x78>)
 800209c:	4a05      	ldr	r2, [pc, #20]	@ (80020b4 <prvInitialiseTaskLists+0x64>)
 800209e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020a0:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <prvInitialiseTaskLists+0x7c>)
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <prvInitialiseTaskLists+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000810 	.word	0x20000810
 80020b4:	20000c70 	.word	0x20000c70
 80020b8:	20000c84 	.word	0x20000c84
 80020bc:	20000ca0 	.word	0x20000ca0
 80020c0:	20000cb4 	.word	0x20000cb4
 80020c4:	20000ccc 	.word	0x20000ccc
 80020c8:	20000c98 	.word	0x20000c98
 80020cc:	20000c9c 	.word	0x20000c9c

080020d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020d6:	e019      	b.n	800210c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80020d8:	f000 fdee 	bl	8002cb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <prvCheckTasksWaitingTermination+0x50>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fcf9 	bl	8000ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <prvCheckTasksWaitingTermination+0x54>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002124 <prvCheckTasksWaitingTermination+0x54>)
 80020f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <prvCheckTasksWaitingTermination+0x58>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <prvCheckTasksWaitingTermination+0x58>)
 8002100:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002102:	f000 fe0b 	bl	8002d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f810 	bl	800212c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <prvCheckTasksWaitingTermination+0x58>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1e1      	bne.n	80020d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000cb4 	.word	0x20000cb4
 8002124:	20000ce0 	.word	0x20000ce0
 8002128:	20000cc8 	.word	0x20000cc8

0800212c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3354      	adds	r3, #84	@ 0x54
 8002138:	4618      	mov	r0, r3
 800213a:	f001 f8d5 	bl	80032e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002144:	2b00      	cmp	r3, #0
 8002146:	d108      	bne.n	800215a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	4618      	mov	r0, r3
 800214e:	f000 ffa3 	bl	8003098 <vPortFree>
				vPortFree( pxTCB );
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 ffa0 	bl	8003098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002158:	e019      	b.n	800218e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002160:	2b01      	cmp	r3, #1
 8002162:	d103      	bne.n	800216c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 ff97 	bl	8003098 <vPortFree>
	}
 800216a:	e010      	b.n	800218e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002172:	2b02      	cmp	r3, #2
 8002174:	d00b      	beq.n	800218e <prvDeleteTCB+0x62>
	__asm volatile
 8002176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	60fb      	str	r3, [r7, #12]
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	e7fd      	b.n	800218a <prvDeleteTCB+0x5e>
	}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800219e:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <prvResetNextTaskUnblockTime+0x38>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d104      	bne.n	80021b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80021a8:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <prvResetNextTaskUnblockTime+0x3c>)
 80021aa:	f04f 32ff 	mov.w	r2, #4294967295
 80021ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80021b0:	e008      	b.n	80021c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <prvResetNextTaskUnblockTime+0x38>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <prvResetNextTaskUnblockTime+0x3c>)
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	20000c98 	.word	0x20000c98
 80021d4:	20000d00 	.word	0x20000d00

080021d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80021de:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <xTaskGetSchedulerState+0x34>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80021e6:	2301      	movs	r3, #1
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	e008      	b.n	80021fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <xTaskGetSchedulerState+0x38>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80021f4:	2302      	movs	r3, #2
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	e001      	b.n	80021fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80021fe:	687b      	ldr	r3, [r7, #4]
	}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000cec 	.word	0x20000cec
 8002210:	20000d08 	.word	0x20000d08

08002214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d058      	beq.n	80022dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800222a:	4b2f      	ldr	r3, [pc, #188]	@ (80022e8 <xTaskPriorityDisinherit+0xd4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d00b      	beq.n	800224c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	60fb      	str	r3, [r7, #12]
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	60bb      	str	r3, [r7, #8]
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002270:	1e5a      	subs	r2, r3, #1
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	429a      	cmp	r2, r3
 8002280:	d02c      	beq.n	80022dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002286:	2b00      	cmp	r3, #0
 8002288:	d128      	bne.n	80022dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	3304      	adds	r3, #4
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fc26 	bl	8000ae0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ac:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <xTaskPriorityDisinherit+0xd8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d903      	bls.n	80022bc <xTaskPriorityDisinherit+0xa8>
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b8:	4a0c      	ldr	r2, [pc, #48]	@ (80022ec <xTaskPriorityDisinherit+0xd8>)
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4a09      	ldr	r2, [pc, #36]	@ (80022f0 <xTaskPriorityDisinherit+0xdc>)
 80022ca:	441a      	add	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f7fe fba7 	bl	8000a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80022d8:	2301      	movs	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80022dc:	697b      	ldr	r3, [r7, #20]
	}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000080c 	.word	0x2000080c
 80022ec:	20000ce8 	.word	0x20000ce8
 80022f0:	20000810 	.word	0x20000810

080022f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80022fe:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <prvAddCurrentTaskToDelayedList+0x90>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002304:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <prvAddCurrentTaskToDelayedList+0x94>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3304      	adds	r3, #4
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fbe8 	bl	8000ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d10a      	bne.n	800232e <prvAddCurrentTaskToDelayedList+0x3a>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800231e:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <prvAddCurrentTaskToDelayedList+0x94>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3304      	adds	r3, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4819      	ldr	r0, [pc, #100]	@ (800238c <prvAddCurrentTaskToDelayedList+0x98>)
 8002328:	f7fe fb7d 	bl	8000a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800232c:	e026      	b.n	800237c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002336:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <prvAddCurrentTaskToDelayedList+0x94>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	429a      	cmp	r2, r3
 8002344:	d209      	bcs.n	800235a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002346:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <prvAddCurrentTaskToDelayedList+0x94>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3304      	adds	r3, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f7fe fb8b 	bl	8000a6e <vListInsert>
}
 8002358:	e010      	b.n	800237c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800235a:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <prvAddCurrentTaskToDelayedList+0xa0>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <prvAddCurrentTaskToDelayedList+0x94>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3304      	adds	r3, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4610      	mov	r0, r2
 8002368:	f7fe fb81 	bl	8000a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800236c:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <prvAddCurrentTaskToDelayedList+0xa4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	d202      	bcs.n	800237c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002376:	4a08      	ldr	r2, [pc, #32]	@ (8002398 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000ce4 	.word	0x20000ce4
 8002388:	2000080c 	.word	0x2000080c
 800238c:	20000ccc 	.word	0x20000ccc
 8002390:	20000c9c 	.word	0x20000c9c
 8002394:	20000c98 	.word	0x20000c98
 8002398:	20000d00 	.word	0x20000d00

0800239c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	@ 0x28
 80023a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80023a6:	f000 fb13 	bl	80029d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <xTimerCreateTimerTask+0x84>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d021      	beq.n	80023f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80023ba:	1d3a      	adds	r2, r7, #4
 80023bc:	f107 0108 	add.w	r1, r7, #8
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fae7 	bl	8000998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	9202      	str	r2, [sp, #8]
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	2302      	movs	r3, #2
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2300      	movs	r3, #0
 80023da:	460a      	mov	r2, r1
 80023dc:	4911      	ldr	r1, [pc, #68]	@ (8002424 <xTimerCreateTimerTask+0x88>)
 80023de:	4812      	ldr	r0, [pc, #72]	@ (8002428 <xTimerCreateTimerTask+0x8c>)
 80023e0:	f7ff f8a2 	bl	8001528 <xTaskCreateStatic>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4a11      	ldr	r2, [pc, #68]	@ (800242c <xTimerCreateTimerTask+0x90>)
 80023e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <xTimerCreateTimerTask+0x90>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80023f2:	2301      	movs	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	613b      	str	r3, [r7, #16]
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002414:	697b      	ldr	r3, [r7, #20]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000d3c 	.word	0x20000d3c
 8002424:	080034d4 	.word	0x080034d4
 8002428:	08002569 	.word	0x08002569
 800242c:	20000d40 	.word	0x20000d40

08002430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	@ 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <xTimerGenericCommand+0x30>
	__asm volatile
 8002448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	623b      	str	r3, [r7, #32]
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <xTimerGenericCommand+0x98>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02a      	beq.n	80024be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b05      	cmp	r3, #5
 8002478:	dc18      	bgt.n	80024ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800247a:	f7ff fead 	bl	80021d8 <xTaskGetSchedulerState>
 800247e:	4603      	mov	r3, r0
 8002480:	2b02      	cmp	r3, #2
 8002482:	d109      	bne.n	8002498 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002484:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <xTimerGenericCommand+0x98>)
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	f107 0110 	add.w	r1, r7, #16
 800248c:	2300      	movs	r3, #0
 800248e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002490:	f7fe fc5a 	bl	8000d48 <xQueueGenericSend>
 8002494:	6278      	str	r0, [r7, #36]	@ 0x24
 8002496:	e012      	b.n	80024be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <xTimerGenericCommand+0x98>)
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	f107 0110 	add.w	r1, r7, #16
 80024a0:	2300      	movs	r3, #0
 80024a2:	2200      	movs	r2, #0
 80024a4:	f7fe fc50 	bl	8000d48 <xQueueGenericSend>
 80024a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80024aa:	e008      	b.n	80024be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <xTimerGenericCommand+0x98>)
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	f107 0110 	add.w	r1, r7, #16
 80024b4:	2300      	movs	r3, #0
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	f7fe fd48 	bl	8000f4c <xQueueGenericSendFromISR>
 80024bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3728      	adds	r7, #40	@ 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000d3c 	.word	0x20000d3c

080024cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024d6:	4b23      	ldr	r3, [pc, #140]	@ (8002564 <prvProcessExpiredTimer+0x98>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3304      	adds	r3, #4
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fafb 	bl	8000ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d023      	beq.n	8002540 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	18d1      	adds	r1, r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	6978      	ldr	r0, [r7, #20]
 8002506:	f000 f8d5 	bl	80026b4 <prvInsertTimerInActiveList>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002510:	2300      	movs	r3, #0
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2300      	movs	r3, #0
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	2100      	movs	r1, #0
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff88 	bl	8002430 <xTimerGenericCommand>
 8002520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d114      	bne.n	8002552 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8002528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	60fb      	str	r3, [r7, #12]
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	b2da      	uxtb	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	4798      	blx	r3
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000d34 	.word	0x20000d34

08002568 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002570:	f107 0308 	add.w	r3, r7, #8
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f859 	bl	800262c <prvGetNextExpireTime>
 800257a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4619      	mov	r1, r3
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f805 	bl	8002590 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002586:	f000 f8d7 	bl	8002738 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800258a:	bf00      	nop
 800258c:	e7f0      	b.n	8002570 <prvTimerTask+0x8>
	...

08002590 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800259a:	f7ff fa29 	bl	80019f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800259e:	f107 0308 	add.w	r3, r7, #8
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f866 	bl	8002674 <prvSampleTimeNow>
 80025a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d130      	bne.n	8002612 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <prvProcessTimerOrBlockTask+0x3c>
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d806      	bhi.n	80025cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80025be:	f7ff fa25 	bl	8001a0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80025c2:	68f9      	ldr	r1, [r7, #12]
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff81 	bl	80024cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80025ca:	e024      	b.n	8002616 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80025d2:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <prvProcessTimerOrBlockTask+0x90>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <prvProcessTimerOrBlockTask+0x50>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <prvProcessTimerOrBlockTask+0x52>
 80025e0:	2300      	movs	r3, #0
 80025e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80025e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <prvProcessTimerOrBlockTask+0x94>)
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fe ff65 	bl	80014c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80025f6:	f7ff fa09 	bl	8001a0c <xTaskResumeAll>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002600:	4b09      	ldr	r3, [pc, #36]	@ (8002628 <prvProcessTimerOrBlockTask+0x98>)
 8002602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	f3bf 8f6f 	isb	sy
}
 8002610:	e001      	b.n	8002616 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002612:	f7ff f9fb 	bl	8001a0c <xTaskResumeAll>
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000d38 	.word	0x20000d38
 8002624:	20000d3c 	.word	0x20000d3c
 8002628:	e000ed04 	.word	0xe000ed04

0800262c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002634:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <prvGetNextExpireTime+0x44>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <prvGetNextExpireTime+0x16>
 800263e:	2201      	movs	r2, #1
 8002640:	e000      	b.n	8002644 <prvGetNextExpireTime+0x18>
 8002642:	2200      	movs	r2, #0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002650:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <prvGetNextExpireTime+0x44>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	e001      	b.n	8002660 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002660:	68fb      	ldr	r3, [r7, #12]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000d34 	.word	0x20000d34

08002674 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800267c:	f7ff fa64 	bl	8001b48 <xTaskGetTickCount>
 8002680:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002682:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <prvSampleTimeNow+0x3c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d205      	bcs.n	8002698 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800268c:	f000 f93a 	bl	8002904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e002      	b.n	800269e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800269e:	4a04      	ldr	r2, [pc, #16]	@ (80026b0 <prvSampleTimeNow+0x3c>)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80026a4:	68fb      	ldr	r3, [r7, #12]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000d44 	.word	0x20000d44

080026b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d812      	bhi.n	8002700 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e01b      	b.n	8002726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <prvInsertTimerInActiveList+0x7c>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3304      	adds	r3, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f7fe f9b8 	bl	8000a6e <vListInsert>
 80026fe:	e012      	b.n	8002726 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d206      	bcs.n	8002716 <prvInsertTimerInActiveList+0x62>
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d302      	bcc.n	8002716 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002710:	2301      	movs	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e007      	b.n	8002726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002716:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <prvInsertTimerInActiveList+0x80>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3304      	adds	r3, #4
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f7fe f9a4 	bl	8000a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002726:	697b      	ldr	r3, [r7, #20]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000d38 	.word	0x20000d38
 8002734:	20000d34 	.word	0x20000d34

08002738 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08e      	sub	sp, #56	@ 0x38
 800273c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800273e:	e0ce      	b.n	80028de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	da19      	bge.n	800277a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	3304      	adds	r3, #4
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	61fb      	str	r3, [r7, #28]
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800276a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002770:	6850      	ldr	r0, [r2, #4]
 8002772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	4611      	mov	r1, r2
 8002778:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f2c0 80ae 	blt.w	80028de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800278e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002790:	3304      	adds	r3, #4
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe f9a4 	bl	8000ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002798:	463b      	mov	r3, r7
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff6a 	bl	8002674 <prvSampleTimeNow>
 80027a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	f200 8097 	bhi.w	80028d8 <prvProcessReceivedCommands+0x1a0>
 80027aa:	a201      	add	r2, pc, #4	@ (adr r2, 80027b0 <prvProcessReceivedCommands+0x78>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027d9 	.word	0x080027d9
 80027b4:	080027d9 	.word	0x080027d9
 80027b8:	080027d9 	.word	0x080027d9
 80027bc:	0800284f 	.word	0x0800284f
 80027c0:	08002863 	.word	0x08002863
 80027c4:	080028af 	.word	0x080028af
 80027c8:	080027d9 	.word	0x080027d9
 80027cc:	080027d9 	.word	0x080027d9
 80027d0:	0800284f 	.word	0x0800284f
 80027d4:	08002863 	.word	0x08002863
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	18d1      	adds	r1, r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027f8:	f7ff ff5c 	bl	80026b4 <prvInsertTimerInActiveList>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d06c      	beq.n	80028dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002808:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800280a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d061      	beq.n	80028dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	441a      	add	r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	2100      	movs	r1, #0
 8002828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800282a:	f7ff fe01 	bl	8002430 <xTimerGenericCommand>
 800282e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d152      	bne.n	80028dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	61bb      	str	r3, [r7, #24]
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800284e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	b2da      	uxtb	r2, r3
 800285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8002860:	e03d      	b.n	80028de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b2da      	uxtb	r2, r3
 800286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002870:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8002882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	617b      	str	r3, [r7, #20]
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	e7fd      	b.n	8002896 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800289a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	18d1      	adds	r1, r2, r3
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028a8:	f7ff ff04 	bl	80026b4 <prvInsertTimerInActiveList>
					break;
 80028ac:	e017      	b.n	80028de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80028bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028be:	f000 fbeb 	bl	8003098 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80028c2:	e00c      	b.n	80028de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80028c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80028d6:	e002      	b.n	80028de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80028d8:	bf00      	nop
 80028da:	e000      	b.n	80028de <prvProcessReceivedCommands+0x1a6>
					break;
 80028dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <prvProcessReceivedCommands+0x1c8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1d39      	adds	r1, r7, #4
 80028e4:	2200      	movs	r2, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fbce 	bl	8001088 <xQueueReceive>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f47f af26 	bne.w	8002740 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3730      	adds	r7, #48	@ 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000d3c 	.word	0x20000d3c

08002904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800290a:	e049      	b.n	80029a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800290c:	4b2e      	ldr	r3, [pc, #184]	@ (80029c8 <prvSwitchTimerLists+0xc4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002916:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <prvSwitchTimerLists+0xc4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3304      	adds	r3, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f8db 	bl	8000ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d02f      	beq.n	80029a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4413      	add	r3, r2
 8002948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90e      	bls.n	8002970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800295e:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <prvSwitchTimerLists+0xc4>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3304      	adds	r3, #4
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f7fe f880 	bl	8000a6e <vListInsert>
 800296e:	e017      	b.n	80029a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002970:	2300      	movs	r3, #0
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2300      	movs	r3, #0
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	2100      	movs	r1, #0
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff fd58 	bl	8002430 <xTimerGenericCommand>
 8002980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10b      	bne.n	80029a0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	603b      	str	r3, [r7, #0]
}
 800299a:	bf00      	nop
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80029a0:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <prvSwitchTimerLists+0xc4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1b0      	bne.n	800290c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80029aa:	4b07      	ldr	r3, [pc, #28]	@ (80029c8 <prvSwitchTimerLists+0xc4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <prvSwitchTimerLists+0xc8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a04      	ldr	r2, [pc, #16]	@ (80029c8 <prvSwitchTimerLists+0xc4>)
 80029b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80029b8:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <prvSwitchTimerLists+0xc8>)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	6013      	str	r3, [r2, #0]
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000d34 	.word	0x20000d34
 80029cc:	20000d38 	.word	0x20000d38

080029d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80029d6:	f000 f96f 	bl	8002cb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80029da:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <prvCheckForValidListAndQueue+0x60>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d120      	bne.n	8002a24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80029e2:	4814      	ldr	r0, [pc, #80]	@ (8002a34 <prvCheckForValidListAndQueue+0x64>)
 80029e4:	f7fd fff2 	bl	80009cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80029e8:	4813      	ldr	r0, [pc, #76]	@ (8002a38 <prvCheckForValidListAndQueue+0x68>)
 80029ea:	f7fd ffef 	bl	80009cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80029ee:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <prvCheckForValidListAndQueue+0x6c>)
 80029f0:	4a10      	ldr	r2, [pc, #64]	@ (8002a34 <prvCheckForValidListAndQueue+0x64>)
 80029f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <prvCheckForValidListAndQueue+0x70>)
 80029f6:	4a10      	ldr	r2, [pc, #64]	@ (8002a38 <prvCheckForValidListAndQueue+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80029fa:	2300      	movs	r3, #0
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <prvCheckForValidListAndQueue+0x74>)
 8002a00:	4a11      	ldr	r2, [pc, #68]	@ (8002a48 <prvCheckForValidListAndQueue+0x78>)
 8002a02:	2110      	movs	r1, #16
 8002a04:	200a      	movs	r0, #10
 8002a06:	f7fe f8ff 	bl	8000c08 <xQueueGenericCreateStatic>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a08      	ldr	r2, [pc, #32]	@ (8002a30 <prvCheckForValidListAndQueue+0x60>)
 8002a0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002a10:	4b07      	ldr	r3, [pc, #28]	@ (8002a30 <prvCheckForValidListAndQueue+0x60>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a18:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <prvCheckForValidListAndQueue+0x60>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	490b      	ldr	r1, [pc, #44]	@ (8002a4c <prvCheckForValidListAndQueue+0x7c>)
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fd24 	bl	800146c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a24:	f000 f97a 	bl	8002d1c <vPortExitCritical>
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000d3c 	.word	0x20000d3c
 8002a34:	20000d0c 	.word	0x20000d0c
 8002a38:	20000d20 	.word	0x20000d20
 8002a3c:	20000d34 	.word	0x20000d34
 8002a40:	20000d38 	.word	0x20000d38
 8002a44:	20000de8 	.word	0x20000de8
 8002a48:	20000d48 	.word	0x20000d48
 8002a4c:	080034dc 	.word	0x080034dc

08002a50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3b04      	subs	r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3b04      	subs	r3, #4
 8002a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f023 0201 	bic.w	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3b04      	subs	r3, #4
 8002a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a80:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab4 <pxPortInitialiseStack+0x64>)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3b14      	subs	r3, #20
 8002a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3b04      	subs	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f06f 0202 	mvn.w	r2, #2
 8002a9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3b20      	subs	r3, #32
 8002aa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	08002ab9 	.word	0x08002ab9

08002ab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ac2:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <prvTaskExitError+0x58>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d00b      	beq.n	8002ae4 <prvTaskExitError+0x2c>
	__asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	60fb      	str	r3, [r7, #12]
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <prvTaskExitError+0x28>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	60bb      	str	r3, [r7, #8]
}
 8002af6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002af8:	bf00      	nop
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0fc      	beq.n	8002afa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	2000000c 	.word	0x2000000c
	...

08002b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b20:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <pxCurrentTCBConst2>)
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	6808      	ldr	r0, [r1, #0]
 8002b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2a:	f380 8809 	msr	PSP, r0
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f380 8811 	msr	BASEPRI, r0
 8002b3a:	4770      	bx	lr
 8002b3c:	f3af 8000 	nop.w

08002b40 <pxCurrentTCBConst2>:
 8002b40:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop

08002b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002b48:	4808      	ldr	r0, [pc, #32]	@ (8002b6c <prvPortStartFirstTask+0x24>)
 8002b4a:	6800      	ldr	r0, [r0, #0]
 8002b4c:	6800      	ldr	r0, [r0, #0]
 8002b4e:	f380 8808 	msr	MSP, r0
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f380 8814 	msr	CONTROL, r0
 8002b5a:	b662      	cpsie	i
 8002b5c:	b661      	cpsie	f
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	df00      	svc	0
 8002b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b6a:	bf00      	nop
 8002b6c:	e000ed08 	.word	0xe000ed08

08002b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <xPortStartScheduler+0x124>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a47      	ldr	r2, [pc, #284]	@ (8002c98 <xPortStartScheduler+0x128>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10b      	bne.n	8002b98 <xPortStartScheduler+0x28>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	613b      	str	r3, [r7, #16]
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b98:	4b3e      	ldr	r3, [pc, #248]	@ (8002c94 <xPortStartScheduler+0x124>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8002c9c <xPortStartScheduler+0x12c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10b      	bne.n	8002bba <xPortStartScheduler+0x4a>
	__asm volatile
 8002ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	60fb      	str	r3, [r7, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	e7fd      	b.n	8002bb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bba:	4b39      	ldr	r3, [pc, #228]	@ (8002ca0 <xPortStartScheduler+0x130>)
 8002bbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	22ff      	movs	r2, #255	@ 0xff
 8002bca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <xPortStartScheduler+0x134>)
 8002be0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002be2:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <xPortStartScheduler+0x138>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002be8:	e009      	b.n	8002bfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002bea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <xPortStartScheduler+0x138>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca8 <xPortStartScheduler+0x138>)
 8002bf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c06:	2b80      	cmp	r3, #128	@ 0x80
 8002c08:	d0ef      	beq.n	8002bea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ca8 <xPortStartScheduler+0x138>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d00b      	beq.n	8002c2e <xPortStartScheduler+0xbe>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	60bb      	str	r3, [r7, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	e7fd      	b.n	8002c2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca8 <xPortStartScheduler+0x138>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca8 <xPortStartScheduler+0x138>)
 8002c36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <xPortStartScheduler+0x138>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c40:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <xPortStartScheduler+0x138>)
 8002c42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c4c:	4b17      	ldr	r3, [pc, #92]	@ (8002cac <xPortStartScheduler+0x13c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a16      	ldr	r2, [pc, #88]	@ (8002cac <xPortStartScheduler+0x13c>)
 8002c52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c58:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <xPortStartScheduler+0x13c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <xPortStartScheduler+0x13c>)
 8002c5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002c62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002c64:	f000 f8da 	bl	8002e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <xPortStartScheduler+0x140>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002c6e:	f000 f8f9 	bl	8002e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <xPortStartScheduler+0x144>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb4 <xPortStartScheduler+0x144>)
 8002c78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002c7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002c7e:	f7ff ff63 	bl	8002b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002c82:	f7ff f82b 	bl	8001cdc <vTaskSwitchContext>
	prvTaskExitError();
 8002c86:	f7ff ff17 	bl	8002ab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	e000ed00 	.word	0xe000ed00
 8002c98:	410fc271 	.word	0x410fc271
 8002c9c:	410fc270 	.word	0x410fc270
 8002ca0:	e000e400 	.word	0xe000e400
 8002ca4:	20000e38 	.word	0x20000e38
 8002ca8:	20000e3c 	.word	0x20000e3c
 8002cac:	e000ed20 	.word	0xe000ed20
 8002cb0:	2000000c 	.word	0x2000000c
 8002cb4:	e000ef34 	.word	0xe000ef34

08002cb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	607b      	str	r3, [r7, #4]
}
 8002cd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002cd2:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <vPortEnterCritical+0x5c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d14 <vPortEnterCritical+0x5c>)
 8002cda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <vPortEnterCritical+0x5c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d110      	bne.n	8002d06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <vPortEnterCritical+0x60>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <vPortEnterCritical+0x4e>
	__asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	603b      	str	r3, [r7, #0]
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	e7fd      	b.n	8002d02 <vPortEnterCritical+0x4a>
	}
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	2000000c 	.word	0x2000000c
 8002d18:	e000ed04 	.word	0xe000ed04

08002d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d22:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <vPortExitCritical+0x50>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <vPortExitCritical+0x26>
	__asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	607b      	str	r3, [r7, #4]
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	e7fd      	b.n	8002d3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <vPortExitCritical+0x50>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	4a08      	ldr	r2, [pc, #32]	@ (8002d6c <vPortExitCritical+0x50>)
 8002d4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d4c:	4b07      	ldr	r3, [pc, #28]	@ (8002d6c <vPortExitCritical+0x50>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <vPortExitCritical+0x44>
 8002d54:	2300      	movs	r3, #0
 8002d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f383 8811 	msr	BASEPRI, r3
}
 8002d5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	2000000c 	.word	0x2000000c

08002d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d70:	f3ef 8009 	mrs	r0, PSP
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <pxCurrentTCBConst>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	f01e 0f10 	tst.w	lr, #16
 8002d80:	bf08      	it	eq
 8002d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d8a:	6010      	str	r0, [r2, #0]
 8002d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002d94:	f380 8811 	msr	BASEPRI, r0
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f7fe ff9c 	bl	8001cdc <vTaskSwitchContext>
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	f380 8811 	msr	BASEPRI, r0
 8002dac:	bc09      	pop	{r0, r3}
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	6808      	ldr	r0, [r1, #0]
 8002db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db6:	f01e 0f10 	tst.w	lr, #16
 8002dba:	bf08      	it	eq
 8002dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002dc0:	f380 8809 	msr	PSP, r0
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w

08002dd0 <pxCurrentTCBConst>:
 8002dd0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop

08002dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	607b      	str	r3, [r7, #4]
}
 8002df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002df2:	f7fe feb9 	bl	8001b68 <xTaskIncrementTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <xPortSysTickHandler+0x40>)
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	2300      	movs	r3, #0
 8002e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f383 8811 	msr	BASEPRI, r3
}
 8002e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	e000ed04 	.word	0xe000ed04

08002e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <vPortSetupTimerInterrupt+0x34>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <vPortSetupTimerInterrupt+0x38>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <vPortSetupTimerInterrupt+0x3c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	@ (8002e5c <vPortSetupTimerInterrupt+0x40>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	099b      	lsrs	r3, r3, #6
 8002e38:	4a09      	ldr	r2, [pc, #36]	@ (8002e60 <vPortSetupTimerInterrupt+0x44>)
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e3e:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <vPortSetupTimerInterrupt+0x34>)
 8002e40:	2207      	movs	r2, #7
 8002e42:	601a      	str	r2, [r3, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e010 	.word	0xe000e010
 8002e54:	e000e018 	.word	0xe000e018
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	10624dd3 	.word	0x10624dd3
 8002e60:	e000e014 	.word	0xe000e014

08002e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002e64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002e74 <vPortEnableVFP+0x10>
 8002e68:	6801      	ldr	r1, [r0, #0]
 8002e6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002e6e:	6001      	str	r1, [r0, #0]
 8002e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002e72:	bf00      	nop
 8002e74:	e000ed88 	.word	0xe000ed88

08002e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002e7e:	f3ef 8305 	mrs	r3, IPSR
 8002e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	d915      	bls.n	8002eb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e8a:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <vPortValidateInterruptPriority+0x74>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e94:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <vPortValidateInterruptPriority+0x78>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	7afa      	ldrb	r2, [r7, #11]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d20b      	bcs.n	8002eb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	607b      	str	r3, [r7, #4]
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	e7fd      	b.n	8002eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef4 <vPortValidateInterruptPriority+0x7c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <vPortValidateInterruptPriority+0x80>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d90b      	bls.n	8002ede <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	603b      	str	r3, [r7, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	e7fd      	b.n	8002eda <vPortValidateInterruptPriority+0x62>
	}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e3f0 	.word	0xe000e3f0
 8002ef0:	20000e38 	.word	0x20000e38
 8002ef4:	e000ed0c 	.word	0xe000ed0c
 8002ef8:	20000e3c 	.word	0x20000e3c

08002efc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002f08:	f7fe fd72 	bl	80019f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8003080 <pvPortMalloc+0x184>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002f14:	f000 f924 	bl	8003160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f18:	4b5a      	ldr	r3, [pc, #360]	@ (8003084 <pvPortMalloc+0x188>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 8095 	bne.w	8003050 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01e      	beq.n	8002f6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d015      	beq.n	8002f6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f023 0307 	bic.w	r3, r3, #7
 8002f44:	3308      	adds	r3, #8
 8002f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <pvPortMalloc+0x6e>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	617b      	str	r3, [r7, #20]
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	e7fd      	b.n	8002f66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d06f      	beq.n	8003050 <pvPortMalloc+0x154>
 8002f70:	4b45      	ldr	r3, [pc, #276]	@ (8003088 <pvPortMalloc+0x18c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d86a      	bhi.n	8003050 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f7a:	4b44      	ldr	r3, [pc, #272]	@ (800308c <pvPortMalloc+0x190>)
 8002f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f7e:	4b43      	ldr	r3, [pc, #268]	@ (800308c <pvPortMalloc+0x190>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f84:	e004      	b.n	8002f90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d903      	bls.n	8002fa2 <pvPortMalloc+0xa6>
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f1      	bne.n	8002f86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002fa2:	4b37      	ldr	r3, [pc, #220]	@ (8003080 <pvPortMalloc+0x184>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d051      	beq.n	8003050 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	4413      	add	r3, r2
 8002fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	1ad2      	subs	r2, r2, r3
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d920      	bls.n	8003010 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <pvPortMalloc+0xfc>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	613b      	str	r3, [r7, #16]
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800300a:	69b8      	ldr	r0, [r7, #24]
 800300c:	f000 f90a 	bl	8003224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003010:	4b1d      	ldr	r3, [pc, #116]	@ (8003088 <pvPortMalloc+0x18c>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	4a1b      	ldr	r2, [pc, #108]	@ (8003088 <pvPortMalloc+0x18c>)
 800301c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800301e:	4b1a      	ldr	r3, [pc, #104]	@ (8003088 <pvPortMalloc+0x18c>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <pvPortMalloc+0x194>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d203      	bcs.n	8003032 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800302a:	4b17      	ldr	r3, [pc, #92]	@ (8003088 <pvPortMalloc+0x18c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <pvPortMalloc+0x194>)
 8003030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <pvPortMalloc+0x188>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	431a      	orrs	r2, r3
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003046:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <pvPortMalloc+0x198>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	4a11      	ldr	r2, [pc, #68]	@ (8003094 <pvPortMalloc+0x198>)
 800304e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003050:	f7fe fcdc 	bl	8001a0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <pvPortMalloc+0x17a>
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	60fb      	str	r3, [r7, #12]
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	e7fd      	b.n	8003072 <pvPortMalloc+0x176>
	return pvReturn;
 8003076:	69fb      	ldr	r3, [r7, #28]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3728      	adds	r7, #40	@ 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20004a48 	.word	0x20004a48
 8003084:	20004a5c 	.word	0x20004a5c
 8003088:	20004a4c 	.word	0x20004a4c
 800308c:	20004a40 	.word	0x20004a40
 8003090:	20004a50 	.word	0x20004a50
 8003094:	20004a54 	.word	0x20004a54

08003098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d04f      	beq.n	800314a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80030aa:	2308      	movs	r3, #8
 80030ac:	425b      	negs	r3, r3
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4413      	add	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4b25      	ldr	r3, [pc, #148]	@ (8003154 <vPortFree+0xbc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <vPortFree+0x46>
	__asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	60fb      	str	r3, [r7, #12]
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	e7fd      	b.n	80030da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <vPortFree+0x66>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	60bb      	str	r3, [r7, #8]
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	e7fd      	b.n	80030fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <vPortFree+0xbc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01e      	beq.n	800314a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11a      	bne.n	800314a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4b0e      	ldr	r3, [pc, #56]	@ (8003154 <vPortFree+0xbc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	43db      	mvns	r3, r3
 800311e:	401a      	ands	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003124:	f7fe fc64 	bl	80019f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <vPortFree+0xc0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4413      	add	r3, r2
 8003132:	4a09      	ldr	r2, [pc, #36]	@ (8003158 <vPortFree+0xc0>)
 8003134:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003136:	6938      	ldr	r0, [r7, #16]
 8003138:	f000 f874 	bl	8003224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800313c:	4b07      	ldr	r3, [pc, #28]	@ (800315c <vPortFree+0xc4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	4a06      	ldr	r2, [pc, #24]	@ (800315c <vPortFree+0xc4>)
 8003144:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003146:	f7fe fc61 	bl	8001a0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20004a5c 	.word	0x20004a5c
 8003158:	20004a4c 	.word	0x20004a4c
 800315c:	20004a58 	.word	0x20004a58

08003160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003166:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800316a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800316c:	4b27      	ldr	r3, [pc, #156]	@ (800320c <prvHeapInit+0xac>)
 800316e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3307      	adds	r3, #7
 800317e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	4a1f      	ldr	r2, [pc, #124]	@ (800320c <prvHeapInit+0xac>)
 8003190:	4413      	add	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003198:	4a1d      	ldr	r2, [pc, #116]	@ (8003210 <prvHeapInit+0xb0>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800319e:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <prvHeapInit+0xb0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80031ac:	2208      	movs	r2, #8
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0307 	bic.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <prvHeapInit+0xb4>)
 80031c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80031c2:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <prvHeapInit+0xb4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031ca:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <prvHeapInit+0xb4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <prvHeapInit+0xb4>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <prvHeapInit+0xb8>)
 80031ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a09      	ldr	r2, [pc, #36]	@ (800321c <prvHeapInit+0xbc>)
 80031f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031f8:	4b09      	ldr	r3, [pc, #36]	@ (8003220 <prvHeapInit+0xc0>)
 80031fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	20000e40 	.word	0x20000e40
 8003210:	20004a40 	.word	0x20004a40
 8003214:	20004a48 	.word	0x20004a48
 8003218:	20004a50 	.word	0x20004a50
 800321c:	20004a4c 	.word	0x20004a4c
 8003220:	20004a5c 	.word	0x20004a5c

08003224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800322c:	4b28      	ldr	r3, [pc, #160]	@ (80032d0 <prvInsertBlockIntoFreeList+0xac>)
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e002      	b.n	8003238 <prvInsertBlockIntoFreeList+0x14>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	d8f7      	bhi.n	8003232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d108      	bne.n	8003266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	441a      	add	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	441a      	add	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d118      	bne.n	80032ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <prvInsertBlockIntoFreeList+0xb0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d00d      	beq.n	80032a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e008      	b.n	80032b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032a2:	4b0c      	ldr	r3, [pc, #48]	@ (80032d4 <prvInsertBlockIntoFreeList+0xb0>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e003      	b.n	80032b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d002      	beq.n	80032c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20004a40 	.word	0x20004a40
 80032d4:	20004a48 	.word	0x20004a48

080032d8 <memset>:
 80032d8:	4402      	add	r2, r0
 80032da:	4603      	mov	r3, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <_reclaim_reent>:
 80032e8:	4b29      	ldr	r3, [pc, #164]	@ (8003390 <_reclaim_reent+0xa8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4283      	cmp	r3, r0
 80032ee:	b570      	push	{r4, r5, r6, lr}
 80032f0:	4604      	mov	r4, r0
 80032f2:	d04b      	beq.n	800338c <_reclaim_reent+0xa4>
 80032f4:	69c3      	ldr	r3, [r0, #28]
 80032f6:	b1ab      	cbz	r3, 8003324 <_reclaim_reent+0x3c>
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	b16b      	cbz	r3, 8003318 <_reclaim_reent+0x30>
 80032fc:	2500      	movs	r5, #0
 80032fe:	69e3      	ldr	r3, [r4, #28]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	5959      	ldr	r1, [r3, r5]
 8003304:	2900      	cmp	r1, #0
 8003306:	d13b      	bne.n	8003380 <_reclaim_reent+0x98>
 8003308:	3504      	adds	r5, #4
 800330a:	2d80      	cmp	r5, #128	@ 0x80
 800330c:	d1f7      	bne.n	80032fe <_reclaim_reent+0x16>
 800330e:	69e3      	ldr	r3, [r4, #28]
 8003310:	4620      	mov	r0, r4
 8003312:	68d9      	ldr	r1, [r3, #12]
 8003314:	f000 f872 	bl	80033fc <_free_r>
 8003318:	69e3      	ldr	r3, [r4, #28]
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	b111      	cbz	r1, 8003324 <_reclaim_reent+0x3c>
 800331e:	4620      	mov	r0, r4
 8003320:	f000 f86c 	bl	80033fc <_free_r>
 8003324:	6961      	ldr	r1, [r4, #20]
 8003326:	b111      	cbz	r1, 800332e <_reclaim_reent+0x46>
 8003328:	4620      	mov	r0, r4
 800332a:	f000 f867 	bl	80033fc <_free_r>
 800332e:	69e1      	ldr	r1, [r4, #28]
 8003330:	b111      	cbz	r1, 8003338 <_reclaim_reent+0x50>
 8003332:	4620      	mov	r0, r4
 8003334:	f000 f862 	bl	80033fc <_free_r>
 8003338:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800333a:	b111      	cbz	r1, 8003342 <_reclaim_reent+0x5a>
 800333c:	4620      	mov	r0, r4
 800333e:	f000 f85d 	bl	80033fc <_free_r>
 8003342:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003344:	b111      	cbz	r1, 800334c <_reclaim_reent+0x64>
 8003346:	4620      	mov	r0, r4
 8003348:	f000 f858 	bl	80033fc <_free_r>
 800334c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800334e:	b111      	cbz	r1, 8003356 <_reclaim_reent+0x6e>
 8003350:	4620      	mov	r0, r4
 8003352:	f000 f853 	bl	80033fc <_free_r>
 8003356:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003358:	b111      	cbz	r1, 8003360 <_reclaim_reent+0x78>
 800335a:	4620      	mov	r0, r4
 800335c:	f000 f84e 	bl	80033fc <_free_r>
 8003360:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003362:	b111      	cbz	r1, 800336a <_reclaim_reent+0x82>
 8003364:	4620      	mov	r0, r4
 8003366:	f000 f849 	bl	80033fc <_free_r>
 800336a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800336c:	b111      	cbz	r1, 8003374 <_reclaim_reent+0x8c>
 800336e:	4620      	mov	r0, r4
 8003370:	f000 f844 	bl	80033fc <_free_r>
 8003374:	6a23      	ldr	r3, [r4, #32]
 8003376:	b14b      	cbz	r3, 800338c <_reclaim_reent+0xa4>
 8003378:	4620      	mov	r0, r4
 800337a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800337e:	4718      	bx	r3
 8003380:	680e      	ldr	r6, [r1, #0]
 8003382:	4620      	mov	r0, r4
 8003384:	f000 f83a 	bl	80033fc <_free_r>
 8003388:	4631      	mov	r1, r6
 800338a:	e7bb      	b.n	8003304 <_reclaim_reent+0x1c>
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	bf00      	nop
 8003390:	20000010 	.word	0x20000010

08003394 <__libc_init_array>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4d0d      	ldr	r5, [pc, #52]	@ (80033cc <__libc_init_array+0x38>)
 8003398:	4c0d      	ldr	r4, [pc, #52]	@ (80033d0 <__libc_init_array+0x3c>)
 800339a:	1b64      	subs	r4, r4, r5
 800339c:	10a4      	asrs	r4, r4, #2
 800339e:	2600      	movs	r6, #0
 80033a0:	42a6      	cmp	r6, r4
 80033a2:	d109      	bne.n	80033b8 <__libc_init_array+0x24>
 80033a4:	4d0b      	ldr	r5, [pc, #44]	@ (80033d4 <__libc_init_array+0x40>)
 80033a6:	4c0c      	ldr	r4, [pc, #48]	@ (80033d8 <__libc_init_array+0x44>)
 80033a8:	f000 f87e 	bl	80034a8 <_init>
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	2600      	movs	r6, #0
 80033b2:	42a6      	cmp	r6, r4
 80033b4:	d105      	bne.n	80033c2 <__libc_init_array+0x2e>
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033bc:	4798      	blx	r3
 80033be:	3601      	adds	r6, #1
 80033c0:	e7ee      	b.n	80033a0 <__libc_init_array+0xc>
 80033c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c6:	4798      	blx	r3
 80033c8:	3601      	adds	r6, #1
 80033ca:	e7f2      	b.n	80033b2 <__libc_init_array+0x1e>
 80033cc:	080034e4 	.word	0x080034e4
 80033d0:	080034e4 	.word	0x080034e4
 80033d4:	080034e4 	.word	0x080034e4
 80033d8:	080034e8 	.word	0x080034e8

080033dc <__retarget_lock_acquire_recursive>:
 80033dc:	4770      	bx	lr

080033de <__retarget_lock_release_recursive>:
 80033de:	4770      	bx	lr

080033e0 <memcpy>:
 80033e0:	440a      	add	r2, r1
 80033e2:	4291      	cmp	r1, r2
 80033e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80033e8:	d100      	bne.n	80033ec <memcpy+0xc>
 80033ea:	4770      	bx	lr
 80033ec:	b510      	push	{r4, lr}
 80033ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033f6:	4291      	cmp	r1, r2
 80033f8:	d1f9      	bne.n	80033ee <memcpy+0xe>
 80033fa:	bd10      	pop	{r4, pc}

080033fc <_free_r>:
 80033fc:	b538      	push	{r3, r4, r5, lr}
 80033fe:	4605      	mov	r5, r0
 8003400:	2900      	cmp	r1, #0
 8003402:	d041      	beq.n	8003488 <_free_r+0x8c>
 8003404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003408:	1f0c      	subs	r4, r1, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	bfb8      	it	lt
 800340e:	18e4      	addlt	r4, r4, r3
 8003410:	f000 f83e 	bl	8003490 <__malloc_lock>
 8003414:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <_free_r+0x90>)
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	b933      	cbnz	r3, 8003428 <_free_r+0x2c>
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	6014      	str	r4, [r2, #0]
 800341e:	4628      	mov	r0, r5
 8003420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003424:	f000 b83a 	b.w	800349c <__malloc_unlock>
 8003428:	42a3      	cmp	r3, r4
 800342a:	d908      	bls.n	800343e <_free_r+0x42>
 800342c:	6820      	ldr	r0, [r4, #0]
 800342e:	1821      	adds	r1, r4, r0
 8003430:	428b      	cmp	r3, r1
 8003432:	bf01      	itttt	eq
 8003434:	6819      	ldreq	r1, [r3, #0]
 8003436:	685b      	ldreq	r3, [r3, #4]
 8003438:	1809      	addeq	r1, r1, r0
 800343a:	6021      	streq	r1, [r4, #0]
 800343c:	e7ed      	b.n	800341a <_free_r+0x1e>
 800343e:	461a      	mov	r2, r3
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	b10b      	cbz	r3, 8003448 <_free_r+0x4c>
 8003444:	42a3      	cmp	r3, r4
 8003446:	d9fa      	bls.n	800343e <_free_r+0x42>
 8003448:	6811      	ldr	r1, [r2, #0]
 800344a:	1850      	adds	r0, r2, r1
 800344c:	42a0      	cmp	r0, r4
 800344e:	d10b      	bne.n	8003468 <_free_r+0x6c>
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	4401      	add	r1, r0
 8003454:	1850      	adds	r0, r2, r1
 8003456:	4283      	cmp	r3, r0
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	d1e0      	bne.n	800341e <_free_r+0x22>
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	6053      	str	r3, [r2, #4]
 8003462:	4408      	add	r0, r1
 8003464:	6010      	str	r0, [r2, #0]
 8003466:	e7da      	b.n	800341e <_free_r+0x22>
 8003468:	d902      	bls.n	8003470 <_free_r+0x74>
 800346a:	230c      	movs	r3, #12
 800346c:	602b      	str	r3, [r5, #0]
 800346e:	e7d6      	b.n	800341e <_free_r+0x22>
 8003470:	6820      	ldr	r0, [r4, #0]
 8003472:	1821      	adds	r1, r4, r0
 8003474:	428b      	cmp	r3, r1
 8003476:	bf04      	itt	eq
 8003478:	6819      	ldreq	r1, [r3, #0]
 800347a:	685b      	ldreq	r3, [r3, #4]
 800347c:	6063      	str	r3, [r4, #4]
 800347e:	bf04      	itt	eq
 8003480:	1809      	addeq	r1, r1, r0
 8003482:	6021      	streq	r1, [r4, #0]
 8003484:	6054      	str	r4, [r2, #4]
 8003486:	e7ca      	b.n	800341e <_free_r+0x22>
 8003488:	bd38      	pop	{r3, r4, r5, pc}
 800348a:	bf00      	nop
 800348c:	20004b9c 	.word	0x20004b9c

08003490 <__malloc_lock>:
 8003490:	4801      	ldr	r0, [pc, #4]	@ (8003498 <__malloc_lock+0x8>)
 8003492:	f7ff bfa3 	b.w	80033dc <__retarget_lock_acquire_recursive>
 8003496:	bf00      	nop
 8003498:	20004b98 	.word	0x20004b98

0800349c <__malloc_unlock>:
 800349c:	4801      	ldr	r0, [pc, #4]	@ (80034a4 <__malloc_unlock+0x8>)
 800349e:	f7ff bf9e 	b.w	80033de <__retarget_lock_release_recursive>
 80034a2:	bf00      	nop
 80034a4:	20004b98 	.word	0x20004b98

080034a8 <_init>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr

080034b4 <_fini>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr
